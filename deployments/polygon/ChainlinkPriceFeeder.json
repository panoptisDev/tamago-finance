{
  "address": "0xa096B98e3ef77e9731CC34E42EAb10D81c3E1745",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_chainlinkPriceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xab6d358ee8a633a1b6da954c7367516f9476c4a8f77a97c0fefe4b07d3bfe0e4",
  "receipt": {
    "to": null,
    "from": "0x27dDF44eC9E32343599F7B939e4c35c034f78076",
    "contractAddress": "0xa096B98e3ef77e9731CC34E42EAb10D81c3E1745",
    "transactionIndex": 51,
    "gasUsed": "315740",
    "logsBloom": "0x00000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000008000000000000000020000000000000004000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000002000000000002000800000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x30ce0c8fa9f70b179f6b5e07c587eb55766056bb90d278ad50948ec748179dd0",
    "transactionHash": "0xab6d358ee8a633a1b6da954c7367516f9476c4a8f77a97c0fefe4b07d3bfe0e4",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 23590594,
        "transactionHash": "0xab6d358ee8a633a1b6da954c7367516f9476c4a8f77a97c0fefe4b07d3bfe0e4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000027ddf44ec9e32343599f7b939e4c35c034f78076",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000029d4571981c75c0000000000000000000000000000000000000000000000028f72c54be90bd770000000000000000000000000000000000000000000005acddeeb69bbcacc28d10000000000000000000000000000000000000000000000028f48f0f4cf8a1014000000000000000000000000000000000000000000005acddf153e12e44df02d",
        "logIndex": 210,
        "blockHash": "0x30ce0c8fa9f70b179f6b5e07c587eb55766056bb90d278ad50948ec748179dd0"
      }
    ],
    "blockNumber": 23590594,
    "cumulativeGasUsed": "7262766",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "USDC/USD",
    "0xfE4A8cc5b5B2366C1B58Bea3858e81843581b2F7",
    8
  ],
  "solcInputHash": "257570a56a16115dc612c63e01d049a6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_chainlinkPriceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/feeders/ChainlinkPriceFeeder.sol\":\"ChainlinkPriceFeeder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x8895ce4f46aba18ee3cdb7b1d180f79edb868225781f60993c7b2181e2ee2583\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/feeders/ChainlinkPriceFeeder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../utility/Whitelist.sol\\\";\\nimport \\\"../interfaces/IPriceFeeder.sol\\\";\\nimport \\\"../utility/LibMath.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract ChainlinkPriceFeeder is IPriceFeeder {\\n    using LibMathUnsigned for uint256;\\n    using LibMathSigned for int256;\\n\\n    // for identification\\n    string public name;\\n    AggregatorV3Interface internal chainlinkPriceFeed;\\n    uint8 public decimals;\\n    uint256 private timestamp;\\n\\n    /*\\n        Example:\\n        _name : Facebook\\n        _chainlinkPriceFeedAddress : 0xCe1051646393087e706288C1B57Fd26446657A7f\\n        _decimals : 8\\n    */\\n\\n    constructor(\\n        string memory _name,\\n        address _chainlinkPriceFeedAddress,\\n        uint8 _decimals\\n    ) public {\\n        require(\\n            _decimals == 8 || _decimals == 18,\\n            \\\"Decimals must be either 8 or 18\\\"\\n        );\\n\\n        name = _name;\\n        decimals = _decimals; \\n        chainlinkPriceFeed = AggregatorV3Interface(_chainlinkPriceFeedAddress);\\n    }\\n\\n    // get current price\\n    function getValue() external view override returns (uint256) {\\n        (uint256 value, ) = _getCurrentValue();\\n        return value;\\n    }\\n\\n    // get current timmestamp\\n    function getTimestamp() external view override returns (uint256) {\\n        return _getTimestamp();\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    function _getTimestamp() internal view returns (uint256) {\\n        (, , , uint256 timeStamp, ) = chainlinkPriceFeed.latestRoundData();\\n\\n        return uint256(timeStamp);\\n    }\\n\\n    function _getCurrentValue() internal view returns (uint256, uint256) {\\n        (, int256 price, , uint256 timeStamp, ) = chainlinkPriceFeed\\n            .latestRoundData();\\n\\n        uint256 output = uint256(price);\\n\\n        if (decimals == 8) {\\n            output = output.mul(10**10);\\n        }\\n\\n        return (output, timeStamp);\\n    }\\n\\n}\",\"keccak256\":\"0xf3c7f6d91c80ddcddcd14bbbea83fed389d46074d9bdac53059720287da65b3a\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeeder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPriceFeeder {\\n\\n    function getValue() external view returns (uint256);\\n\\n    function getTimestamp() external view returns (uint);\\n\\n}\",\"keccak256\":\"0x5d1881ad205827f87c94df51d69bb851904308027b61d974bcf83c9f7a5c15f7\",\"license\":\"MIT\"},\"contracts/utility/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary LibMathSigned {\\n    int256 private constant _WAD = 10 ** 18;\\n    int256 private constant _INT256_MIN = -2 ** 255;\\n\\n    uint8 private constant FIXED_DIGITS = 18;\\n    int256 private constant FIXED_1 = 10 ** 18;\\n    int256 private constant FIXED_E = 2718281828459045235;\\n    uint8 private constant LONGER_DIGITS = 36;\\n    int256 private constant LONGER_FIXED_LOG_E_1_5 = 405465108108164381978013115464349137;\\n    int256 private constant LONGER_FIXED_1 = 10 ** 36;\\n    int256 private constant LONGER_FIXED_LOG_E_10 = 2302585092994045684017991454684364208;\\n\\n\\n    function WAD() internal pure returns (int256) {\\n        return _WAD;\\n    }\\n\\n    // additive inverse\\n    function neg(int256 a) internal pure returns (int256) {\\n        return sub(int256(0), a);\\n    }\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L13\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n        require(!(a == -1 && b == _INT256_MIN), \\\"wmultiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"wmultiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L32\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"wdivision by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"wdivision overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L44\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L54\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function wmul(int256 x, int256 y) internal pure returns (int256 z) {\\n        z = roundHalfUp(mul(x, y), _WAD) / _WAD;\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function wdiv(int256 x, int256 y) internal pure returns (int256 z) {\\n        if (y < 0) {\\n            y = -y;\\n            x = -x;\\n        }\\n        z = roundHalfUp(mul(x, _WAD), y) / y;\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function wfrac(int256 x, int256 y, int256 z) internal pure returns (int256 r) {\\n        int256 t = mul(x, y);\\n        if (z < 0) {\\n            z = neg(z);\\n            t = neg(t);\\n        }\\n        r = roundHalfUp(t, z) / z;\\n    }\\n\\n    function min(int256 x, int256 y) internal pure returns (int256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(int256 x, int256 y) internal pure returns (int256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    // see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/utils/SafeCast.sol#L103\\n    function toUint256(int256 x) internal pure returns (uint256) {\\n        require(x >= 0, \\\"int overflow\\\");\\n        return uint256(x);\\n    }\\n\\n    // x ^ n\\n    // NOTE: n is a normal integer, do not shift 18 decimals\\n    // solium-disable-next-line security/no-assign-params\\n    function wpowi(int256 x, int256 n) internal pure returns (int256 z) {\\n        require(n >= 0, \\\"wpowi only supports n >= 0\\\");\\n        z = n % 2 != 0 ? x : _WAD;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = wmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = wmul(z, x);\\n            }\\n        }\\n    }\\n\\n    // ROUND_HALF_UP rule helper. You have to call roundHalfUp(x, y) / y to finish the rounding operation\\n    // 0.5 \\u2248 1, 0.4 \\u2248 0, -0.5 \\u2248 -1, -0.4 \\u2248 0\\n    function roundHalfUp(int256 x, int256 y) internal pure returns (int256) {\\n        require(y > 0, \\\"roundHalfUp only supports y > 0\\\");\\n        if (x >= 0) {\\n            return add(x, y / 2);\\n        }\\n        return sub(x, y / 2);\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function wln(int256 x) internal pure returns (int256) {\\n        require(x > 0, \\\"logE of negative number\\\");\\n        require(x <= 10000000000000000000000000000000000000000, \\\"logE only accepts v <= 1e22 * 1e18\\\"); // in order to prevent using safe-math\\n        int256 r = 0;\\n        uint8 extraDigits = LONGER_DIGITS - FIXED_DIGITS;\\n        int256 t = int256(uint256(10)**uint256(extraDigits));\\n\\n        while (x <= FIXED_1 / 10) {\\n            x = x * 10;\\n            r -= LONGER_FIXED_LOG_E_10;\\n        }\\n        while (x >= 10 * FIXED_1) {\\n            x = x / 10;\\n            r += LONGER_FIXED_LOG_E_10;\\n        }\\n        while (x < FIXED_1) {\\n            x = wmul(x, FIXED_E);\\n            r -= LONGER_FIXED_1;\\n        }\\n        while (x > FIXED_E) {\\n            x = wdiv(x, FIXED_E);\\n            r += LONGER_FIXED_1;\\n        }\\n        if (x == FIXED_1) {\\n            return roundHalfUp(r, t) / t;\\n        }\\n        if (x == FIXED_E) {\\n            return FIXED_1 + roundHalfUp(r, t) / t;\\n        }\\n        x *= t;\\n\\n        //               x^2   x^3   x^4\\n        // Ln(1+x) = x - --- + --- - --- + ...\\n        //                2     3     4\\n        // when -1 < x < 1, O(x^n) < \\u03b5 => when n = 36, 0 < x < 0.316\\n        //\\n        //                    2    x           2    x          2    x\\n        // Ln(a+x) = Ln(a) + ---(------)^1  + ---(------)^3 + ---(------)^5 + ...\\n        //                    1   2a+x         3   2a+x        5   2a+x\\n        //\\n        // Let x = v - a\\n        //                  2   v-a         2   v-a        2   v-a\\n        // Ln(v) = Ln(a) + ---(-----)^1  + ---(-----)^3 + ---(-----)^5 + ...\\n        //                  1   v+a         3   v+a        5   v+a\\n        // when n = 36, 1 < v < 3.423\\n        r = r + LONGER_FIXED_LOG_E_1_5;\\n        int256 a1_5 = (3 * LONGER_FIXED_1) / 2;\\n        int256 m = (LONGER_FIXED_1 * (x - a1_5)) / (x + a1_5);\\n        r = r + 2 * m;\\n        int256 m2 = (m * m) / LONGER_FIXED_1;\\n        uint8 i = 3;\\n        while (true) {\\n            m = (m * m2) / LONGER_FIXED_1;\\n            r = r + (2 * m) / int256(i);\\n            i += 2;\\n            if (i >= 3 + 2 * FIXED_DIGITS) {\\n                break;\\n            }\\n        }\\n        return roundHalfUp(r, t) / t;\\n    }\\n\\n    // Log(b, x)\\n    function logBase(int256 base, int256 x) internal pure returns (int256) {\\n        return wdiv(wln(x), wln(base));\\n    }\\n\\n    function ceil(int256 x, int256 m) internal pure returns (int256) {\\n        require(x >= 0, \\\"ceil need x >= 0\\\");\\n        require(m > 0, \\\"ceil need m > 0\\\");\\n        return (sub(add(x, m), 1) / m) * m;\\n    }\\n}\\n\\n\\nlibrary LibMathUnsigned {\\n    uint256 private constant _WAD = 10**18;\\n    uint256 private constant _POSITIVE_INT256_MAX = 2**255 - 1;\\n\\n    function WAD() internal pure returns (uint256) {\\n        return _WAD;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L26\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"Unaddition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L55\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"Unsubtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L71\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"Unmultiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L111\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"Undivision by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), _WAD / 2) / _WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, _WAD), y / 2) / y;\\n    }\\n\\n    function wfrac(uint256 x, uint256 y, uint256 z) internal pure returns (uint256 r) {\\n        r = mul(x, y) / z;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function toInt256(uint256 x) internal pure returns (int256) {\\n        require(x <= _POSITIVE_INT256_MAX, \\\"uint256 overflow\\\");\\n        return int256(x);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L146\\n     */\\n    function mod(uint256 x, uint256 m) internal pure returns (uint256) {\\n        require(m != 0, \\\"mod by zero\\\");\\n        return x % m;\\n    }\\n\\n    function ceil(uint256 x, uint256 m) internal pure returns (uint256) {\\n        require(m > 0, \\\"ceil need m > 0\\\");\\n        return (sub(add(x, m), 1) / m) * m;\\n    }\\n}\\n\",\"keccak256\":\"0xbb5e9a3c47425a161108a8c2e591eb29d5a4b1350f6d5c0025d0a9f68aa301c2\",\"license\":\"MIT\"},\"contracts/utility/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n\\n/**\\n  * @dev The contract manages a list of whitelisted addresses\\n*/\\ncontract Whitelist is Ownable {\\n    using Address for address;\\n\\n    mapping (address => bool) private whitelist;\\n\\n    constructor() public {\\n        address msgSender = _msgSender();\\n        whitelist[msgSender] = true;\\n    }\\n\\n\\n    /**\\n      * @dev returns true if a given address is whitelisted, false if not\\n      * \\n      * @param _address address to check\\n      * \\n      * @return true if the address is whitelisted, false if not\\n    */\\n    function isWhitelisted(address _address) public view returns (bool) {\\n        return whitelist[_address];\\n    }\\n\\n    modifier onlyWhitelisted() {\\n        address sender = _msgSender();\\n        require(isWhitelisted(sender), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n      * @dev adds a given address to the whitelist\\n      * \\n      * @param _address address to add\\n    */\\n    function addAddress(address _address)\\n        public\\n        onlyWhitelisted\\n    {\\n        if (whitelist[_address]) // checks if the address is already whitelisted\\n            return;\\n\\n        whitelist[_address] = true;\\n    }\\n\\n    /**\\n      * @dev removes a given address from the whitelist\\n      * \\n      * @param _address address to remove\\n    */\\n    function removeAddress(address _address) public onlyWhitelisted {\\n        if (!whitelist[_address]) // checks if the address is actually whitelisted\\n            return;\\n\\n        whitelist[_address] = false;\\n    }\\n\\n\\n\\n}\",\"keccak256\":\"0xe6c6790c48ba25a6d701de19df3d52d3d073a34d83e5d88b15b4691207b04754\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161060d38038061060d8339818101604052606081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b90830190602082018581111561006857600080fd5b825164010000000081118282018810171561008257600080fd5b82525081516020918201929091019080838360005b838110156100af578181015183820152602001610097565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b50604090815260208201519101519092509050600860ff8216148061010457508060ff166012145b610155576040805162461bcd60e51b815260206004820152601f60248201527f446563696d616c73206d757374206265206569746865722038206f7220313800604482015290519081900360640190fd5b82516101689060009060208601906101a9565b50600180546001600160a01b039093166001600160a01b031960ff909316600160a01b0260ff60a01b1990941693909317919091169190911790555061023c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101ea57805160ff1916838001178555610217565b82800160010185558215610217579182015b828111156102175782518255916020019190600101906101fc565b50610223929150610227565b5090565b5b808211156102235760008155600101610228565b6103c28061024b6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306fdde0314610051578063188ec356146100ce57806320965255146100e8578063313ce567146100f0575b600080fd5b61005961010e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561009357818101518382015260200161007b565b50505050905090810190601f1680156100c05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100d661019c565b60408051918252519081900360200190f35b6100d66101ab565b6100f86101bd565b6040805160ff9092168252519081900360200190f35b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156101945780601f1061016957610100808354040283529160200191610194565b820191906000526020600020905b81548152906001019060200180831161017757829003601f168201915b505050505081565b60006101a66101cd565b905090565b6000806101b6610253565b5091505090565b600154600160a01b900460ff1681565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561021e57600080fd5b505afa158015610232573d6000803e3d6000fd5b505050506040513d60a081101561024857600080fd5b506060015191505090565b600080600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156102a757600080fd5b505afa1580156102bb573d6000803e3d6000fd5b505050506040513d60a08110156102d157600080fd5b50602081015160609091015160015491935091508290600160a01b900460ff166008141561030b57610308816402540be400610314565b90505b93509150509091565b60008261032357506000610386565b8282028284828161033057fe5b0414610383576040805162461bcd60e51b815260206004820152601960248201527f556e6d756c7469706c69636174696f6e206f766572666c6f7700000000000000604482015290519081900360640190fd5b90505b9291505056fea2646970667358221220da30ef6c837067d63db2e0964e9726f05e5a3de599e6d678b3d939be920fec8a64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806306fdde0314610051578063188ec356146100ce57806320965255146100e8578063313ce567146100f0575b600080fd5b61005961010e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561009357818101518382015260200161007b565b50505050905090810190601f1680156100c05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100d661019c565b60408051918252519081900360200190f35b6100d66101ab565b6100f86101bd565b6040805160ff9092168252519081900360200190f35b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156101945780601f1061016957610100808354040283529160200191610194565b820191906000526020600020905b81548152906001019060200180831161017757829003601f168201915b505050505081565b60006101a66101cd565b905090565b6000806101b6610253565b5091505090565b600154600160a01b900460ff1681565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561021e57600080fd5b505afa158015610232573d6000803e3d6000fd5b505050506040513d60a081101561024857600080fd5b506060015191505090565b600080600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156102a757600080fd5b505afa1580156102bb573d6000803e3d6000fd5b505050506040513d60a08110156102d157600080fd5b50602081015160609091015160015491935091508290600160a01b900460ff166008141561030b57610308816402540be400610314565b90505b93509150509091565b60008261032357506000610386565b8282028284828161033057fe5b0414610383576040805162461bcd60e51b815260206004820152601960248201527f556e6d756c7469706c69636174696f6e206f766572666c6f7700000000000000604482015290519081900360640190fd5b90505b9291505056fea2646970667358221220da30ef6c837067d63db2e0964e9726f05e5a3de599e6d678b3d939be920fec8a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7593,
        "contract": "contracts/feeders/ChainlinkPriceFeeder.sol:ChainlinkPriceFeeder",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 7595,
        "contract": "contracts/feeders/ChainlinkPriceFeeder.sol:ChainlinkPriceFeeder",
        "label": "chainlinkPriceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 7597,
        "contract": "contracts/feeders/ChainlinkPriceFeeder.sol:ChainlinkPriceFeeder",
        "label": "decimals",
        "offset": 20,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 7599,
        "contract": "contracts/feeders/ChainlinkPriceFeeder.sol:ChainlinkPriceFeeder",
        "label": "timestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}