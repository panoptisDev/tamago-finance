{
  "address": "0x13e9099f51EA8d9529d26D1AE8BcD73D3122832f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_nftUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_priceResolverAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralShareAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_collateralShareSymbol",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_syntheticSymbol",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "variantId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "PositionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "variantId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "PositionRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenValue",
          "type": "uint256"
        }
      ],
      "name": "addSyntheticVariant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralShare",
      "outputs": [
        {
          "internalType": "contract IPancakePair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralShareSymbol",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discountDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "estimateMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "estimateRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "forceMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "forceRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralSharePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSyntheticPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalCollatelizationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPairAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offsetDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceResolver",
      "outputs": [
        {
          "internalType": "contract IPriceResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPairAmount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum NFTManager.ContractState",
          "name": "_state",
          "type": "uint8"
        }
      ],
      "name": "setContractState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setDiscountDisabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setNftUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setOffsetDisabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceResolverAddress",
          "type": "address"
        }
      ],
      "name": "setPriceResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setRedeemFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_disabled",
          "type": "bool"
        }
      ],
      "name": "setSyntheticVariantDisable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum NFTManager.ContractState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticNFT",
      "outputs": [
        {
          "internalType": "contract ISyntheticNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticSymbol",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticVariantCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "syntheticVariants",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRawCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOutstanding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalIssued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBurnt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "disabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        }
      ],
      "name": "targetCollatelizationRatio",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalOutstanding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRawCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        }
      ],
      "name": "variantCollatelizationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc6efefc916d30405f40e5426dee48e97eeeb71ea456882af96b0d26afdfa38b",
  "receipt": {
    "to": null,
    "from": "0x27dDF44eC9E32343599F7B939e4c35c034f78076",
    "contractAddress": "0x13e9099f51EA8d9529d26D1AE8BcD73D3122832f",
    "transactionIndex": 32,
    "gasUsed": "8214586",
    "logsBloom": "0x00000000100000000000000000000000000000000000000100800000000000400100000000000000000000000000000000008000000080000000020000240000000000000000400000000000000000804001000000400000000100000000000000000004020080000000000000000800000000000000000184000000000000c02001010000002000000000000002000000000000000000000000000000000000220000000000000000000000000000004000000000000000000000000000004000000004000000000001000000000000000000000000000000100001000020000010108000000000000000000000000000000000000000000000000000100800",
    "blockHash": "0xcfb9a9b68d66eb75809c7cb9e15843c30a7812e28576f9a059290c63864ab27c",
    "transactionHash": "0xcc6efefc916d30405f40e5426dee48e97eeeb71ea456882af96b0d26afdfa38b",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 23100425,
        "transactionHash": "0xcc6efefc916d30405f40e5426dee48e97eeeb71ea456882af96b0d26afdfa38b",
        "address": "0x13e9099f51EA8d9529d26D1AE8BcD73D3122832f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000027ddf44ec9e32343599f7b939e4c35c034f78076"
        ],
        "data": "0x",
        "logIndex": 224,
        "blockHash": "0xcfb9a9b68d66eb75809c7cb9e15843c30a7812e28576f9a059290c63864ab27c"
      },
      {
        "transactionIndex": 32,
        "blockNumber": 23100425,
        "transactionHash": "0xcc6efefc916d30405f40e5426dee48e97eeeb71ea456882af96b0d26afdfa38b",
        "address": "0x8681353a7E8D5845164136eA687e0B803e917e4B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000013e9099f51ea8d9529d26d1ae8bcd73d3122832f"
        ],
        "data": "0x",
        "logIndex": 225,
        "blockHash": "0xcfb9a9b68d66eb75809c7cb9e15843c30a7812e28576f9a059290c63864ab27c"
      },
      {
        "transactionIndex": 32,
        "blockNumber": 23100425,
        "transactionHash": "0xcc6efefc916d30405f40e5426dee48e97eeeb71ea456882af96b0d26afdfa38b",
        "address": "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000013e9099f51ea8d9529d26d1ae8bcd73d3122832f",
          "0x000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 226,
        "blockHash": "0xcfb9a9b68d66eb75809c7cb9e15843c30a7812e28576f9a059290c63864ab27c"
      },
      {
        "transactionIndex": 32,
        "blockNumber": 23100425,
        "transactionHash": "0xcc6efefc916d30405f40e5426dee48e97eeeb71ea456882af96b0d26afdfa38b",
        "address": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000013e9099f51ea8d9529d26d1ae8bcd73d3122832f",
          "0x000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 227,
        "blockHash": "0xcfb9a9b68d66eb75809c7cb9e15843c30a7812e28576f9a059290c63864ab27c"
      },
      {
        "transactionIndex": 32,
        "blockNumber": 23100425,
        "transactionHash": "0xcc6efefc916d30405f40e5426dee48e97eeeb71ea456882af96b0d26afdfa38b",
        "address": "0x6e7a5FAFcec6BB1e78bAE2A1F0B612012BF14827",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000013e9099f51ea8d9529d26d1ae8bcd73d3122832f",
          "0x000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 228,
        "blockHash": "0xcfb9a9b68d66eb75809c7cb9e15843c30a7812e28576f9a059290c63864ab27c"
      },
      {
        "transactionIndex": 32,
        "blockNumber": 23100425,
        "transactionHash": "0xcc6efefc916d30405f40e5426dee48e97eeeb71ea456882af96b0d26afdfa38b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000027ddf44ec9e32343599f7b939e4c35c034f78076",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000036b85ac5f34f800000000000000000000000000000000000000000000000002a08a6c3b595ce537000000000000000000000000000000000000000000005ee81559a84cd0bae2200000000000000000000000000000000000000000000000029d1ee68efa27ed37000000000000000000000000000000000000000000005ee818c52df92fefda20",
        "logIndex": 229,
        "blockHash": "0xcfb9a9b68d66eb75809c7cb9e15843c30a7812e28576f9a059290c63864ab27c"
      }
    ],
    "blockNumber": 23100425,
    "cumulativeGasUsed": "14717894",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Ang Pow",
    "https://api.tamago.finance/angpow/{id}",
    "0x0579D1b2494CCD10D50C63e84E2F1a5Da7552e98",
    "0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827",
    "0x574d415449432d555344432d5348415245000000000000000000000000000000",
    "0x5553440000000000000000000000000000000000000000000000000000000000",
    "0x56E2D31FC6a587f2387844Eb2Ad1779BDFa07a6e"
  ],
  "solcInputHash": "94383fbc6b5990f2eaa26ad48e011ed6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nftUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_priceResolverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralShareAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_collateralShareSymbol\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_syntheticSymbol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"variantId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"PositionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"variantId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"PositionRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenValue\",\"type\":\"uint256\"}],\"name\":\"addSyntheticVariant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralShare\",\"outputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralShareSymbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"estimateMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"estimateRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"forceMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"forceRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralSharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSyntheticPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalCollatelizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPairAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offsetDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceResolver\",\"outputs\":[{\"internalType\":\"contract IPriceResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPairAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTManager.ContractState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setContractState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setDiscountDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setNftUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setOffsetDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceResolverAddress\",\"type\":\"address\"}],\"name\":\"setPriceResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_disabled\",\"type\":\"bool\"}],\"name\":\"setSyntheticVariantDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum NFTManager.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticNFT\",\"outputs\":[{\"internalType\":\"contract ISyntheticNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticSymbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticVariantCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"syntheticVariants\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRawCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOutstanding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBurnt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"targetCollatelizationRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRawCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"variantCollatelizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAddress(address)\":{\"details\":\"adds a given address to the whitelist \",\"params\":{\"_address\":\"address to add\"}},\"isWhitelisted(address)\":{\"details\":\"returns true if a given address is whitelisted, false if not \",\"params\":{\"_address\":\"address to check \"},\"returns\":{\"_0\":\"true if the address is whitelisted, false if not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAddress(address)\":{\"details\":\"removes a given address from the whitelist \",\"params\":{\"_address\":\"address to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A contract to collaterizes LP and mints NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTManager.sol\":\"NFTManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x24141d2f6b98d4cb77a8936eae8cbaad2e261d9062bdc08036096f4550092501\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) public {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x3fef0eeb248c7109ce0f9adce59543d8b4141b78382d3ec34db33dabdbbc13f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x21428ca879b2437107322dfc1e214d25ecd6b966344961025ee412c3acfd5fc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() internal {\\n        _registerInterface(\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x57a0e246fb1c8f9cccf91c508eafe474e40260a31de3a39019ba8312cfdf9b2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x61321d2c86346045bf394885ee3afeecc65f9daad2694bc19110967588fd7b5d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd918cca1b659f588a6d12d05fd7196179a8b1eac9133d7f77da7ef3133e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x2690a9b7f4f7489b8d25a4fc6bffc02ec3971fb41ed6c8b59adef2833bdab07c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/NFTManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol\\\";\\nimport \\\"./utility/LibMath.sol\\\";\\nimport \\\"./utility/Whitelist.sol\\\";\\nimport \\\"./utility/SyntheticNFT.sol\\\";\\nimport \\\"./interfaces/IPriceResolver.sol\\\";\\nimport \\\"./interfaces/ISyntheticNFT.sol\\\";\\nimport \\\"./interfaces/INFTManager.sol\\\";\\nimport \\\"./interfaces/IPancakePair.sol\\\";\\nimport \\\"./interfaces/IPancakeRouter02.sol\\\";\\nimport \\\"./interfaces/IPancakeFactory.sol\\\";\\n\\n/**\\n * @title A contract to collaterizes LP and mints NFT\\n */\\n\\ncontract NFTManager is ReentrancyGuard, Whitelist, INFTManager, ERC1155Holder {\\n    using LibMathSigned for int256;\\n    using LibMathUnsigned for uint256;\\n\\n    using SafeERC20 for IERC20;\\n\\n    enum ContractState {\\n        INITIAL,\\n        NORMAL,\\n        EMERGENCY,\\n        EXPIRED\\n    }\\n\\n    struct SyntheticVariant {\\n        // name of the variant\\n        string name;\\n        // token id for this variant\\n        uint256 tokenId;\\n        // value\\n        uint256 tokenValue;\\n        // raw collateral on this variant\\n        uint256 totalRawCollateral;\\n        // total tokens that been minted\\n        uint256 totalOutstanding;\\n        // total tokens that been issued\\n        uint256 totalIssued;\\n        // total tokens that been burnt\\n        uint256 totalBurnt;\\n        // active status\\n        bool disabled;\\n    }\\n\\n    // Name of the contract\\n    string public name;\\n    // Contract state\\n    ContractState public state;\\n    // Price resolver contract.\\n    IPriceResolver public priceResolver;\\n    // Synthetic NFT created by this contract.\\n    ISyntheticNFT public override syntheticNFT;\\n    // Collateral share\\n    IPancakePair public override collateralShare;\\n    // Collateral share's symbol for price calculation\\n    bytes32 public collateralShareSymbol;\\n    // Target currency in the registry\\n    bytes32 public syntheticSymbol;\\n    // Synthetic NFT variants\\n    mapping(uint8 => SyntheticVariant) public syntheticVariants;\\n    // Total Synthetic NFT variants\\n    uint8 public syntheticVariantCount;\\n    // Total raw collateral\\n    uint256 public totalRawCollateral;\\n    // Total NFT synthetics outstanding\\n    uint256 public totalOutstanding;\\n    // Dev address\\n    address public devAddress;\\n    // Redeem fee\\n    uint256 public redeemFee;\\n    // Ignore offset/discount fees when active\\n    bool public offsetDisabled;\\n    bool public discountDisabled;\\n\\n    // cooldown period before the minter can mint again\\n    uint256 COOLDOWN_PERIOD = 1 minutes;\\n    // max NFT that can be minted per time\\n    uint256 constant MAX_NFT = 100;\\n\\n    uint256 constant ONE = 1 ether; // 1\\n    uint256 constant MAX_UINT256 = uint256(-1);\\n    address constant ROUTER_ADDRESS =\\n        0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff; // Quickswap Router\\n    int256 constant BASE = 10 ether;\\n    int256 constant K = 9.3 ether;\\n\\n    event PositionCreated(\\n        address minter,\\n        uint8 variantId,\\n        uint256 tokenValue,\\n        uint256 collateralAmount,\\n        uint256 tokenAmount\\n    );\\n\\n    event PositionRemoved(\\n        address minter,\\n        uint8 variantId,\\n        uint256 tokenValue,\\n        uint256 collateralAmount,\\n        uint256 tokenAmount\\n    );\\n\\n    constructor(\\n        string memory _name,\\n        string memory _nftUri,\\n        address _priceResolverAddress,\\n        address _collateralShareAddress, // LP TOKEN\\n        bytes32 _collateralShareSymbol, // LP TOKEN\\n        bytes32 _syntheticSymbol,\\n        address _devAddress\\n    ) public nonReentrant {\\n        name = _name;\\n        syntheticSymbol = _syntheticSymbol;\\n        state = ContractState.INITIAL;\\n        collateralShare = IPancakePair(_collateralShareAddress);\\n        collateralShareSymbol = _collateralShareSymbol;\\n\\n        priceResolver = IPriceResolver(_priceResolverAddress);\\n\\n        redeemFee = 300; // 3.0%\\n\\n        // Deploy the synthetic NFT contract\\n        SyntheticNFT deployedContract = new SyntheticNFT(_name, _nftUri);\\n        syntheticNFT = ISyntheticNFT(address(deployedContract));\\n\\n        devAddress = _devAddress;\\n\\n        // add dev into the whitelist\\n        addAddress(_devAddress);\\n\\n        if (_devAddress != msg.sender) {\\n            addAddress(msg.sender);\\n        }\\n\\n        if (collateralShare.token0() != address(0)) {\\n            IERC20(collateralShare.token0()).approve(\\n                ROUTER_ADDRESS,\\n                MAX_UINT256\\n            );\\n            IERC20(collateralShare.token1()).approve(\\n                ROUTER_ADDRESS,\\n                MAX_UINT256\\n            );\\n            IERC20(address(collateralShare)).approve(\\n                ROUTER_ADDRESS,\\n                MAX_UINT256\\n            );\\n        }\\n    }\\n\\n    function estimateMint(uint8 _id, uint256 _tokenAmount)\\n        public\\n        view\\n        validateId(_id, _tokenAmount)\\n        returns (uint256 baseTokenAmount, uint256 pairTokenAmount, uint256 lpAmount, uint256 discount)\\n    {\\n        ( baseTokenAmount, pairTokenAmount, lpAmount, discount) = _estimateMint(\\n            _id,\\n            _tokenAmount\\n        );\\n    }\\n\\n    function estimateRedeem(uint8 _id, uint256 _tokenAmount)\\n        public\\n        view\\n        validateId(_id, _tokenAmount)\\n        returns (\\n            uint256 baseTokenAmount,\\n            uint256 pairTokenAmount,\\n            uint256 lpAmount,\\n            uint256 offset\\n        )\\n    {\\n        (baseTokenAmount, pairTokenAmount, lpAmount, offset ) = _estimateRedeem(\\n            _id,\\n            _tokenAmount\\n        );\\n    }\\n\\n    function mint(uint8 _id, uint256 _tokenAmount, uint256 _maxBaseAmount, uint256 _maxPairAmount)\\n        public\\n        nonReentrant\\n        isReady\\n        validateId(_id, _tokenAmount)\\n    {\\n        (uint256 baseAmount, uint256 pairAmount, , ) = _estimateMint(\\n            _id,\\n            _tokenAmount\\n        );\\n\\n        require( _maxBaseAmount >= baseAmount , \\\"Exceeding _maxBaseAmount\\\" );\\n        require( _maxPairAmount >= pairAmount , \\\"Exceeding _maxPairAmount\\\" );\\n\\n        // takes ERC-20 tokens\\n        IERC20(collateralShare.token0()).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            baseAmount\\n        );\\n        IERC20(collateralShare.token1()).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            pairAmount\\n        );\\n\\n        (, , uint256 lpAmount) = IPancakeRouter02(ROUTER_ADDRESS).addLiquidity(\\n            collateralShare.token0(),\\n            collateralShare.token1(),\\n            baseAmount,\\n            pairAmount,\\n            baseAmount.mul(9700).div(10000),\\n            pairAmount.mul(9700).div(10000),\\n            address(this),\\n            now + 86400\\n        );\\n\\n        _createPosition(_id, lpAmount, _tokenAmount);\\n\\n        // mint NFT back to the minter\\n        syntheticNFT.mint(\\n            msg.sender,\\n            syntheticVariants[_id].tokenId,\\n            _tokenAmount,\\n            _toBytes(0)\\n        );\\n    }\\n\\n    \\n\\n    function redeem(uint8 _id, uint256 _tokenAmount, uint256 _minBaseAmount, uint256 _minPairAmount)\\n        public\\n        nonReentrant\\n        isReady\\n        validateId(_id, _tokenAmount)\\n    {\\n        (, , uint256 lpAmount,) = _estimateRedeem(_id, _tokenAmount);\\n\\n        _removePosition(_id, lpAmount, _tokenAmount);\\n\\n        // burn NFT\\n        syntheticNFT.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            syntheticVariants[_id].tokenId,\\n            _tokenAmount,\\n            _toBytes(0)\\n        );\\n        syntheticNFT.burn(\\n            address(this),\\n            syntheticVariants[_id].tokenId,\\n            _tokenAmount\\n        );\\n\\n        (uint256 baseTokenAmount, uint256 pairTokenAmount) = IPancakeRouter02(\\n            ROUTER_ADDRESS\\n        ).removeLiquidity(\\n                collateralShare.token0(),\\n                collateralShare.token1(),\\n                lpAmount,\\n                _minBaseAmount,\\n                _minPairAmount,\\n                address(this),\\n                now + 86400\\n            );\\n\\n        require( baseTokenAmount >= _minBaseAmount , \\\"_minBaseAmount is not reached\\\");\\n        require( pairTokenAmount >= _minPairAmount, \\\"_minPairAmount is not reached\\\");\\n\\n        // return tokens back\\n        if (redeemFee != 0) {\\n            uint256 baseFee = baseTokenAmount.mul(redeemFee).div(10000);\\n            uint256 pairFee = pairTokenAmount.mul(redeemFee).div(10000);\\n            IERC20(collateralShare.token0()).transfer(msg.sender, baseTokenAmount.sub(baseFee));\\n            IERC20(collateralShare.token1()).transfer(msg.sender, pairTokenAmount.sub(pairFee));\\n            // transfer fees to dev.\\n            IERC20(collateralShare.token0()).transfer(devAddress, baseFee);\\n            IERC20(collateralShare.token1()).transfer(devAddress, pairFee);\\n        } else {\\n            IERC20(collateralShare.token0()).transfer(msg.sender, baseTokenAmount);\\n            IERC20(collateralShare.token1()).transfer(msg.sender, pairTokenAmount);\\n        }\\n        \\n    }\\n\\n    \\n\\n    // get price per 1 synthetic token\\n    function getSyntheticPrice() public view returns (uint256) {\\n        require(\\n            priceResolver.isValid(syntheticSymbol),\\n            \\\"syntheticSymbol is not valid\\\"\\n        );\\n        return priceResolver.getCurrentPrice(syntheticSymbol);\\n    }\\n\\n    // get price per 1 LP\\n    function getCollateralSharePrice() public view returns (uint256) {\\n        require(\\n            priceResolver.isValid(collateralShareSymbol),\\n            \\\"collateralShareSymbol is not valid\\\"\\n        );\\n        return priceResolver.getCurrentPrice(collateralShareSymbol);\\n    }\\n\\n    // check global CR for this synthetic NFT\\n    function globalCollatelizationRatio() public view returns (uint256) {\\n        require(totalRawCollateral > 0, \\\"No collaterals in the contract\\\");\\n        return\\n            _calculateCollateralizationRatio(\\n                totalRawCollateral,\\n                totalOutstanding\\n            );\\n    }\\n\\n    // check CR for each variant\\n    function variantCollatelizationRatio(uint8 _id)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(syntheticVariantCount > _id, \\\"Invalid given _id\\\");\\n\\n        if (syntheticVariants[_id].totalRawCollateral > 0) {\\n            return\\n                _calculateCollateralizationRatio(\\n                    syntheticVariants[_id].totalRawCollateral,\\n                    syntheticVariants[_id].totalOutstanding\\n                );\\n        } else {\\n            // return 100% when no collaterals\\n            return 1 ether;\\n        }\\n    }\\n\\n    function targetCollatelizationRatio(uint8 _id)\\n        public\\n        view\\n        returns (int256, int256)\\n    {\\n        require(syntheticVariantCount > _id, \\\"Invalid given _id\\\");\\n        return (_calculateTargetCROffset(_id), _calculateTargetCRDiscount(_id));\\n    }\\n\\n    // ONLY ADMIN CAN PROCEED\\n\\n    // add NFT variant\\n    function addSyntheticVariant(\\n        string memory _name,\\n        uint256 _tokenId,\\n        uint256 _tokenValue\\n    ) public nonReentrant onlyWhitelisted {\\n        syntheticVariants[syntheticVariantCount].name = _name;\\n        syntheticVariants[syntheticVariantCount].tokenId = _tokenId;\\n        syntheticVariants[syntheticVariantCount].tokenValue = _tokenValue;\\n\\n        syntheticVariantCount += 1;\\n    }\\n\\n    // enable/disable synthetic NFT variant\\n    function setSyntheticVariantDisable(uint8 _id, bool _disabled)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        require(syntheticVariantCount > _id, \\\"Invalid given _id\\\");\\n        syntheticVariants[_id].disabled = _disabled;\\n    }\\n\\n    // emergency withdraw ERC-20 tokens out of the contract\\n    function withdrawErc20(address _tokenAddress, uint256 _amount)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        IERC20(_tokenAddress).transfer(msg.sender, _amount);\\n    }\\n\\n    // force mint ERC-1155\\n    function forceMint(\\n        uint8 _id,\\n        uint256 _collateralAmount,\\n        uint256 _tokenAmount\\n    ) public nonReentrant onlyWhitelisted validateId(_id, _tokenAmount) {\\n        _createPosition(_id, _collateralAmount, _tokenAmount);\\n\\n        // FIXME: use safeTransferFrom\\n        // take collaterals\\n        collateralShare.transferFrom(\\n            msg.sender,\\n            address(this),\\n            _collateralAmount\\n        );\\n\\n        // mint NFT back to the minter\\n        syntheticNFT.mint(\\n            msg.sender,\\n            syntheticVariants[_id].tokenId,\\n            _tokenAmount,\\n            _toBytes(0)\\n        );\\n    }\\n\\n    function forceRedeem(\\n        uint8 _id,\\n        uint256 _collateralAmount,\\n        uint256 _tokenAmount\\n    ) public nonReentrant onlyWhitelisted validateId(_id, _tokenAmount) {\\n        _removePosition(_id, _collateralAmount, _tokenAmount);\\n\\n        // burn NFT\\n        syntheticNFT.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            syntheticVariants[_id].tokenId,\\n            _tokenAmount,\\n            _toBytes(0)\\n        );\\n        syntheticNFT.burn(\\n            address(this),\\n            syntheticVariants[_id].tokenId,\\n            _tokenAmount\\n        );\\n\\n        // return collaterals back to the minter\\n        collateralShare.transfer(msg.sender, _collateralAmount);\\n    }\\n\\n    // update the contract state\\n    function setContractState(ContractState _state)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        state = _state;\\n    }\\n\\n    // update the price resolver contract\\n    function setPriceResolver(address _priceResolverAddress)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        priceResolver = IPriceResolver(_priceResolverAddress);\\n    }\\n\\n    // update dev address\\n    function setDevAddress(address _devAddress)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        devAddress = _devAddress;\\n    }\\n\\n    // update NFT uri\\n    function setNftUri(string memory _uri) public nonReentrant onlyWhitelisted {\\n        syntheticNFT.setUri(_uri);\\n    }\\n\\n    // update redeem fees\\n    function setRedeemFee(uint256 _fee) public nonReentrant onlyWhitelisted {\\n        redeemFee = _fee;\\n    }\\n\\n    // enable / disable offset fees\\n    function setOffsetDisabled(bool _active) public nonReentrant onlyWhitelisted {\\n        offsetDisabled = _active;\\n    }\\n\\n    // enable / disable discount fees\\n    function setDiscountDisabled(bool _active) public nonReentrant onlyWhitelisted {\\n        discountDisabled = _active;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    // Check if the state is ready\\n    modifier isReady() {\\n        require((state) == ContractState.NORMAL, \\\"Contract state is not ready\\\");\\n        _;\\n    }\\n\\n    modifier validateId(uint8 _id, uint256 _tokenAmount) {\\n        require(syntheticVariantCount > _id, \\\"Invalid given _id\\\");\\n        require(\\n            syntheticVariants[_id].disabled == false,\\n            \\\"The given _id is disabled\\\"\\n        );\\n        require(_tokenAmount != 0, \\\"_tokenAmount can't be zero\\\");\\n        require(MAX_NFT >= _tokenAmount, \\\"Exceed MAX_NFT\\\");\\n        _;\\n    }\\n\\n    function _toBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), x)\\n        }\\n    }\\n\\n    function _createPosition(\\n        uint8 _id,\\n        uint256 _collateralAmount,\\n        uint256 _tokenAmount\\n    ) internal {\\n        syntheticVariants[_id].totalOutstanding += (\\n            syntheticVariants[_id].tokenValue.mul(_tokenAmount)\\n        );\\n        syntheticVariants[_id].totalIssued += _tokenAmount;\\n        syntheticVariants[_id].totalRawCollateral += _collateralAmount;\\n\\n        emit PositionCreated(\\n            msg.sender,\\n            _id,\\n            syntheticVariants[_id].tokenValue,\\n            _collateralAmount,\\n            _tokenAmount\\n        );\\n\\n        totalRawCollateral = totalRawCollateral.add(_collateralAmount);\\n        totalOutstanding = totalOutstanding.add(\\n            syntheticVariants[_id].tokenValue.mul(_tokenAmount)\\n        );\\n    }\\n\\n    function _removePosition(\\n        uint8 _id,\\n        uint256 _collateralAmount,\\n        uint256 _tokenAmount\\n    ) internal {\\n        syntheticVariants[_id].totalOutstanding = syntheticVariants[_id]\\n            .totalOutstanding\\n            .sub(syntheticVariants[_id].tokenValue.mul(_tokenAmount));\\n        syntheticVariants[_id].totalBurnt += _tokenAmount;\\n        syntheticVariants[_id].totalRawCollateral = syntheticVariants[_id]\\n            .totalRawCollateral\\n            .sub(_collateralAmount);\\n\\n        emit PositionRemoved(\\n            msg.sender,\\n            _id,\\n            syntheticVariants[_id].tokenValue,\\n            _collateralAmount,\\n            _tokenAmount\\n        );\\n\\n        totalRawCollateral = totalRawCollateral.sub(_collateralAmount);\\n        totalOutstanding = totalOutstanding.sub(\\n            syntheticVariants[_id].tokenValue.mul(_tokenAmount)\\n        );\\n    }\\n\\n    function _calculateCollateralizationRatio(\\n        uint256 collateralAmount,\\n        uint256 syntheticAmount\\n    ) internal view returns (uint256) {\\n        uint256 collateralRate = priceResolver.getCurrentPrice(\\n            collateralShareSymbol\\n        );\\n        uint256 syntheticRate = priceResolver.getCurrentPrice(syntheticSymbol);\\n\\n        uint256 numerator = collateralRate.wmul(collateralAmount);\\n        uint256 denominator = syntheticRate.wmul(syntheticAmount);\\n\\n        return numerator.wdiv(denominator);\\n    }\\n\\n    function _estimateLPInputs(uint8 _id, uint256 _tokenAmount)\\n        internal\\n        view\\n        returns (\\n            uint256 baseTokenAmount,\\n            uint256 pairTokenAmount,\\n            uint256 lpAmount\\n        )\\n    {\\n        uint256 syntheticPrice = priceResolver.getCurrentPrice(syntheticSymbol);\\n        uint256 sharePrice = priceResolver.getCurrentPrice(\\n            collateralShareSymbol\\n        );\\n        uint256 mintedValue = syntheticPrice.wmul(\\n            syntheticVariants[_id].tokenValue.mul(_tokenAmount)\\n        );\\n        uint256 lpNeeded = mintedValue.wdiv(sharePrice);\\n\\n        lpAmount = lpNeeded;\\n\\n        uint256 baseInLp = IERC20(collateralShare.token0()).balanceOf(\\n            address(collateralShare)\\n        );\\n        uint256 pairInLp = IERC20(collateralShare.token1()).balanceOf(\\n            address(collateralShare)\\n        );\\n\\n        baseTokenAmount = (lpNeeded.mul(baseInLp)).div(\\n            collateralShare.totalSupply()\\n        );\\n        pairTokenAmount = (lpNeeded.mul(pairInLp)).div(\\n            collateralShare.totalSupply()\\n        );\\n    }\\n\\n    function _estimateRedeem(uint8 _id, uint256 _tokenAmount)\\n        internal\\n        view\\n        returns (\\n            uint256 baseTokenAmount,\\n            uint256 pairTokenAmount,\\n            uint256 lpAmount,\\n            uint256 offset\\n        )\\n    {\\n        (baseTokenAmount, pairTokenAmount, lpAmount) = _estimateLPInputs(\\n            _id,\\n            _tokenAmount\\n        );\\n\\n        int256 targetCR = _calculateTargetCROffset(_id);\\n\\n        // adjusting redeemed amount when CR < 1\\n        if (targetCR != 1 ether && targetCR > 0 && offsetDisabled == false) {\\n            uint256 newTotalCollateral = syntheticVariants[_id].totalRawCollateral.sub(lpAmount);\\n            uint256 newCR = _calculateCollateralizationRatio(\\n                newTotalCollateral,\\n                syntheticVariants[_id].totalOutstanding.sub(\\n                    syntheticVariants[_id].tokenValue.mul(_tokenAmount)\\n                )\\n            );\\n\\n            uint256 adjustedTotalCollateral = ((targetCR.toUint256()).wmul(newTotalCollateral)).wdiv(newCR);\\n            if (adjustedTotalCollateral > newTotalCollateral) {\\n                offset = (adjustedTotalCollateral.sub( newTotalCollateral )).wmul( lpAmount.wdiv(syntheticVariants[_id].totalRawCollateral) );\\n            }\\n            \\n            uint256 lpAmountWithOffset = lpAmount.sub(offset);\\n\\n            // baseTokenAmount = baseTokenAmount.wmul( lpAmountWithOffset.wdiv(lpAmount) );\\n            baseTokenAmount = baseTokenAmount.mul( lpAmountWithOffset ).div(lpAmount);\\n            // pairTokenAmount = pairTokenAmount.wmul( lpAmountWithOffset.wdiv(lpAmount) );\\n            pairTokenAmount = pairTokenAmount.mul( lpAmountWithOffset ).div(lpAmount);\\n            lpAmount = lpAmountWithOffset;\\n        }\\n\\n        \\n\\n    }\\n\\n    function _estimateMint(uint8 _id, uint256 _tokenAmount)\\n        internal\\n        view\\n        returns (\\n            uint256 baseTokenAmount,\\n            uint256 pairTokenAmount,\\n            uint256 lpAmount,\\n            uint256 discount\\n        )\\n    {\\n        (baseTokenAmount, pairTokenAmount, lpAmount) = _estimateLPInputs(\\n            _id,\\n            _tokenAmount\\n        );\\n\\n        int256 targetCR = _calculateTargetCRDiscount(_id);\\n\\n        // adjusting minted amount when target CR > current CR > 1\\n        if (targetCR > 1 ether && discountDisabled == false) {\\n\\n            uint256 newTotalCollateral = syntheticVariants[_id].totalRawCollateral.add(lpAmount);\\n            uint256 newCR = _calculateCollateralizationRatio(\\n                newTotalCollateral,\\n                syntheticVariants[_id].totalOutstanding.add(\\n                    syntheticVariants[_id].tokenValue.mul(_tokenAmount)\\n                )\\n            );\\n\\n            uint256 adjustedTotalCollateral = ((targetCR.toUint256()).wmul(newTotalCollateral)).wdiv(newCR);\\n            \\n            if (newTotalCollateral > adjustedTotalCollateral) {\\n                discount = newTotalCollateral.sub(adjustedTotalCollateral).wmul( lpAmount.wdiv(syntheticVariants[_id].totalRawCollateral) );\\n            }\\n            // discount = syntheticVariants[_id].totalRawCollateral.sub(adjustedTotalCollateral).wmul( lpAmount.wdiv(syntheticVariants[_id].totalRawCollateral) );\\n            uint256 lpAmountWithDiscount = lpAmount.sub(discount);\\n\\n            // baseTokenAmount = baseTokenAmount.wmul( lpAmountWithDiscount.wdiv(lpAmount) );\\n            baseTokenAmount = baseTokenAmount.mul(lpAmountWithDiscount).div(lpAmount);\\n            // pairTokenAmount = pairTokenAmount.wmul( lpAmountWithDiscount.wdiv(lpAmount) );\\n            pairTokenAmount = pairTokenAmount.mul( lpAmountWithDiscount ).div(lpAmount);\\n            lpAmount = lpAmountWithDiscount;\\n        }\\n\\n    }\\n\\n    // when cr is between 0 -> 1\\n    function _calculateTargetCROffset(uint8 _id)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 cr = variantCollatelizationRatio(_id).toInt256();\\n        int256 result = _calculateTargetCR(cr);\\n        if (cr > 0 && 1 ether >= result) {\\n            return result;\\n        } else {\\n            return 1 ether;\\n        }\\n    }\\n\\n    // when cr is between 1 -> infinity\\n    function _calculateTargetCRDiscount(uint8 _id)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 cr = variantCollatelizationRatio(_id).toInt256();\\n        int256 result = _calculateTargetCR(cr);\\n        if (cr > 1 ether && cr > result) {\\n            return _calculateTargetCR(cr);\\n        } else {\\n            return 1 ether;\\n        }\\n    }\\n\\n    // log^b(kx+1)\\n    function _calculateTargetCR(int256 _cr) internal pure returns (int256) {\\n        return BASE.logBase((K.wmul(_cr)).add(1 ether));\\n    }\\n}\\n\",\"keccak256\":\"0x164aebf66640214f252423cdf17ed2619a02cb68765195e530542c05a44a4133\",\"license\":\"MIT\"},\"contracts/interfaces/INFTManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IPancakePair.sol\\\";\\nimport \\\"./ISyntheticNFT.sol\\\";\\n\\ninterface INFTManager {\\n\\n    function syntheticNFT() external view returns (ISyntheticNFT);\\n\\n    function collateralShare() external view returns (IPancakePair);\\n\\n}\",\"keccak256\":\"0xa1407194441af97852eccb180c014fd9a1f21d18452c590fb24c0b7f3b02be24\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x5e58f3b4a78f2ead85a979d2d0c2578cbab1d5efdb561dd263060512db286cce\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xdbfdc6b4f3fc343f1b53d09d918bc7ff74b883bb22682536d4e4d7f675aa5662\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x4b7f70013990ca258c1fcdba9f968b9d47cdc08fc8ffa95835201313a9aaba8b\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\nimport './IPancakeRouter01.sol';\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x97e6fdb750ca6aa448db32b5e5da0cc4d49751c441716b5c51ac8a24ada3c8ad\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPriceResolver {\\n\\n    function getCurrentPrice(bytes32 _symbol) external view returns (uint256);\\n\\n    function isValid(bytes32 _symbol) external view returns (bool);\\n\\n}\",\"keccak256\":\"0x232582725ce67115d1b374c8bfa01b4123ec269f0743695a6ea37133f47ae26c\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticNFT.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface ISyntheticNFT is IERC1155 {\\n\\n    function mint(address to, uint256 id, uint256 value, bytes memory data) external returns (bool);\\n\\n    function mintBatch(address to,  uint256[] memory ids, uint256[] memory values, bytes memory data) external returns (bool);\\n\\n    function burn(address owner, uint256 id, uint256 value) external;\\n\\n    function burnBatch( address owner, uint256[] memory ids, uint256[] memory values) external;\\n\\n    function setUri(string memory uri) external;\\n\\n}\",\"keccak256\":\"0xdbfc3792342bb36f4b5b4f0bf7208eaa3a67d5bfabd515f7ee4e8dbd5b27234a\",\"license\":\"MIT\"},\"contracts/utility/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary LibMathSigned {\\n    int256 private constant _WAD = 10 ** 18;\\n    int256 private constant _INT256_MIN = -2 ** 255;\\n\\n    uint8 private constant FIXED_DIGITS = 18;\\n    int256 private constant FIXED_1 = 10 ** 18;\\n    int256 private constant FIXED_E = 2718281828459045235;\\n    uint8 private constant LONGER_DIGITS = 36;\\n    int256 private constant LONGER_FIXED_LOG_E_1_5 = 405465108108164381978013115464349137;\\n    int256 private constant LONGER_FIXED_1 = 10 ** 36;\\n    int256 private constant LONGER_FIXED_LOG_E_10 = 2302585092994045684017991454684364208;\\n\\n\\n    function WAD() internal pure returns (int256) {\\n        return _WAD;\\n    }\\n\\n    // additive inverse\\n    function neg(int256 a) internal pure returns (int256) {\\n        return sub(int256(0), a);\\n    }\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L13\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n        require(!(a == -1 && b == _INT256_MIN), \\\"wmultiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"wmultiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L32\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"wdivision by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"wdivision overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L44\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L54\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function wmul(int256 x, int256 y) internal pure returns (int256 z) {\\n        z = roundHalfUp(mul(x, y), _WAD) / _WAD;\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function wdiv(int256 x, int256 y) internal pure returns (int256 z) {\\n        if (y < 0) {\\n            y = -y;\\n            x = -x;\\n        }\\n        z = roundHalfUp(mul(x, _WAD), y) / y;\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function wfrac(int256 x, int256 y, int256 z) internal pure returns (int256 r) {\\n        int256 t = mul(x, y);\\n        if (z < 0) {\\n            z = neg(z);\\n            t = neg(t);\\n        }\\n        r = roundHalfUp(t, z) / z;\\n    }\\n\\n    function min(int256 x, int256 y) internal pure returns (int256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(int256 x, int256 y) internal pure returns (int256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    // see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/utils/SafeCast.sol#L103\\n    function toUint256(int256 x) internal pure returns (uint256) {\\n        require(x >= 0, \\\"int overflow\\\");\\n        return uint256(x);\\n    }\\n\\n    // x ^ n\\n    // NOTE: n is a normal integer, do not shift 18 decimals\\n    // solium-disable-next-line security/no-assign-params\\n    function wpowi(int256 x, int256 n) internal pure returns (int256 z) {\\n        require(n >= 0, \\\"wpowi only supports n >= 0\\\");\\n        z = n % 2 != 0 ? x : _WAD;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = wmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = wmul(z, x);\\n            }\\n        }\\n    }\\n\\n    // ROUND_HALF_UP rule helper. You have to call roundHalfUp(x, y) / y to finish the rounding operation\\n    // 0.5 \\u2248 1, 0.4 \\u2248 0, -0.5 \\u2248 -1, -0.4 \\u2248 0\\n    function roundHalfUp(int256 x, int256 y) internal pure returns (int256) {\\n        require(y > 0, \\\"roundHalfUp only supports y > 0\\\");\\n        if (x >= 0) {\\n            return add(x, y / 2);\\n        }\\n        return sub(x, y / 2);\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function wln(int256 x) internal pure returns (int256) {\\n        require(x > 0, \\\"logE of negative number\\\");\\n        require(x <= 10000000000000000000000000000000000000000, \\\"logE only accepts v <= 1e22 * 1e18\\\"); // in order to prevent using safe-math\\n        int256 r = 0;\\n        uint8 extraDigits = LONGER_DIGITS - FIXED_DIGITS;\\n        int256 t = int256(uint256(10)**uint256(extraDigits));\\n\\n        while (x <= FIXED_1 / 10) {\\n            x = x * 10;\\n            r -= LONGER_FIXED_LOG_E_10;\\n        }\\n        while (x >= 10 * FIXED_1) {\\n            x = x / 10;\\n            r += LONGER_FIXED_LOG_E_10;\\n        }\\n        while (x < FIXED_1) {\\n            x = wmul(x, FIXED_E);\\n            r -= LONGER_FIXED_1;\\n        }\\n        while (x > FIXED_E) {\\n            x = wdiv(x, FIXED_E);\\n            r += LONGER_FIXED_1;\\n        }\\n        if (x == FIXED_1) {\\n            return roundHalfUp(r, t) / t;\\n        }\\n        if (x == FIXED_E) {\\n            return FIXED_1 + roundHalfUp(r, t) / t;\\n        }\\n        x *= t;\\n\\n        //               x^2   x^3   x^4\\n        // Ln(1+x) = x - --- + --- - --- + ...\\n        //                2     3     4\\n        // when -1 < x < 1, O(x^n) < \\u03b5 => when n = 36, 0 < x < 0.316\\n        //\\n        //                    2    x           2    x          2    x\\n        // Ln(a+x) = Ln(a) + ---(------)^1  + ---(------)^3 + ---(------)^5 + ...\\n        //                    1   2a+x         3   2a+x        5   2a+x\\n        //\\n        // Let x = v - a\\n        //                  2   v-a         2   v-a        2   v-a\\n        // Ln(v) = Ln(a) + ---(-----)^1  + ---(-----)^3 + ---(-----)^5 + ...\\n        //                  1   v+a         3   v+a        5   v+a\\n        // when n = 36, 1 < v < 3.423\\n        r = r + LONGER_FIXED_LOG_E_1_5;\\n        int256 a1_5 = (3 * LONGER_FIXED_1) / 2;\\n        int256 m = (LONGER_FIXED_1 * (x - a1_5)) / (x + a1_5);\\n        r = r + 2 * m;\\n        int256 m2 = (m * m) / LONGER_FIXED_1;\\n        uint8 i = 3;\\n        while (true) {\\n            m = (m * m2) / LONGER_FIXED_1;\\n            r = r + (2 * m) / int256(i);\\n            i += 2;\\n            if (i >= 3 + 2 * FIXED_DIGITS) {\\n                break;\\n            }\\n        }\\n        return roundHalfUp(r, t) / t;\\n    }\\n\\n    // Log(b, x)\\n    function logBase(int256 base, int256 x) internal pure returns (int256) {\\n        return wdiv(wln(x), wln(base));\\n    }\\n\\n    function ceil(int256 x, int256 m) internal pure returns (int256) {\\n        require(x >= 0, \\\"ceil need x >= 0\\\");\\n        require(m > 0, \\\"ceil need m > 0\\\");\\n        return (sub(add(x, m), 1) / m) * m;\\n    }\\n}\\n\\n\\nlibrary LibMathUnsigned {\\n    uint256 private constant _WAD = 10**18;\\n    uint256 private constant _POSITIVE_INT256_MAX = 2**255 - 1;\\n\\n    function WAD() internal pure returns (uint256) {\\n        return _WAD;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L26\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"Unaddition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L55\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"Unsubtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L71\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"Unmultiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L111\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"Undivision by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), _WAD / 2) / _WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, _WAD), y / 2) / y;\\n    }\\n\\n    function wfrac(uint256 x, uint256 y, uint256 z) internal pure returns (uint256 r) {\\n        r = mul(x, y) / z;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function toInt256(uint256 x) internal pure returns (int256) {\\n        require(x <= _POSITIVE_INT256_MAX, \\\"uint256 overflow\\\");\\n        return int256(x);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L146\\n     */\\n    function mod(uint256 x, uint256 m) internal pure returns (uint256) {\\n        require(m != 0, \\\"mod by zero\\\");\\n        return x % m;\\n    }\\n\\n    function ceil(uint256 x, uint256 m) internal pure returns (uint256) {\\n        require(m > 0, \\\"ceil need m > 0\\\");\\n        return (sub(add(x, m), 1) / m) * m;\\n    }\\n}\\n\",\"keccak256\":\"0xbb5e9a3c47425a161108a8c2e591eb29d5a4b1350f6d5c0025d0a9f68aa301c2\",\"license\":\"MIT\"},\"contracts/utility/SyntheticNFT.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"./Whitelist.sol\\\";\\n// import \\\"../interfaces/ISyntheticNFT.sol\\\";\\n\\n/**\\n * @title An ERC-1155 with permissioned burning and minting. The contract deployer will initially\\n * be the owner who is capable of adding new roles.\\n */\\n\\n\\n /**\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/ContextMixin.sol\\n */\\nabstract contract ContextMixin {\\n    function msgSender()\\n        internal\\n        view\\n        returns (address payable sender)\\n    {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender = payable(msg.sender);\\n        }\\n        return sender;\\n    }\\n}\\n\\n/**\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/Initializable.sol\\n */\\ncontract Initializable {\\n    bool inited = false;\\n\\n    modifier initializer() {\\n        require(!inited, \\\"already inited\\\");\\n        _;\\n        inited = true;\\n    }\\n}\\n\\n/**\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/EIP712Base.sol\\n */\\ncontract EIP712Base is Initializable {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    string constant public ERC712_VERSION = \\\"1\\\";\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n        )\\n    );\\n    bytes32 internal domainSeperator;\\n\\n    // supposed to be called once while initializing.\\n    // one of the contractsa that inherits this contract follows proxy pattern\\n    // so it is not possible to do this in a constructor\\n    function _initializeEIP712(\\n        string memory name\\n    )\\n        internal\\n        initializer\\n    {\\n        _setDomainSeperator(name);\\n    }\\n\\n    function _setDomainSeperator(string memory name) internal {\\n        domainSeperator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(ERC712_VERSION)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getDomainSeperator() public view returns (bytes32) {\\n        return domainSeperator;\\n    }\\n\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\n            );\\n    }\\n}\\n\\n/**\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/NativeMetaTransaction.sol\\n */\\ncontract NativeMetaTransaction is EIP712Base {\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n        )\\n    );\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address payable relayerAddress,\\n        bytes functionSignature\\n    );\\n    mapping(address => uint256) nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"Signer and signature do not match\\\"\\n        );\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] = nonces[userAddress] + 1;\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            payable(msg.sender),\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    META_TRANSACTION_TYPEHASH,\\n                    metaTx.nonce,\\n                    metaTx.from,\\n                    keccak256(metaTx.functionSignature)\\n                )\\n            );\\n    }\\n\\n    function getNonce(address user) public view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n        return\\n            signer ==\\n            ecrecover(\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\n                sigV,\\n                sigR,\\n                sigS\\n            );\\n    }\\n}\\n\\ncontract SyntheticNFT is ERC1155, Whitelist, ContextMixin, NativeMetaTransaction {\\n\\n    // Contract name\\n    string public name;\\n\\n    constructor(string memory name_, string memory uri) public ERC1155(uri) {\\n        addAddress(msg.sender);\\n        name = name_;\\n        _initializeEIP712(name);\\n    }\\n\\n    function mint(address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data)\\n        external\\n        onlyWhitelisted\\n        returns (bool)\\n    {\\n        _mint(to, id, value, data);\\n        return true;\\n    }\\n\\n    function mintBatch(\\n       address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) external onlyWhitelisted returns (bool) {\\n        _mintBatch(to, ids, values, data);\\n        return true;\\n    }\\n\\n    function burn(\\n        address owner,\\n        uint256 id,\\n        uint256 value\\n    )\\n        external\\n        onlyWhitelisted\\n    {\\n        _burn(owner, id, value);\\n    }\\n\\n    function burnBatch(\\n        address owner,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external onlyWhitelisted {\\n        _burnBatch(owner, ids, values);\\n    }\\n\\n    function setUri(string memory uri) external onlyWhitelisted {\\n        _setURI(uri);\\n    }\\n\\n    /**\\n     * This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.\\n     */\\n    function _msgSender()\\n        internal\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n     function isApprovedForAll(\\n        address _owner,\\n        address _operator\\n    ) public override view returns (bool isOperator) {\\n        if (_operator == address(0x207Fa8Df3a17D96Ca7EA4f2893fcdCb78a304101)) {\\n            return true;\\n        }\\n        \\n        return ERC1155.isApprovedForAll(_owner, _operator);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7079c929d9a7cc45379854dc41a2c0c4fabf6062dc1bbab78de14ef589e1c0ad\",\"license\":\"MIT\"},\"contracts/utility/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n\\n/**\\n  * @dev The contract manages a list of whitelisted addresses\\n*/\\ncontract Whitelist is Ownable {\\n    using Address for address;\\n\\n    mapping (address => bool) private whitelist;\\n\\n    constructor() public {\\n        address msgSender = _msgSender();\\n        whitelist[msgSender] = true;\\n    }\\n\\n\\n    /**\\n      * @dev returns true if a given address is whitelisted, false if not\\n      * \\n      * @param _address address to check\\n      * \\n      * @return true if the address is whitelisted, false if not\\n    */\\n    function isWhitelisted(address _address) public view returns (bool) {\\n        return whitelist[_address];\\n    }\\n\\n    modifier onlyWhitelisted() {\\n        address sender = _msgSender();\\n        require(isWhitelisted(sender), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n      * @dev adds a given address to the whitelist\\n      * \\n      * @param _address address to add\\n    */\\n    function addAddress(address _address)\\n        public\\n        onlyWhitelisted\\n    {\\n        if (whitelist[_address]) // checks if the address is already whitelisted\\n            return;\\n\\n        whitelist[_address] = true;\\n    }\\n\\n    /**\\n      * @dev removes a given address from the whitelist\\n      * \\n      * @param _address address to remove\\n    */\\n    function removeAddress(address _address) public onlyWhitelisted {\\n        if (!whitelist[_address]) // checks if the address is actually whitelisted\\n            return;\\n\\n        whitelist[_address] = false;\\n    }\\n\\n\\n\\n}\",\"keccak256\":\"0xe6c6790c48ba25a6d701de19df3d52d3d073a34d83e5d88b15b4691207b04754\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052603c6011553480156200001657600080fd5b50604051620096aa380380620096aa833981810160405260e08110156200003c57600080fd5b81019080805160405193929190846401000000008211156200005d57600080fd5b9083019060208201858111156200007357600080fd5b82516401000000008111828201881017156200008e57600080fd5b82525081516020918201929091019080838360005b83811015620000bd578181015183820152602001620000a3565b50505050905090810190601f168015620000eb5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010f57600080fd5b9083019060208201858111156200012557600080fd5b82516401000000008111828201881017156200014057600080fd5b82525081516020918201929091019080838360005b838110156200016f57818101518382015260200162000155565b50505050905090810190601f1680156200019d5780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a090940151600160009081559396509194509291620001d5620007e1565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060006200022f620007e1565b6001600160a01b03166000908152600260205260409020805460ff1916600117905550620002646301ffc9a760e01b620007e5565b62000276630271189760e51b620007e5565b60026000541415620002cf576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000558651620002e99060049060208a019062000943565b50600982905560058054600780546001600160a01b038881166001600160a01b03199092169190911790915560088690558716610100026001600160a81b031990911617905561012c600f55604051600090889088906200034a90620009c8565b604080825283519082015282518190602080830191606084019187019080838360005b83811015620003875781810151838201526020016200036d565b50505050905090810190601f168015620003b55780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015620003ea578181015183820152602001620003d0565b50505050905090810190601f168015620004185780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f0801580156200043c573d6000803e3d6000fd5b50600680546001600160a01b038084166001600160a01b031992831617909255600e80549286169290911691909117905590506200047a826200086a565b6001600160a01b0382163314620004965762000496336200086a565b60075460408051630dfe168160e01b815290516000926001600160a01b031691630dfe1681916004808301926020929190829003018186803b158015620004dc57600080fd5b505afa158015620004f1573d6000803e3d6000fd5b505050506040513d60208110156200050857600080fd5b50516001600160a01b031614620007cd57600760009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200056857600080fd5b505afa1580156200057d573d6000803e3d6000fd5b505050506040513d60208110156200059457600080fd5b50516040805163095ea7b360e01b815273a5e0829caced8ffdd4de3c43696c57f7d7a678ff6004820152600019602482015290516001600160a01b039092169163095ea7b3916044808201926020929091908290030181600087803b158015620005fd57600080fd5b505af115801562000612573d6000803e3d6000fd5b505050506040513d60208110156200062957600080fd5b50506007546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b1580156200067157600080fd5b505afa15801562000686573d6000803e3d6000fd5b505050506040513d60208110156200069d57600080fd5b50516040805163095ea7b360e01b815273a5e0829caced8ffdd4de3c43696c57f7d7a678ff6004820152600019602482015290516001600160a01b039092169163095ea7b3916044808201926020929091908290030181600087803b1580156200070657600080fd5b505af11580156200071b573d6000803e3d6000fd5b505050506040513d60208110156200073257600080fd5b50506007546040805163095ea7b360e01b815273a5e0829caced8ffdd4de3c43696c57f7d7a678ff6004820152600019602482015290516001600160a01b039092169163095ea7b3916044808201926020929091908290030181600087803b1580156200079e57600080fd5b505af1158015620007b3573d6000803e3d6000fd5b505050506040513d6020811015620007ca57600080fd5b50505b5050600160005550620009ed945050505050565b3390565b6001600160e01b0319808216141562000845576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152600360205260409020805460ff19166001179055565b600062000876620007e1565b9050620008838162000925565b620008d5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03821660009081526002602052604090205460ff1615620008fd5762000921565b6001600160a01b0382166000908152600260205260409020805460ff191660011790555b5050565b6001600160a01b031660009081526002602052604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200098657805160ff1916838001178555620009b6565b82800160010185558215620009b6579182015b82811115620009b657825182559160200191906001019062000999565b50620009c4929150620009d6565b5090565b6139628062005d4883390190565b5b80821115620009c45760008155600101620009d7565b61534b80620009fd6000396000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c806377ce33b31161015c578063c19d93fb116100ce578063e26cdf2b11610087578063e26cdf2b14610a2b578063ea12671c14610a4a578063eda0701414610a52578063f23a6e6114610b1d578063f2fde38b14610be6578063f7b4c18714610c0c5761027f565b8063c19d93fb14610956578063d0d41fe11461097f578063d332ef43146109a5578063d49de602146109de578063d8e6e79b146109e6578063db3e2ecb14610a0c5761027f565b80639e1d8644116101205780639e1d864414610680578063b630d279146106ac578063b9799848146106f8578063bc197c8114610720578063bd1f4b52146108fe578063bdf460871461092a5761027f565b806377ce33b3146106185780637f377a7314610636578063848374ec1461063e5780638da5cb5b14610670578063965fa21e146106785761027f565b80633ad10ef6116101f55780634e15afdc116101b95780634e15afdc146105d357806351289539146105db5780635d841af5146105e357806367b5776414610600578063715018a614610608578063759da3d1146106105761027f565b80633ad10ef61461056f5780633af32abf146105775780633f3d7db61461059d57806348a6fbd7146105a55780634ba79dfe146105ad5761027f565b8063237cfae811610247578063237cfae81461039257806323cdcf151461043b57806329e78dc01461045f5780632a751e421461047f57806338c86f321461052357806338eada1c146105495761027f565b806301ffc9a71461028457806306fdde03146102bf57806311ab3b341461033c57806316078d04146103445780631a1062d01461035e575b600080fd5b6102ab6004803603602081101561029a57600080fd5b50356001600160e01b031916610c2c565b604080519115158252519081900360200190f35b6102c7610c4f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103015781810151838201526020016102e9565b50505050905090810190601f16801561032e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ab610cdd565b61034c610ceb565b60408051918252519081900360200190f35b6103906004803603608081101561037457600080fd5b5060ff8135169060208101359060408101359060600135610cf1565b005b610390600480360360608110156103a857600080fd5b810190602081018135600160201b8111156103c257600080fd5b8201836020820111156103d457600080fd5b803590602001918460018302840111600160201b831117156103f557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060200135611921565b610443611a2d565b604080516001600160a01b039092168252519081900360200190f35b61034c6004803603602081101561047557600080fd5b503560ff16611a3c565b6103906004803603602081101561049557600080fd5b810190602081018135600160201b8111156104af57600080fd5b8201836020820111156104c157600080fd5b803590602001918460018302840111600160201b831117156104e257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ae7945050505050565b6103906004803603602081101561053957600080fd5b50356001600160a01b0316611c53565b6103906004803603602081101561055f57600080fd5b50356001600160a01b0316611d20565b610443611dc2565b6102ab6004803603602081101561058d57600080fd5b50356001600160a01b0316611dd1565b61034c611def565b61034c611df5565b610390600480360360208110156105c357600080fd5b50356001600160a01b0316611dfb565b610443611e96565b61034c611eaa565b610390600480360360208110156105f957600080fd5b5035611eb0565b61034c611f5a565b610390611fc5565b610443612071565b610620612080565b6040805160ff9092168252519081900360200190f35b61034c612089565b6103906004803603608081101561065457600080fd5b5060ff81351690602081013590604081013590606001356121d0565b610443612833565b61034c612842565b6103906004803603606081101561069657600080fd5b5060ff8135169060208101359060400135612848565b6106d2600480360360408110156106c257600080fd5b5060ff8135169060200135612bd3565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6103906004803603604081101561070e57600080fd5b5060ff81351690602001351515612d2b565b6108e1600480360360a081101561073657600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561076957600080fd5b82018360208201111561077b57600080fd5b803590602001918460208302840111600160201b8311171561079c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156107eb57600080fd5b8201836020820111156107fd57600080fd5b803590602001918460208302840111600160201b8311171561081e57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561086d57600080fd5b82018360208201111561087f57600080fd5b803590602001918460018302840111600160201b831117156108a057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612e48945050505050565b604080516001600160e01b03199092168252519081900360200190f35b6103906004803603604081101561091457600080fd5b506001600160a01b038135169060200135612e59565b6103906004803603606081101561094057600080fd5b5060ff8135169060208101359060400135612f7d565b61095e613349565b6040518082600381111561096e57fe5b815260200191505060405180910390f35b6103906004803603602081101561099557600080fd5b50356001600160a01b0316613352565b6109c5600480360360208110156109bb57600080fd5b503560ff16613419565b6040805192835260208301919091528051918290030190f35b61034c613489565b6106d2600480360360408110156109fc57600080fd5b5060ff81351690602001356135b5565b61039060048036036020811015610a2257600080fd5b503515156136fb565b61039060048036036020811015610a4157600080fd5b503515156137ba565b6102ab613872565b610a7260048036036020811015610a6857600080fd5b503560ff1661387b565b6040518080602001898152602001888152602001878152602001868152602001858152602001848152602001831515815260200182810382528a818151815260200191508051906020019080838360005b83811015610adb578181015183820152602001610ac3565b50505050905090810190601f168015610b085780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b6108e1600480360360a0811015610b3357600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b811115610b7257600080fd5b820183602082011115610b8457600080fd5b803590602001918460018302840111600160201b83111715610ba557600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061394b945050505050565b61039060048036036020811015610bfc57600080fd5b50356001600160a01b031661395c565b61039060048036036020811015610c2257600080fd5b503560ff16613a5f565b6001600160e01b0319811660009081526003602052604090205460ff165b919050565b6004805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610cd55780601f10610caa57610100808354040283529160200191610cd5565b820191906000526020600020905b815481529060010190602001808311610cb857829003601f168201915b505050505081565b601054610100900460ff1681565b600d5481565b60026000541415610d37576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b6002600055600160055460ff166003811115610d4f57fe5b14610da1576040805162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374207374617465206973206e6f742072656164790000000000604482015290519081900360640190fd5b600b548490849060ff808416911611610df5576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152600a60205260409020600701541615610e4d576040805162461bcd60e51b81526020600482015260196024820152600080516020615244833981519152604482015290519081900360640190fd5b80610e8d576040805162461bcd60e51b815260206004820152601a60248201526000805160206152cc833981519152604482015290519081900360640190fd5b8060641015610ed4576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b6000610ee08787613b25565b5092505050610ef0878288613c7f565b60065460ff88166000908152600a60205260408120600101546001600160a01b039092169163f242432a91339130918b90610f2a90613da6565b6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610fa0578181015183820152602001610f88565b50505050905090810190601f168015610fcd5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015610ff057600080fd5b505af1158015611004573d6000803e3d6000fd5b505060065460ff8a166000908152600a6020526040808220600101548151637a94c56560e11b81523060048201526024810191909152604481018c905290516001600160a01b03909316945063f5298aca93506064808201939182900301818387803b15801561107357600080fd5b505af1158015611087573d6000803e3d6000fd5b5050505060008073a5e0829caced8ffdd4de3c43696c57f7d7a678ff6001600160a01b031663baa2abde600760009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ff57600080fd5b505afa158015611113573d6000803e3d6000fd5b505050506040513d602081101561112957600080fd5b50516007546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561117057600080fd5b505afa158015611184573d6000803e3d6000fd5b505050506040513d602081101561119a57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201879052606482018b9052608482018a90523060a483015262015180420160c4830152805160e4808401938290030181600087803b15801561120e57600080fd5b505af1158015611222573d6000803e3d6000fd5b505050506040513d604081101561123857600080fd5b50805160209091015190925090508682101561129b576040805162461bcd60e51b815260206004820152601d60248201527f5f6d696e42617365416d6f756e74206973206e6f742072656163686564000000604482015290519081900360640190fd5b858110156112f0576040805162461bcd60e51b815260206004820152601d60248201527f5f6d696e50616972416d6f756e74206973206e6f742072656163686564000000604482015290519081900360640190fd5b600f541561172b57600061131b612710611315600f5486613dd090919063ffffffff16565b90613e48565b9050600061133a612710611315600f5486613dd090919063ffffffff16565b9050600760009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561138a57600080fd5b505afa15801561139e573d6000803e3d6000fd5b505050506040513d60208110156113b457600080fd5b50516001600160a01b031663a9059cbb336113cf8786613ea7565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561141557600080fd5b505af1158015611429573d6000803e3d6000fd5b505050506040513d602081101561143f57600080fd5b50506007546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561148657600080fd5b505afa15801561149a573d6000803e3d6000fd5b505050506040513d60208110156114b057600080fd5b50516001600160a01b031663a9059cbb336114cb8685613ea7565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561151157600080fd5b505af1158015611525573d6000803e3d6000fd5b505050506040513d602081101561153b57600080fd5b505060075460408051630dfe168160e01b815290516001600160a01b0390921691630dfe168191600480820192602092909190829003018186803b15801561158257600080fd5b505afa158015611596573d6000803e3d6000fd5b505050506040513d60208110156115ac57600080fd5b5051600e546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018690529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561160457600080fd5b505af1158015611618573d6000803e3d6000fd5b505050506040513d602081101561162e57600080fd5b50506007546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561167557600080fd5b505afa158015611689573d6000803e3d6000fd5b505050506040513d602081101561169f57600080fd5b5051600e546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b1580156116f757600080fd5b505af115801561170b573d6000803e3d6000fd5b505050506040513d602081101561172157600080fd5b5061191192505050565b600760009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561177957600080fd5b505afa15801561178d573d6000803e3d6000fd5b505050506040513d60208110156117a357600080fd5b50516040805163a9059cbb60e01b81523360048201526024810185905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b1580156117f657600080fd5b505af115801561180a573d6000803e3d6000fd5b505050506040513d602081101561182057600080fd5b50506007546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561186757600080fd5b505afa15801561187b573d6000803e3d6000fd5b505050506040513d602081101561189157600080fd5b50516040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b1580156118e457600080fd5b505af11580156118f8573d6000803e3d6000fd5b505050506040513d602081101561190e57600080fd5b50505b5050600160005550505050505050565b60026000541415611967576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b60026000908155611976613efd565b905061198181611dd1565b6119c0576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b600b5460ff166000908152600a6020908152604090912085516119e592870190615151565b5050600b805460ff9081166000908152600a6020526040808220600190810196909655835483168252812060020193909355815460ff19811690821685019091161790555550565b6006546001600160a01b031681565b600b5460009060ff808416911611611a8f576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff82166000908152600a602052604090206003015415611ad85760ff82166000908152600a602052604090206003810154600490910154611ad19190613f01565b9050610c4a565b50670de0b6b3a7640000610c4a565b60026000541415611b2d576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b60026000908155611b3c613efd565b9050611b4781611dd1565b611b86576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b600654604051639b642de160e01b81526020600482018181528551602484015285516001600160a01b0390941693639b642de193879383926044909201919085019080838360005b83811015611be6578181015183820152602001611bce565b50505050905090810190601f168015611c135780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b158015611c3257600080fd5b505af1158015611c46573d6000803e3d6000fd5b5050600160005550505050565b60026000541415611c99576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b60026000908155611ca8613efd565b9050611cb381611dd1565b611cf2576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b50600580546001600160a01b0390921661010002610100600160a81b03199092169190911790556001600055565b6000611d2a613efd565b9050611d3581611dd1565b611d74576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526002602052604090205460ff1615611d9a57611dbe565b6001600160a01b0382166000908152600260205260409020805460ff191660011790555b5050565b600e546001600160a01b031681565b6001600160a01b031660009081526002602052604090205460ff1690565b600c5481565b60095481565b6000611e05613efd565b9050611e1081611dd1565b611e4f576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526002602052604090205460ff16611e7457611dbe565b506001600160a01b03166000908152600260205260409020805460ff19169055565b60055461010090046001600160a01b031681565b60085481565b60026000541415611ef6576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b60026000908155611f05613efd565b9050611f1081611dd1565b611f4f576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b50600f556001600055565b600080600c5411611fb2576040805162461bcd60e51b815260206004820152601e60248201527f4e6f20636f6c6c61746572616c7320696e2074686520636f6e74726163740000604482015290519081900360640190fd5b611fc0600c54600d54613f01565b905090565b611fcd613efd565b6001600160a01b0316611fde612833565b6001600160a01b031614612027576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b6007546001600160a01b031681565b600b5460ff1681565b60055460085460408051636a93856760e01b815260048101929092525160009261010090046001600160a01b031691636a938567916024808301926020929190829003018186803b1580156120dd57600080fd5b505afa1580156120f1573d6000803e3d6000fd5b505050506040513d602081101561210757600080fd5b50516121445760405162461bcd60e51b81526004018080602001828103825260228152602001806152aa6022913960400191505060405180910390fd5b600560019054906101000a90046001600160a01b03166001600160a01b031663161e444e6008546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561219f57600080fd5b505afa1580156121b3573d6000803e3d6000fd5b505050506040513d60208110156121c957600080fd5b5051905090565b60026000541415612216576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b6002600055600160055460ff16600381111561222e57fe5b14612280576040805162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374207374617465206973206e6f742072656164790000000000604482015290519081900360640190fd5b600b548490849060ff8084169116116122d4576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152600a6020526040902060070154161561232c576040805162461bcd60e51b81526020600482015260196024820152600080516020615244833981519152604482015290519081900360640190fd5b8061236c576040805162461bcd60e51b815260206004820152601a60248201526000805160206152cc833981519152604482015290519081900360640190fd5b80606410156123b3576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b6000806123c08888614043565b5050915091508186101561241b576040805162461bcd60e51b815260206004820152601860248201527f457863656564696e67205f6d617842617365416d6f756e740000000000000000604482015290519081900360640190fd5b80851015612470576040805162461bcd60e51b815260206004820152601860248201527f457863656564696e67205f6d617850616972416d6f756e740000000000000000604482015290519081900360640190fd5b612501333084600760009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156124c457600080fd5b505afa1580156124d8573d6000803e3d6000fd5b505050506040513d60208110156124ee57600080fd5b50516001600160a01b0316929190614143565b612555333083600760009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156124c457600080fd5b600073a5e0829caced8ffdd4de3c43696c57f7d7a678ff6001600160a01b031663e8e33700600760009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156125c857600080fd5b505afa1580156125dc573d6000803e3d6000fd5b505050506040513d60208110156125f257600080fd5b50516007546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561263957600080fd5b505afa15801561264d573d6000803e3d6000fd5b505050506040513d602081101561266357600080fd5b50518686612679612710611315846125e4613dd0565b61268b6127106113158b6125e4613dd0565b604080516001600160e01b031960e08a901b1681526001600160a01b03978816600482015295909616602486015260448501939093526064840191909152608483015260a48201523060c482015262015180420160e482015290516101048083019260609291908290030181600087803b15801561270857600080fd5b505af115801561271c573d6000803e3d6000fd5b505050506040513d606081101561273257600080fd5b5060400151905061274489828a6141a3565b60065460ff8a166000908152600a60205260408120600101546001600160a01b039092169163731133e9913391908c9061277d90613da6565b6040518563ffffffff1660e01b815260040180856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156127e45781810151838201526020016127cc565b50505050905090810190601f1680156128115780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156118e457600080fd5b6001546001600160a01b031690565b600f5481565b6002600054141561288e576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b6002600090815561289d613efd565b90506128a881611dd1565b6128e7576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b600b548490839060ff80841691161161293b576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152600a60205260409020600701541615612993576040805162461bcd60e51b81526020600482015260196024820152600080516020615244833981519152604482015290519081900360640190fd5b806129d3576040805162461bcd60e51b815260206004820152601a60248201526000805160206152cc833981519152604482015290519081900360640190fd5b8060641015612a1a576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b612a258686866141a3565b600754604080516323b872dd60e01b81523360048201523060248201526044810188905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015612a7f57600080fd5b505af1158015612a93573d6000803e3d6000fd5b505050506040513d6020811015612aa957600080fd5b505060065460ff87166000908152600a60205260408120600101546001600160a01b039092169163731133e9913391908890612ae490613da6565b6040518563ffffffff1660e01b815260040180856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612b4b578181015183820152602001612b33565b50505050905090810190601f168015612b785780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015612b9a57600080fd5b505af1158015612bae573d6000803e3d6000fd5b505050506040513d6020811015612bc457600080fd5b50506001600055505050505050565b600b546000908190819081908690869060ff808416911611612c30576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152600a60205260409020600701541615612c88576040805162461bcd60e51b81526020600482015260196024820152600080516020615244833981519152604482015290519081900360640190fd5b80612cc8576040805162461bcd60e51b815260206004820152601a60248201526000805160206152cc833981519152604482015290519081900360640190fd5b8060641015612d0f576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b612d198888613b25565b929b919a509850909650945050505050565b60026000541415612d71576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b60026000908155612d80613efd565b9050612d8b81611dd1565b612dca576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b600b5460ff808516911611612e1a576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b5060ff919091166000908152600a60205260408120600701805460ff19169215159290921790915560019055565b63bc197c8160e01b95945050505050565b60026000541415612e9f576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b60026000908155612eae613efd565b9050612eb981611dd1565b612ef8576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b6040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b0385169163a9059cbb9160448083019260209291908290030181600087803b158015612f4757600080fd5b505af1158015612f5b573d6000803e3d6000fd5b505050506040513d6020811015612f7157600080fd5b50506001600055505050565b60026000541415612fc3576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b60026000908155612fd2613efd565b9050612fdd81611dd1565b61301c576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b600b548490839060ff808416911611613070576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152600a602052604090206007015416156130c8576040805162461bcd60e51b81526020600482015260196024820152600080516020615244833981519152604482015290519081900360640190fd5b80613108576040805162461bcd60e51b815260206004820152601a60248201526000805160206152cc833981519152604482015290519081900360640190fd5b806064101561314f576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b61315a868686613c7f565b60065460ff87166000908152600a60205260408120600101546001600160a01b039092169163f242432a9133913091899061319490613da6565b6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561320a5781810151838201526020016131f2565b50505050905090810190601f1680156132375780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561325a57600080fd5b505af115801561326e573d6000803e3d6000fd5b505060065460ff89166000908152600a6020526040808220600101548151637a94c56560e11b81523060048201526024810191909152604481018a905290516001600160a01b03909316945063f5298aca93506064808201939182900301818387803b1580156132dd57600080fd5b505af11580156132f1573d6000803e3d6000fd5b50506007546040805163a9059cbb60e01b8152336004820152602481018a905290516001600160a01b03909216935063a9059cbb92506044808201926020929091908290030181600087803b158015612b9a57600080fd5b60055460ff1681565b60026000541415613398576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b600260009081556133a7613efd565b90506133b281611dd1565b6133f1576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b50600e80546001600160a01b0319166001600160a01b03929092169190911790556001600055565b600b54600090819060ff80851691161161346e576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b61347783614288565b613480846142e3565b91509150915091565b60055460095460408051636a93856760e01b815260048101929092525160009261010090046001600160a01b031691636a938567916024808301926020929190829003018186803b1580156134dd57600080fd5b505afa1580156134f1573d6000803e3d6000fd5b505050506040513d602081101561350757600080fd5b505161355a576040805162461bcd60e51b815260206004820152601c60248201527f73796e74686574696353796d626f6c206973206e6f742076616c696400000000604482015290519081900360640190fd5b600560019054906101000a90046001600160a01b03166001600160a01b031663161e444e6009546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561219f57600080fd5b600b546000908190819081908690869060ff808416911611613612576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152600a6020526040902060070154161561366a576040805162461bcd60e51b81526020600482015260196024820152600080516020615244833981519152604482015290519081900360640190fd5b806136aa576040805162461bcd60e51b815260206004820152601a60248201526000805160206152cc833981519152604482015290519081900360640190fd5b80606410156136f1576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b612d198888614043565b60026000541415613741576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b60026000908155613750613efd565b905061375b81611dd1565b61379a576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b50601080549115156101000261ff00199092169190911790556001600055565b60026000541415613800576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b6002600090815561380f613efd565b905061381a81611dd1565b613859576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b506010805460ff19169115159190911790556001600055565b60105460ff1681565b600a6020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529092918391908301828280156139125780601f106138e757610100808354040283529160200191613912565b820191906000526020600020905b8154815290600101906020018083116138f557829003601f168201915b50505050600183015460028401546003850154600486015460058701546006880154600790980154969794969395509193909260ff1688565b63f23a6e6160e01b95945050505050565b613964613efd565b6001600160a01b0316613975612833565b6001600160a01b0316146139be576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b6001600160a01b038116613a035760405162461bcd60e51b81526004018080602001828103825260268152602001806151fc6026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415613aa5576040805162461bcd60e51b815260206004820152601f60248201526000805160206151dc833981519152604482015290519081900360640190fd5b60026000908155613ab4613efd565b9050613abf81611dd1565b613afe576040805162461bcd60e51b8152602060048201819052602482015260008051602061528a833981519152604482015290519081900360640190fd5b6005805483919060ff19166001836003811115613b1757fe5b021790555050600160005550565b600080600080613b35868661432e565b919550935091506000613b4787614288565b905080670de0b6b3a764000014158015613b615750600081135b8015613b70575060105460ff16155b15613c755760ff87166000908152600a6020526040812060030154613b959085613ea7565b60ff89166000908152600a602052604081206002015491925090613be4908390613bdf90613bc3908c613dd0565b60ff8d166000908152600a602052604090206004015490613ea7565b613f01565b90506000613c0582613bff85613bf988614781565b906147cb565b90614804565b905082811115613c415760ff8a166000908152600a6020526040902060030154613c3e90613c34908890614804565b613bf98386613ea7565b94505b6000613c4d8787613ea7565b9050613c5d876113158b84613dd0565b9850613c6d876113158a84613dd0565b975095505050505b5092959194509250565b60ff83166000908152600a6020526040902060020154613cbf90613ca39083613dd0565b60ff85166000908152600a602052604090206004015490613ea7565b60ff84166000908152600a6020526040902060048101919091556006810180548301905560030154613cf19083613ea7565b60ff84166000818152600a60209081526040918290206003810194909455600290930154815133815293840192909252828101919091526060820184905260808201839052517f1d52264c290e444923399d71f1a1d34e37e52c16b4e85326d5accce8653f709f9181900360a00190a1600c54613d6e9083613ea7565b600c5560ff83166000908152600a6020526040902060020154613d9e90613d959083613dd0565b600d5490613ea7565b600d55505050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b600082613ddf57506000613e42565b82820282848281613dec57fe5b0414613e3f576040805162461bcd60e51b815260206004820152601960248201527f556e6d756c7469706c69636174696f6e206f766572666c6f7700000000000000604482015290519081900360640190fd5b90505b92915050565b6000808211613e93576040805162461bcd60e51b8152602060048201526012602482015271556e6469766973696f6e206279207a65726f60701b604482015290519081900360640190fd5b6000828481613e9e57fe5b04949350505050565b600082821115613ef7576040805162461bcd60e51b8152602060048201526016602482015275556e7375627472616374696f6e206f766572666c6f7760501b604482015290519081900360640190fd5b50900390565b3390565b600080600560019054906101000a90046001600160a01b03166001600160a01b031663161e444e6008546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015613f5f57600080fd5b505afa158015613f73573d6000803e3d6000fd5b505050506040513d6020811015613f8957600080fd5b505160055460095460408051630b0f222760e11b81526004810192909252519293506000926101009092046001600160a01b03169163161e444e91602480820192602092909190829003018186803b158015613fe457600080fd5b505afa158015613ff8573d6000803e3d6000fd5b505050506040513d602081101561400e57600080fd5b50519050600061401e83876147cb565b9050600061402c83876147cb565b90506140388282614804565b979650505050505050565b600080600080614053868661432e565b919550935091506000614065876142e3565b9050670de0b6b3a7640000811380156140865750601054610100900460ff16155b15613c755760ff87166000908152600a60205260408120600301546140ab9085614824565b60ff89166000908152600a6020526040812060020154919250906140f5908390613bdf906140d9908c613dd0565b60ff8d166000908152600a602052604090206004015490614824565b9050600061410a82613bff85613bf988614781565b905080831115613c415760ff8a166000908152600a6020526040902060030154613c3e90614139908890614804565b613bf98584613ea7565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261419d908590614874565b50505050565b60ff83166000908152600a60205260409020600201546141c39082613dd0565b60ff84166000818152600a60209081526040918290206004810180549095019094556005840180548601905560038401805487019055600290930154815133815293840192909252828101919091526060820184905260808201839052517ff7bd85d3f10229150829e8504450ec5e026df0879e5a690aa9a5cb6bab4a51d89181900360a00190a1600c546142589083614824565b600c5560ff83166000908152600a6020526040902060020154613d9e9061427f9083613dd0565b600d5490614824565b60008061429c61429784611a3c565b61492a565b905060006142a98261497b565b90506000821380156142c3575080670de0b6b3a764000012155b156142d1579150610c4a9050565b670de0b6b3a764000092505050610c4a565b6000806142f261429784611a3c565b905060006142ff8261497b565b9050670de0b6b3a76400008213801561431757508082135b156142d1576143258261497b565b92505050610c4a565b600080600080600560019054906101000a90046001600160a01b03166001600160a01b031663161e444e6009546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561438f57600080fd5b505afa1580156143a3573d6000803e3d6000fd5b505050506040513d60208110156143b957600080fd5b505160055460085460408051630b0f222760e11b81526004810192909252519293506000926101009092046001600160a01b03169163161e444e91602480820192602092909190829003018186803b15801561441457600080fd5b505afa158015614428573d6000803e3d6000fd5b505050506040513d602081101561443e57600080fd5b505160ff88166000908152600a60205260408120600201549192509061446f906144689089613dd0565b84906147cb565b9050600061447d8284614804565b90508094506000600760009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156144d257600080fd5b505afa1580156144e6573d6000803e3d6000fd5b505050506040513d60208110156144fc57600080fd5b5051600754604080516370a0823160e01b81526001600160a01b039283166004820152905191909216916370a08231916024808301926020929190829003018186803b15801561454b57600080fd5b505afa15801561455f573d6000803e3d6000fd5b505050506040513d602081101561457557600080fd5b50516007546040805163d21220a760e01b815290519293506000926001600160a01b039092169163d21220a791600480820192602092909190829003018186803b1580156145c257600080fd5b505afa1580156145d6573d6000803e3d6000fd5b505050506040513d60208110156145ec57600080fd5b5051600754604080516370a0823160e01b81526001600160a01b039283166004820152905191909216916370a08231916024808301926020929190829003018186803b15801561463b57600080fd5b505afa15801561464f573d6000803e3d6000fd5b505050506040513d602081101561466557600080fd5b5051600754604080516318160ddd60e01b815290519293506146e9926001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b1580156146b357600080fd5b505afa1580156146c7573d6000803e3d6000fd5b505050506040513d60208110156146dd57600080fd5b50516113158585613dd0565b9850614772600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561473c57600080fd5b505afa158015614750573d6000803e3d6000fd5b505050506040513d602081101561476657600080fd5b50516113158584613dd0565b97505050505050509250925092565b6000808212156147c7576040805162461bcd60e51b815260206004820152600c60248201526b696e74206f766572666c6f7760a01b604482015290519081900360640190fd5b5090565b6000670de0b6b3a76400006147f56147e38585613dd0565b6002670de0b6b3a76400005b04614824565b816147fc57fe5b049392505050565b6000816147f561481c85670de0b6b3a7640000613dd0565b6002856147ef565b600082820183811015613e3f576040805162461bcd60e51b8152602060048201526013602482015272556e6164646974696f6e206f766572666c6f7760681b604482015290519081900360640190fd5b60606148c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166149b39092919063ffffffff16565b805190915015614925578080602001905160208110156148e857600080fd5b50516149255760405162461bcd60e51b815260040180806020018281038252602a8152602001806152ec602a913960400191505060405180910390fd5b505050565b60006001600160ff1b038211156147c7576040805162461bcd60e51b815260206004820152601060248201526f75696e74323536206f766572666c6f7760801b604482015290519081900360640190fd5b6000613e426149a4670de0b6b3a764000061499e6781103cb9fb220000866149cc565b90614a01565b678ac7230489e8000090614a70565b60606149c28484600085614a8c565b90505b9392505050565b6000670de0b6b3a76400006149f26149e48585614bdd565b670de0b6b3a7640000614ca8565b816149f957fe5b059392505050565b6000828201818312801590614a165750838112155b80614a2b5750600083128015614a2b57508381125b613e3f576040805162461bcd60e51b81526020600482015260116024820152706164646974696f6e206f766572666c6f7760781b604482015290519081900360640190fd5b6000613e3f614a7e83614d27565b614a8785614d27565b615002565b606082471015614acd5760405162461bcd60e51b81526004018080602001828103825260268152602001806152646026913960400191505060405180910390fd5b614ad685615035565b614b27576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310614b665780518252601f199092019160209182019101614b47565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614bc8576040519150601f19603f3d011682016040523d82523d6000602084013e614bcd565b606091505b509150915061403882828661503b565b600082614bec57506000613e42565b82600019148015614c005750600160ff1b82145b15614c4d576040805162461bcd60e51b8152602060048201526018602482015277776d756c7469706c69636174696f6e206f766572666c6f7760401b604482015290519081900360640190fd5b82820282848281614c5a57fe5b0514613e3f576040805162461bcd60e51b8152602060048201526018602482015277776d756c7469706c69636174696f6e206f766572666c6f7760401b604482015290519081900360640190fd5b6000808213614cfe576040805162461bcd60e51b815260206004820152601f60248201527f726f756e6448616c665570206f6e6c7920737570706f7274732079203e203000604482015290519081900360640190fd5b60008312614d1a57614d138360028405614a01565b9050613e42565b613e3f83600284056150df565b6000808213614d7d576040805162461bcd60e51b815260206004820152601760248201527f6c6f6745206f66206e65676174697665206e756d626572000000000000000000604482015290519081900360640190fd5b701d6329f1c35ca4bfabb9f5610000000000821315614dcd5760405162461bcd60e51b81526004018080602001828103825260228152602001806152226022913960400191505060405180910390fd5b60006012670de0b6b3a76400005b67016345785d8a00008513614e0a5784600a0294506f01bb7635c5de48ef4ce5b7b41cc43db083039250614ddb565b678ac7230489e800008512614e3957600a850594506f01bb7635c5de48ef4ce5b7b41cc43db083019250614e0a565b670de0b6b3a7640000851215614e7657614e5b856725b946ebc0b361736149cc565b94506ec097ce7bc90715b34b9f100000000083039250614e39565b6725b946ebc0b36173851315614eb357614e98856725b946ebc0b36173615002565b94506ec097ce7bc90715b34b9f100000000083019250614e76565b670de0b6b3a7640000851415614ee05780614ece8483614ca8565b81614ed557fe5b059350505050610c4a565b6725b946ebc0b36173851415614f175780614efb8483614ca8565b81614f0257fe5b05670de0b6b3a7640000019350505050610c4a565b938402936e4e16f927cdca7f15b39123f740f5d192909201916f0120e3b5b9ad8aa08cf16e980000000060008187016ec097ce7bc90715b34b9f10000000006f0120e3b5b9ad8aa08cf16e97ffffffff1989010281614f7257fe5b059050806002028501945060006ec097ce7bc90715b34b9f100000000082830281614f9957fe5b05905060035b6ec097ce7bc90715b34b9f10000000008383020592508060ff168360020281614fc457fe5b059690960195600201602760ff821610614fdd57614fe2565b614f9f565b84614fed8887614ca8565b81614ff457fe5b059998505050505050505050565b600080821215615019578160000391508260000392505b816149f261502f85670de0b6b3a7640000614bdd565b84614ca8565b3b151590565b6060831561504a5750816149c5565b82511561505a5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156150a457818101518382015260200161508c565b50505050905090810190601f1680156150d15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60008183038183128015906150f45750838113155b80615109575060008312801561510957508381135b613e3f576040805162461bcd60e51b81526020600482015260146024820152737375627472616374696f6e206f766572666c6f7760601b604482015290519081900360640190fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061519257805160ff19168380011785556151bf565b828001600101855582156151bf579182015b828111156151bf5782518255916020019190600101906151a4565b506147c79291505b808211156147c757600081556001016151c756fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736c6f6745206f6e6c7920616363657074732076203c3d2031653232202a203165313854686520676976656e205f69642069732064697361626c656400000000000000416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572636f6c6c61746572616c536861726553796d626f6c206973206e6f742076616c69645f746f6b656e416d6f756e742063616e2774206265207a65726f0000000000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212201ea9a2b6c0ed539a5385971a32e2b218cd8cb14d2b96e88a40dd42f21943353764736f6c634300060c003360806040526006805460ff191690553480156200001b57600080fd5b506040516200396238038062003962833981810160405260408110156200004157600080fd5b81019080805160405193929190846401000000008211156200006257600080fd5b9083019060208201858111156200007857600080fd5b82516401000000008111828201881017156200009357600080fd5b82525081516020918201929091019080838360005b83811015620000c2578181015183820152602001620000a8565b50505050905090810190601f168015620000f05780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011457600080fd5b9083019060208201858111156200012a57600080fd5b82516401000000008111828201881017156200014557600080fd5b82525081516020918201929091019080838360005b83811015620001745781810151838201526020016200015a565b50505050905090810190601f168015620001a25780820380516001836020036101000a031916815260200191505b5060405250829150620001be90506301ffc9a760e01b6200033e565b620001c981620003c3565b620001db636cdb3d1360e11b6200033e565b620001ed6303a24d0760e21b6200033e565b506000620001fa620003dc565b600480546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600062000254620003dc565b6001600160a01b03166000908152600560205260409020805460ff19166001179055506200028233620003f9565b8151620002979060099060208501906200065e565b5060098054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526200033693909290918301828280156200032a5780601f10620002fe576101008083540402835291602001916200032a565b820191906000526020600020905b8154815290600101906020018083116200030c57829003601f168201915b5050620004b392505050565b5050620006fa565b6001600160e01b031980821614156200039e576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b8051620003d89060039060208401906200065e565b5050565b6000620003f36200051860201b62001f111760201c565b90505b90565b600062000405620003dc565b9050620004128162000577565b62000464576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03821660009081526005602052604090205460ff16156200048c57620003d8565b6001600160a01b0382166000908152600560205260409020805460ff191660011790555050565b60065460ff1615620004fd576040805162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481a5b9a5d195960921b604482015290519081900360640190fd5b620005088162000595565b506006805460ff19166001179055565b600033301415620005725760606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150620003f69050565b503390565b6001600160a01b031660009081526005602052604090205460ff1690565b6040518060800160405280604f815260200162003913604f913980516020918201208251838301206040805180820190915260018152603160f81b930192909252907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc630620006036200065a565b60001b60405160200180868152602001858152602001848152602001836001600160a01b03168152602001828152602001955050505050506040516020818303038152906040528051906020012060078190555050565b4690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006a157805160ff1916838001178555620006d1565b82800160010185558215620006d1579182015b82811115620006d1578251825591602001919060010190620006b4565b50620006df929150620006e3565b5090565b5b80821115620006df5760008155600101620006e4565b613209806200070a6000396000f3fe6080604052600436106101655760003560e01c80633af32abf116100d15780638da5cb5b1161008a578063e985e9c511610064578063e985e9c514610cd2578063f242432a14610d0d578063f2fde38b14610de3578063f5298aca14610e1657610165565b80638da5cb5b14610bb55780639b642de114610be6578063a22cb46514610c9757610165565b80633af32abf146107ad5780634ba79dfe146107e05780634e1273f4146108135780636b20c45414610993578063715018a614610ad3578063731133e914610ae857610165565b80631f7fdffa116101235780631f7fdffa1461038857806320379ee51461054d5780632d0335ab146105625780632eb2c2d6146105955780633408e4701461076557806338eada1c1461077a57610165565b8062fdd58e1461016a57806301ffc9a7146101b557806306fdde03146101fd5780630c53c51c146102875780630e89341c146103495780630f7e597014610373575b600080fd5b34801561017657600080fd5b506101a36004803603604081101561018d57600080fd5b506001600160a01b038135169060200135610e55565b60408051918252519081900360200190f35b3480156101c157600080fd5b506101e9600480360360208110156101d857600080fd5b50356001600160e01b031916610ec7565b604080519115158252519081900360200190f35b34801561020957600080fd5b50610212610ee6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024c578181015183820152602001610234565b50505050905090810190601f1680156102795780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610212600480360360a081101561029d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111600160201b831117156102fa57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020810135906040013560ff16610f74565b34801561035557600080fd5b506102126004803603602081101561036c57600080fd5b503561124a565b34801561037f57600080fd5b506102126112e2565b34801561039457600080fd5b506101e9600480360360808110156103ab57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103d557600080fd5b8201836020820111156103e757600080fd5b803590602001918460208302840111600160201b8311171561040857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561045757600080fd5b82018360208201111561046957600080fd5b803590602001918460208302840111600160201b8311171561048a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156104d957600080fd5b8201836020820111156104eb57600080fd5b803590602001918460018302840111600160201b8311171561050c57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506112ff945050505050565b34801561055957600080fd5b506101a361136c565b34801561056e57600080fd5b506101a36004803603602081101561058557600080fd5b50356001600160a01b0316611373565b3480156105a157600080fd5b50610763600480360360a08110156105b857600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156105eb57600080fd5b8201836020820111156105fd57600080fd5b803590602001918460208302840111600160201b8311171561061e57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561066d57600080fd5b82018360208201111561067f57600080fd5b803590602001918460208302840111600160201b831117156106a057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156106ef57600080fd5b82018360208201111561070157600080fd5b803590602001918460018302840111600160201b8311171561072257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061138e945050505050565b005b34801561077157600080fd5b506101a361168c565b34801561078657600080fd5b506107636004803603602081101561079d57600080fd5b50356001600160a01b0316611690565b3480156107b957600080fd5b506101e9600480360360208110156107d057600080fd5b50356001600160a01b0316611732565b3480156107ec57600080fd5b506107636004803603602081101561080357600080fd5b50356001600160a01b0316611750565b34801561081f57600080fd5b506109436004803603604081101561083657600080fd5b810190602081018135600160201b81111561085057600080fd5b82018360208201111561086257600080fd5b803590602001918460208302840111600160201b8311171561088357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156108d257600080fd5b8201836020820111156108e457600080fd5b803590602001918460208302840111600160201b8311171561090557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506117eb945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561097f578181015183820152602001610967565b505050509050019250505060405180910390f35b34801561099f57600080fd5b50610763600480360360608110156109b657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156109e057600080fd5b8201836020820111156109f257600080fd5b803590602001918460208302840111600160201b83111715610a1357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610a6257600080fd5b820183602082011115610a7457600080fd5b803590602001918460208302840111600160201b83111715610a9557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506118d7945050505050565b348015610adf57600080fd5b5061076361193c565b348015610af457600080fd5b506101e960048036036080811015610b0b57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b811115610b4157600080fd5b820183602082011115610b5357600080fd5b803590602001918460018302840111600160201b83111715610b7457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506119e8945050505050565b348015610bc157600080fd5b50610bca611a49565b604080516001600160a01b039092168252519081900360200190f35b348015610bf257600080fd5b5061076360048036036020811015610c0957600080fd5b810190602081018135600160201b811115610c2357600080fd5b820183602082011115610c3557600080fd5b803590602001918460018302840111600160201b83111715610c5657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611a58945050505050565b348015610ca357600080fd5b5061076360048036036040811015610cba57600080fd5b506001600160a01b0381351690602001351515611ab5565b348015610cde57600080fd5b506101e960048036036040811015610cf557600080fd5b506001600160a01b0381358116916020013516611ba4565b348015610d1957600080fd5b50610763600480360360a0811015610d3057600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b811115610d6f57600080fd5b820183602082011115610d8157600080fd5b803590602001918460018302840111600160201b83111715610da257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611be4945050505050565b348015610def57600080fd5b5061076360048036036020811015610e0657600080fd5b50356001600160a01b0316611daf565b348015610e2257600080fd5b5061076360048036036060811015610e3957600080fd5b506001600160a01b038135169060208101359060400135611eb2565b60006001600160a01b038316610e9c5760405162461bcd60e51b815260040180806020018281038252602b815260200180612f4e602b913960400191505060405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b6001600160e01b03191660009081526020819052604090205460ff1690565b6009805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610f6c5780601f10610f4157610100808354040283529160200191610f6c565b820191906000526020600020905b815481529060010190602001808311610f4f57829003601f168201915b505050505081565b6060610f7e612d89565b50604080516060810182526001600160a01b03881660008181526008602090815290849020548352820152908101869052610fbc8782878787611f6e565b610ff75760405162461bcd60e51b81526004018080602001828103825260218152602001806131186021913960400191505060405180910390fd5b6001600160a01b03871660008181526008602090815260408083208054600101905580519384523384830181905260609185018281528b51928601929092528a517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b958d9592948d94919391926080850192918601918190849084905b8381101561108c578181015183820152602001611074565b50505050905090810190601f1680156110b95780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160006060306001600160a01b0316888a6040516020018083805190602001908083835b6020831061110a5780518252601f1990920191602091820191016110eb565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160a01b031660601b8152601401925050506040516020818303038152906040526040518082805190602001908083835b602083106111805780518252601f199092019160209182019101611161565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146111e2576040519150601f19603f3d011682016040523d82523d6000602084013e6111e7565b606091505b50915091508161123e576040805162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604482015290519081900360640190fd5b98975050505050505050565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156112d65780601f106112ab576101008083540402835291602001916112d6565b820191906000526020600020905b8154815290600101906020018083116112b957829003601f168201915b50505050509050919050565b604051806040016040528060018152602001603160f81b81525081565b60008061130a612048565b905061131581611732565b611354576040805162461bcd60e51b815260206004820181905260248201526000805160206130f8833981519152604482015290519081900360640190fd5b61136086868686612057565b50600195945050505050565b6007545b90565b6001600160a01b031660009081526008602052604090205490565b81518351146113ce5760405162461bcd60e51b815260040180806020018281038252602881526020018061318b6028913960400191505060405180910390fd5b6001600160a01b0384166114135760405162461bcd60e51b81526004018080602001828103825260258152602001806130546025913960400191505060405180910390fd5b61141b612048565b6001600160a01b0316856001600160a01b03161480611446575061144685611441612048565b611ba4565b6114815760405162461bcd60e51b81526004018080602001828103825260328152602001806130796032913960400191505060405180910390fd5b600061148b612048565b905061149b818787878787611684565b60005b845181101561159c5760008582815181106114b557fe5b6020026020010151905060008583815181106114cd57fe5b6020026020010151905061153a816040518060600160405280602a81526020016130ce602a91396001600086815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020546122ac9092919063ffffffff16565b60008381526001602090815260408083206001600160a01b038e811685529252808320939093558a16815220546115719082612343565b60009283526001602081815260408086206001600160a01b038d16875290915290932055500161149e565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561162257818101518382015260200161160a565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015611661578181015183820152602001611649565b5050505090500194505050505060405180910390a461168481878787878761239d565b505050505050565b4690565b600061169a612048565b90506116a581611732565b6116e4576040805162461bcd60e51b815260206004820181905260248201526000805160206130f8833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526005602052604090205460ff161561170a5761172e565b6001600160a01b0382166000908152600560205260409020805460ff191660011790555b5050565b6001600160a01b031660009081526005602052604090205460ff1690565b600061175a612048565b905061176581611732565b6117a4576040805162461bcd60e51b815260206004820181905260248201526000805160206130f8833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526005602052604090205460ff166117c95761172e565b506001600160a01b03166000908152600560205260409020805460ff19169055565b6060815183511461182d5760405162461bcd60e51b81526004018080602001828103825260298152602001806131626029913960400191505060405180910390fd5b6060835167ffffffffffffffff8111801561184757600080fd5b50604051908082528060200260200182016040528015611871578160200160208202803683370190505b50905060005b84518110156118cf576118b085828151811061188f57fe5b60200260200101518583815181106118a357fe5b6020026020010151610e55565b8282815181106118bc57fe5b6020908102919091010152600101611877565b509392505050565b60006118e1612048565b90506118ec81611732565b61192b576040805162461bcd60e51b815260206004820181905260248201526000805160206130f8833981519152604482015290519081900360640190fd5b61193684848461261c565b50505050565b611944612048565b6001600160a01b0316611955611a49565b6001600160a01b03161461199e576040805162461bcd60e51b815260206004820181905260248201526000805160206130f8833981519152604482015290519081900360640190fd5b6004546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600480546001600160a01b0319169055565b6000806119f3612048565b90506119fe81611732565b611a3d576040805162461bcd60e51b815260206004820181905260248201526000805160206130f8833981519152604482015290519081900360640190fd5b6113608686868661288a565b6004546001600160a01b031690565b6000611a62612048565b9050611a6d81611732565b611aac576040805162461bcd60e51b815260206004820181905260248201526000805160206130f8833981519152604482015290519081900360640190fd5b61172e8261298b565b816001600160a01b0316611ac7612048565b6001600160a01b03161415611b0d5760405162461bcd60e51b81526004018080602001828103825260298152602001806131396029913960400191505060405180910390fd5b8060026000611b1a612048565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611b5e612048565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b60006001600160a01b03821673207fa8df3a17d96ca7ea4f2893fcdcb78a3041011415611bd357506001610ec1565b611bdd838361299e565b9392505050565b6001600160a01b038416611c295760405162461bcd60e51b81526004018080602001828103825260258152602001806130546025913960400191505060405180910390fd5b611c31612048565b6001600160a01b0316856001600160a01b03161480611c575750611c5785611441612048565b611c925760405162461bcd60e51b81526004018080602001828103825260298152602001806130066029913960400191505060405180910390fd5b6000611c9c612048565b9050611cbc818787611cad886129cc565b611cb6886129cc565b87611684565b611d03836040518060600160405280602a81526020016130ce602a913960008781526001602090815260408083206001600160a01b038d16845290915290205491906122ac565b60008581526001602090815260408083206001600160a01b038b81168552925280832093909355871681522054611d3a9084612343565b60008581526001602090815260408083206001600160a01b03808b168086529184529382902094909455805188815291820187905280518a8416938616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a4611684818787878787612a10565b611db7612048565b6001600160a01b0316611dc8611a49565b6001600160a01b031614611e11576040805162461bcd60e51b815260206004820181905260248201526000805160206130f8833981519152604482015290519081900360640190fd5b6001600160a01b038116611e565760405162461bcd60e51b8152600401808060200182810382526026815260200180612fbc6026913960400191505060405180910390fd5b6004546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000611ebc612048565b9050611ec781611732565b611f06576040805162461bcd60e51b815260206004820181905260248201526000805160206130f8833981519152604482015290519081900360640190fd5b611936848484612b81565b600033301415611f695760606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506113709050565b503390565b60006001600160a01b038616611fb55760405162461bcd60e51b815260040180806020018281038252602581526020018061302f6025913960400191505060405180910390fd5b6001611fc8611fc387612cb4565b612d37565b83868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561201f573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b6000612052611f11565b905090565b6001600160a01b03841661209c5760405162461bcd60e51b81526004018080602001828103825260218152602001806131b36021913960400191505060405180910390fd5b81518351146120dc5760405162461bcd60e51b815260040180806020018281038252602881526020018061318b6028913960400191505060405180910390fd5b60006120e6612048565b90506120f781600087878787611684565b60005b84518110156121bb576121726001600087848151811061211657fe5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000205485838151811061215c57fe5b602002602001015161234390919063ffffffff16565b6001600087848151811061218257fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038b1682529092529020556001016120fa565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561224257818101518382015260200161222a565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015612281578181015183820152602001612269565b5050505090500194505050505060405180910390a46122a58160008787878761239d565b5050505050565b6000818484111561233b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156123005781810151838201526020016122e8565b50505050905090810190601f16801561232d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015611bdd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6123af846001600160a01b0316612d83565b1561168457836001600160a01b031663bc197c8187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561243d578181015183820152602001612425565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561247c578181015183820152602001612464565b50505050905001848103825285818151815260200191508051906020019080838360005b838110156124b85781810151838201526020016124a0565b50505050905090810190601f1680156124e55780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b15801561250a57600080fd5b505af192505050801561252f57506040513d602081101561252a57600080fd5b505160015b6125c45761253b612e4c565b80612546575061258d565b60405162461bcd60e51b81526020600482018181528351602484015283518493919283926044019190850190808383600083156123005781810151838201526020016122e8565b60405162461bcd60e51b8152600401808060200182810382526034815260200180612ef26034913960400191505060405180910390fd5b6001600160e01b0319811663bc197c8160e01b146126135760405162461bcd60e51b8152600401808060200182810382526028815260200180612f266028913960400191505060405180910390fd5b50505050505050565b6001600160a01b0383166126615760405162461bcd60e51b81526004018080602001828103825260238152602001806130ab6023913960400191505060405180910390fd5b80518251146126a15760405162461bcd60e51b815260040180806020018281038252602881526020018061318b6028913960400191505060405180910390fd5b60006126ab612048565b90506126cb81856000868660405180602001604052806000815250611684565b60005b83518110156127a9576127608382815181106126e657fe5b6020026020010151604051806060016040528060248152602001612fe2602491396001600088868151811061271757fe5b602002602001015181526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020546122ac9092919063ffffffff16565b6001600086848151811061277057fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038a1682529092529020556001016126ce565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015612830578181015183820152602001612818565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561286f578181015183820152602001612857565b5050505090500194505050505060405180910390a450505050565b6001600160a01b0384166128cf5760405162461bcd60e51b81526004018080602001828103825260218152602001806131b36021913960400191505060405180910390fd5b60006128d9612048565b90506128eb81600087611cad886129cc565b60008481526001602090815260408083206001600160a01b03891684529091529020546129189084612343565b60008581526001602090815260408083206001600160a01b03808b16808652918452828520959095558151898152928301889052815190948616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a46122a581600087878787612a10565b805161172e906003906020840190612db3565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6040805160018082528183019092526060918291906020808301908036833701905050905082816000815181106129ff57fe5b602090810291909101015292915050565b612a22846001600160a01b0316612d83565b1561168457836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612ab1578181015183820152602001612a99565b50505050905090810190601f168015612ade5780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b158015612b0157600080fd5b505af1925050508015612b2657506040513d6020811015612b2157600080fd5b505160015b612b325761253b612e4c565b6001600160e01b0319811663f23a6e6160e01b146126135760405162461bcd60e51b8152600401808060200182810382526028815260200180612f266028913960400191505060405180910390fd5b6001600160a01b038316612bc65760405162461bcd60e51b81526004018080602001828103825260238152602001806130ab6023913960400191505060405180910390fd5b6000612bd0612048565b9050612c0081856000612be2876129cc565b612beb876129cc565b60405180602001604052806000815250611684565b612c4782604051806060016040528060248152602001612fe26024913960008681526001602090815260408083206001600160a01b038b16845290915290205491906122ac565b60008481526001602090815260408083206001600160a01b03808a16808652918452828520959095558151888152928301879052815193949093908616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a450505050565b6000604051806080016040528060438152602001612f7960439139805190602001208260000151836020015184604001518051906020012060405160200180858152602001848152602001836001600160a01b03168152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000612d4161136c565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b3b151590565b60405180606001604052806000815260200160006001600160a01b03168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612df457805160ff1916838001178555612e21565b82800160010185558215612e21579182015b82811115612e21578251825591602001919060010190612e06565b50612e2d929150612e31565b5090565b5b80821115612e2d5760008155600101612e32565b60e01c90565b600060443d1015612e5c57611370565b600481823e6308c379a0612e708251612e46565b14612e7a57611370565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715612eaa5750505050611370565b82840192508251915080821115612ec45750505050611370565b503d83016020828401011115612edc57505050611370565b601f01601f191681016020016040529150509056fe455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73455243313135353a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e6174757265294f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5349474e4552455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e736665724f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725369676e657220616e64207369676e617475726520646f206e6f74206d61746368455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368455243313135353a206d696e7420746f20746865207a65726f2061646472657373a264697066735822122041e722e584d7bb9e947c7f0ae7b26c9d63ba8d3b7480bde8e89214962fa114ab64736f6c634300060c0033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAddress(address)": {
        "details": "adds a given address to the whitelist ",
        "params": {
          "_address": "address to add"
        }
      },
      "isWhitelisted(address)": {
        "details": "returns true if a given address is whitelisted, false if not ",
        "params": {
          "_address": "address to check "
        },
        "returns": {
          "_0": "true if the address is whitelisted, false if not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAddress(address)": {
        "details": "removes a given address from the whitelist ",
        "params": {
          "_address": "address to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A contract to collaterizes LP and mints NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5162,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 53,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10818,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "whitelist",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 169,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 5335,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 5337,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "state",
        "offset": 0,
        "slot": "5",
        "type": "t_enum(ContractState)5316"
      },
      {
        "astId": 5339,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "priceResolver",
        "offset": 1,
        "slot": "5",
        "type": "t_contract(IPriceResolver)8664"
      },
      {
        "astId": 5342,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "syntheticNFT",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ISyntheticNFT)8723"
      },
      {
        "astId": 5345,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "collateralShare",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IPancakePair)8238"
      },
      {
        "astId": 5347,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "collateralShareSymbol",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 5349,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "syntheticSymbol",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 5353,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "syntheticVariants",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint8,t_struct(SyntheticVariant)5333_storage)"
      },
      {
        "astId": 5355,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "syntheticVariantCount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint8"
      },
      {
        "astId": 5357,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "totalRawCollateral",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5359,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "totalOutstanding",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5361,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "devAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 5363,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "redeemFee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 5365,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "offsetDisabled",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 5367,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "discountDisabled",
        "offset": 1,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 5370,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "COOLDOWN_PERIOD",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IPancakePair)8238": {
        "encoding": "inplace",
        "label": "contract IPancakePair",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceResolver)8664": {
        "encoding": "inplace",
        "label": "contract IPriceResolver",
        "numberOfBytes": "20"
      },
      "t_contract(ISyntheticNFT)8723": {
        "encoding": "inplace",
        "label": "contract ISyntheticNFT",
        "numberOfBytes": "20"
      },
      "t_enum(ContractState)5316": {
        "encoding": "inplace",
        "label": "enum NFTManager.ContractState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_struct(SyntheticVariant)5333_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct NFTManager.SyntheticVariant)",
        "numberOfBytes": "32",
        "value": "t_struct(SyntheticVariant)5333_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SyntheticVariant)5333_storage": {
        "encoding": "inplace",
        "label": "struct NFTManager.SyntheticVariant",
        "members": [
          {
            "astId": 5318,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5320,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5322,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "tokenValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5324,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "totalRawCollateral",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5326,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "totalOutstanding",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5328,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "totalIssued",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5330,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "totalBurnt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5332,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "disabled",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}