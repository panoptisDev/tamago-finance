{
  "address": "0x0F4ac30E760ad46E176BB598065505bB42EB8594",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC712_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeperator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_nftManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb8bbf5c5b2d8b1478dad9f784b39c1b0e63427a9fe5270ad29e543f58214082",
  "receipt": {
    "to": null,
    "from": "0x27dDF44eC9E32343599F7B939e4c35c034f78076",
    "contractAddress": "0x0F4ac30E760ad46E176BB598065505bB42EB8594",
    "transactionIndex": 0,
    "gasUsed": "3369925",
    "logsBloom": "0x
    "blockHash": "0x4bbc9f4f49f9018ca8447f0d1680c45aa8300f5951805dbb3c47fef3c4a850ae",
    "transactionHash": "0xcb8bbf5c5b2d8b1478dad9f784b39c1b0e63427a9fe5270ad29e543f58214082",
    "logs": [],
    "blockNumber": 15908735,
    "cumulativeGasUsed": "3369925",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "10dfbe4ed68b85e88ef67ca1c7827bfc",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_nftManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAddress(address)\":{\"details\":\"adds a given address to the whitelist\",\"params\":{\"_address\":\"address to add\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isWhitelisted(address)\":{\"details\":\"returns true if a given address is whitelisted, false if not\",\"params\":{\"_address\":\"address to check\"},\"returns\":{\"_0\":\"true if the address is whitelisted, false if not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAddress(address)\":{\"details\":\"removes a given address from the whitelist\",\"params\":{\"_address\":\"address to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utility/SyntheticNFT.sol\":\"SyntheticNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc6dbbc2f50a7c104377798a37b2acd1a41c1242544b0bb7a9a7c863f0520eb50\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x60ba1a103fd296c59818ec8254e137ac3f96c3cff6ad474290cce2f0011e82d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2392b21b331e4e51770afd96dae9d54337d78c10ad3b365b892f5849594d6a4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x68a2498b459518376db0497bce2344169497020cd95db90d76f8312e02c40ba0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xcbc02d192c55298cf65e5695375c839eac979a597a0fbdc1635195c4d28ca5ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"contracts/utility/SyntheticNFT.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"./WhitelistUpgradeable.sol\\\";\\n\\n/**\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/EIP712Base.sol\\n */\\ncontract EIP712Base is Initializable {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    string constant public ERC712_VERSION = \\\"1\\\";\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n        )\\n    );\\n    bytes32 internal domainSeperator;\\n\\n    // supposed to be called once while initializing.\\n    // one of the contractsa that inherits this contract follows proxy pattern\\n    // so it is not possible to do this in a constructor\\n    function _initializeEIP712(\\n        string memory name\\n    )\\n        internal\\n        initializer\\n    {\\n        _setDomainSeperator(name);\\n    }\\n\\n    function _setDomainSeperator(string memory name) internal {\\n        domainSeperator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(ERC712_VERSION)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getDomainSeperator() public view returns (bytes32) {\\n        return domainSeperator;\\n    }\\n\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\n            );\\n    }\\n}\\n\\n/**\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/NativeMetaTransaction.sol\\n */\\ncontract NativeMetaTransaction is EIP712Base {\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n        )\\n    );\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address payable relayerAddress,\\n        bytes functionSignature\\n    );\\n    mapping(address => uint256) nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"Signer and signature do not match\\\"\\n        );\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] = nonces[userAddress] + 1;\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            payable(msg.sender),\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    META_TRANSACTION_TYPEHASH,\\n                    metaTx.nonce,\\n                    metaTx.from,\\n                    keccak256(metaTx.functionSignature)\\n                )\\n            );\\n    }\\n\\n    function getNonce(address user) public view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n        return\\n            signer ==\\n            ecrecover(\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\n                sigV,\\n                sigR,\\n                sigS\\n            );\\n    }\\n}\\n\\ncontract SyntheticNFT is ERC1155Upgradeable, WhitelistUpgradeable, NativeMetaTransaction {\\n\\n    // Contract name\\n    string public name;\\n\\n    function initialize(string memory name_, string memory uri, address _nftManager) external initializer {\\n        WhitelistUpgradeable.__Whitelist_init();\\n        ERC1155Upgradeable.__ERC1155_init(uri);\\n        addAddress(_nftManager);\\n        name = name_;\\n        _initializeEIP712(name);\\n    }\\n\\n    function mint(address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data)\\n        external\\n        onlyWhitelisted\\n        returns (bool)\\n    {\\n        _mint(to, id, value, data);\\n        return true;\\n    }\\n\\n    function mintBatch(\\n       address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) external onlyWhitelisted returns (bool) {\\n        _mintBatch(to, ids, values, data);\\n        return true;\\n    }\\n\\n    function burn(\\n        address owner,\\n        uint256 id,\\n        uint256 value\\n    )\\n        external\\n        onlyWhitelisted\\n    {\\n        _burn(owner, id, value);\\n    }\\n\\n    function burnBatch(\\n        address owner,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external onlyWhitelisted {\\n        _burnBatch(owner, ids, values);\\n    }\\n\\n    function setUri(string memory uri) external onlyWhitelisted {\\n        _setURI(uri);\\n    }\\n\\n     function isApprovedForAll(\\n        address _owner,\\n        address _operator\\n    ) public override view returns (bool isOperator) {\\n        if (_operator == address(0x207Fa8Df3a17D96Ca7EA4f2893fcdCb78a304101)) {\\n            return true;\\n        }\\n        \\n        return ERC1155Upgradeable.isApprovedForAll(_owner, _operator);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x474c9d9b0eca7bfc0640d6e398fc8e562ede94a308ec4b8e884a426c6eec23fa\",\"license\":\"MIT\"},\"contracts/utility/WhitelistUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev The contract manages a list of whitelisted addresses\\n */\\ncontract WhitelistUpgradeable is OwnableUpgradeable {\\n  using AddressUpgradeable for address;\\n\\n  mapping(address => bool) private whitelist;\\n\\n  function __Whitelist_init() internal initializer {\\n    OwnableUpgradeable.__Ownable_init();\\n    address msgSender = _msgSender();\\n    whitelist[msgSender] = true;\\n  }\\n\\n  /**\\n   * @dev returns true if a given address is whitelisted, false if not\\n   *\\n   * @param _address address to check\\n   *\\n   * @return true if the address is whitelisted, false if not\\n   */\\n  function isWhitelisted(address _address) public view returns (bool) {\\n    return whitelist[_address];\\n  }\\n\\n  modifier onlyWhitelisted() {\\n    address sender = _msgSender();\\n    require(isWhitelisted(sender), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev adds a given address to the whitelist\\n   *\\n   * @param _address address to add\\n   */\\n  function addAddress(address _address) public onlyWhitelisted {\\n    if (whitelist[_address])\\n      // checks if the address is already whitelisted\\n      return;\\n\\n    whitelist[_address] = true;\\n  }\\n\\n  /**\\n   * @dev removes a given address from the whitelist\\n   *\\n   * @param _address address to remove\\n   */\\n  function removeAddress(address _address) public onlyWhitelisted {\\n    if (!whitelist[_address])\\n      // checks if the address is actually whitelisted\\n      return;\\n\\n    whitelist[_address] = false;\\n  }\\n}\\n\",\"keccak256\":\"0x4ffd52746018b6f0708b38577236ae02a479b60a2a05fd8415f814d2f899eb42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613bff806100206000396000f3fe6080604052600436106101805760003560e01c80633af32abf116100d15780638da5cb5b1161008a578063e985e9c511610064578063e985e9c514610e2e578063f242432a14610e69578063f2fde38b14610f3f578063f5298aca14610f7257610180565b80638da5cb5b14610d115780639b642de114610d42578063a22cb46514610df357610180565b80633af32abf146109095780634ba79dfe1461093c5780634e1273f41461096f5780636b20c45414610aef578063715018a614610c2f578063731133e914610c4457610180565b80630f7e59701161013e5780632d0335ab116101185780632d0335ab146106c05780632eb2c2d6146106f35780633408e470146108c157806338eada1c146108d657610180565b80630f7e5970146104d15780631f7fdffa146104e657806320379ee5146106ab57610180565b8062fdd58e1461018557806301ffc9a7146101d057806306fdde0314610218578063077f224a146102a25780630c53c51c146103e55780630e89341c146104a7575b600080fd5b34801561019157600080fd5b506101be600480360360408110156101a857600080fd5b506001600160a01b038135169060200135610fb1565b60408051918252519081900360200190f35b3480156101dc57600080fd5b50610204600480360360208110156101f357600080fd5b50356001600160e01b031916611023565b604080519115158252519081900360200190f35b34801561022457600080fd5b5061022d611042565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026757818101518382015260200161024f565b50505050905090810190601f1680156102945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ae57600080fd5b506103e3600480360360608110156102c557600080fd5b810190602081018135600160201b8111156102df57600080fd5b8201836020820111156102f157600080fd5b803590602001918460018302840111600160201b8311171561031257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561036457600080fd5b82018360208201111561037657600080fd5b803590602001918460018302840111600160201b8311171561039757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550505090356001600160a01b031691506110d09050565b005b61022d600480360360a08110156103fb57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561042557600080fd5b82018360208201111561043757600080fd5b803590602001918460018302840111600160201b8311171561045857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020810135906040013560ff1661123a565b3480156104b357600080fd5b5061022d600480360360208110156104ca57600080fd5b5035611510565b3480156104dd57600080fd5b5061022d6115a8565b3480156104f257600080fd5b506102046004803603608081101561050957600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561053357600080fd5b82018360208201111561054557600080fd5b803590602001918460208302840111600160201b8311171561056657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156105b557600080fd5b8201836020820111156105c757600080fd5b803590602001918460208302840111600160201b831117156105e857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561063757600080fd5b82018360208201111561064957600080fd5b803590602001918460018302840111600160201b8311171561066a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506115c5945050505050565b3480156106b757600080fd5b506101be611632565b3480156106cc57600080fd5b506101be600480360360208110156106e357600080fd5b50356001600160a01b0316611639565b3480156106ff57600080fd5b506103e3600480360360a081101561071657600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561074957600080fd5b82018360208201111561075b57600080fd5b803590602001918460208302840111600160201b8311171561077c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156107cb57600080fd5b8201836020820111156107dd57600080fd5b803590602001918460208302840111600160201b831117156107fe57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561084d57600080fd5b82018360208201111561085f57600080fd5b803590602001918460018302840111600160201b8311171561088057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611654945050505050565b3480156108cd57600080fd5b506101be611957565b3480156108e257600080fd5b506103e3600480360360208110156108f957600080fd5b50356001600160a01b031661195b565b34801561091557600080fd5b506102046004803603602081101561092c57600080fd5b50356001600160a01b03166119fd565b34801561094857600080fd5b506103e36004803603602081101561095f57600080fd5b50356001600160a01b0316611a1b565b34801561097b57600080fd5b50610a9f6004803603604081101561099257600080fd5b810190602081018135600160201b8111156109ac57600080fd5b8201836020820111156109be57600080fd5b803590602001918460208302840111600160201b831117156109df57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610a2e57600080fd5b820183602082011115610a4057600080fd5b803590602001918460208302840111600160201b83111715610a6157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611ab6945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610adb578181015183820152602001610ac3565b505050509050019250505060405180910390f35b348015610afb57600080fd5b506103e360048036036060811015610b1257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610b3c57600080fd5b820183602082011115610b4e57600080fd5b803590602001918460208302840111600160201b83111715610b6f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610bbe57600080fd5b820183602082011115610bd057600080fd5b803590602001918460208302840111600160201b83111715610bf157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611ba2945050505050565b348015610c3b57600080fd5b506103e3611c01565b348015610c5057600080fd5b5061020460048036036080811015610c6757600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b811115610c9d57600080fd5b820183602082011115610caf57600080fd5b803590602001918460018302840111600160201b83111715610cd057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611cad945050505050565b348015610d1d57600080fd5b50610d26611d0e565b604080516001600160a01b039092168252519081900360200190f35b348015610d4e57600080fd5b506103e360048036036020811015610d6557600080fd5b810190602081018135600160201b811115610d7f57600080fd5b820183602082011115610d9157600080fd5b803590602001918460018302840111600160201b83111715610db257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611d1d945050505050565b348015610dff57600080fd5b506103e360048036036040811015610e1657600080fd5b506001600160a01b0381351690602001351515611d7a565b348015610e3a57600080fd5b5061020460048036036040811015610e5157600080fd5b506001600160a01b0381358116916020013516611e69565b348015610e7557600080fd5b506103e3600480360360a0811015610e8c57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b811115610ecb57600080fd5b820183602082011115610edd57600080fd5b803590602001918460018302840111600160201b83111715610efe57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ea9945050505050565b348015610f4b57600080fd5b506103e360048036036020811015610f6257600080fd5b50356001600160a01b0316612074565b348015610f7e57600080fd5b506103e360048036036060811015610f9557600080fd5b506001600160a01b038135169060208101359060400135612177565b60006001600160a01b038316610ff85760405162461bcd60e51b815260040180806020018281038252602b8152602001806138c7602b913960400191505060405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b6001600160e01b03191660009081526033602052604090205460ff1690565b60cc805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156110c85780601f1061109d576101008083540402835291602001916110c8565b820191906000526020600020905b8154815290600101906020018083116110ab57829003601f168201915b505050505081565b600054610100900460ff16806110e957506110e96121d6565b806110f7575060005460ff16155b6111325760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff1615801561115d576000805460ff1961ff0019909116610100171660011790555b6111656121e7565b61116e836122be565b6111778261195b565b835161118a9060cc906020870190613702565b5060cc8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815261122293909290918301828280156112185780601f106111ed57610100808354040283529160200191611218565b820191906000526020600020905b8154815290600101906020018083116111fb57829003601f168201915b5050505050612379565b8015611234576000805461ff00191690555b50505050565b6060611244613780565b50604080516060810182526001600160a01b038816600081815260cb602090815290849020548352820152908101869052611282878287878761240f565b6112bd5760405162461bcd60e51b8152600401808060200182810382526021815260200180613b0e6021913960400191505060405180910390fd5b6001600160a01b038716600081815260cb602090815260408083208054600101905580519384523384830181905260609185018281528b51928601929092528a517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b958d9592948d94919391926080850192918601918190849084905b8381101561135257818101518382015260200161133a565b50505050905090810190601f16801561137f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160006060306001600160a01b0316888a6040516020018083805190602001908083835b602083106113d05780518252601f1990920191602091820191016113b1565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160a01b031660601b8152601401925050506040516020818303038152906040526040518082805190602001908083835b602083106114465780518252601f199092019160209182019101611427565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146114a8576040519150601f19603f3d011682016040523d82523d6000602084013e6114ad565b606091505b509150915081611504576040805162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604482015290519081900360640190fd5b98975050505050505050565b60678054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561159c5780601f106115715761010080835404028352916020019161159c565b820191906000526020600020905b81548152906001019060200180831161157f57829003601f168201915b50505050509050919050565b604051806040016040528060018152602001603160f81b81525081565b6000806115d06124e9565b90506115db816119fd565b61161a576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b611626868686866124ed565b50600195945050505050565b60ca545b90565b6001600160a01b0316600090815260cb602052604090205490565b81518351146116945760405162461bcd60e51b8152600401808060200182810382526028815260200180613b816028913960400191505060405180910390fd5b6001600160a01b0384166116d95760405162461bcd60e51b8152600401808060200182810382526025815260200180613a1c6025913960400191505060405180910390fd5b6116e16124e9565b6001600160a01b0316856001600160a01b0316148061170c575061170c856117076124e9565b611e69565b6117475760405162461bcd60e51b8152600401808060200182810382526032815260200180613a416032913960400191505060405180910390fd5b60006117516124e9565b905061176181878787878761194f565b60005b845181101561186757600085828151811061177b57fe5b60200260200101519050600085838151811061179357fe5b60200260200101519050611800816040518060600160405280602a8152602001613ac4602a91396065600086815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020546127429092919063ffffffff16565b60008381526065602090815260408083206001600160a01b038e811685529252808320939093558a168152205461183790826127d9565b60009283526065602090815260408085206001600160a01b038c1686529091529092209190915550600101611764565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156118ed5781810151838201526020016118d5565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561192c578181015183820152602001611914565b5050505090500194505050505060405180910390a461194f818787878787612833565b505050505050565b4690565b60006119656124e9565b9050611970816119fd565b6119af576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b6001600160a01b038216600090815260c9602052604090205460ff16156119d5576119f9565b6001600160a01b038216600090815260c960205260409020805460ff191660011790555b5050565b6001600160a01b0316600090815260c9602052604090205460ff1690565b6000611a256124e9565b9050611a30816119fd565b611a6f576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b6001600160a01b038216600090815260c9602052604090205460ff16611a94576119f9565b506001600160a01b0316600090815260c960205260409020805460ff19169055565b60608151835114611af85760405162461bcd60e51b8152600401808060200182810382526029815260200180613b586029913960400191505060405180910390fd5b6060835167ffffffffffffffff81118015611b1257600080fd5b50604051908082528060200260200182016040528015611b3c578160200160208202803683370190505b50905060005b8451811015611b9a57611b7b858281518110611b5a57fe5b6020026020010151858381518110611b6e57fe5b6020026020010151610fb1565b828281518110611b8757fe5b6020908102919091010152600101611b42565b509392505050565b6000611bac6124e9565b9050611bb7816119fd565b611bf6576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b611234848484612ab2565b611c096124e9565b6001600160a01b0316611c1a611d0e565b6001600160a01b031614611c63576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b6097546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3609780546001600160a01b0319169055565b600080611cb86124e9565b9050611cc3816119fd565b611d02576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b61162686868686612d20565b6097546001600160a01b031690565b6000611d276124e9565b9050611d32816119fd565b611d71576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b6119f982612e21565b816001600160a01b0316611d8c6124e9565b6001600160a01b03161415611dd25760405162461bcd60e51b8152600401808060200182810382526029815260200180613b2f6029913960400191505060405180910390fd5b8060666000611ddf6124e9565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611e236124e9565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b60006001600160a01b03821673207fa8df3a17d96ca7ea4f2893fcdcb78a3041011415611e985750600161101d565b611ea28383612e34565b9392505050565b6001600160a01b038416611eee5760405162461bcd60e51b8152600401808060200182810382526025815260200180613a1c6025913960400191505060405180910390fd5b611ef66124e9565b6001600160a01b0316856001600160a01b03161480611f1c5750611f1c856117076124e9565b611f575760405162461bcd60e51b81526004018080602001828103825260298152602001806139ce6029913960400191505060405180910390fd5b6000611f616124e9565b9050611f81818787611f7288612e62565b611f7b88612e62565b8761194f565b611fc8836040518060600160405280602a8152602001613ac4602a913960008781526065602090815260408083206001600160a01b038d1684529091529020549190612742565b60008581526065602090815260408083206001600160a01b038b81168552925280832093909355871681522054611fff90846127d9565b60008581526065602090815260408083206001600160a01b03808b168086529184529382902094909455805188815291820187905280518a8416938616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a461194f818787878787612ea6565b61207c6124e9565b6001600160a01b031661208d611d0e565b6001600160a01b0316146120d6576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b6001600160a01b03811661211b5760405162461bcd60e51b81526004018080602001828103825260268152602001806139356026913960400191505060405180910390fd5b6097546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3609780546001600160a01b0319166001600160a01b0392909216919091179055565b60006121816124e9565b905061218c816119fd565b6121cb576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b611234848484613017565b60006121e13061314a565b15905090565b600054610100900460ff168061220057506122006121d6565b8061220e575060005460ff16155b6122495760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff16158015612274576000805460ff1961ff0019909116610100171660011790555b61227c613150565b60006122866124e9565b6001600160a01b0316600090815260c960205260409020805460ff191660011790555080156122bb576000805461ff00191690555b50565b600054610100900460ff16806122d757506122d76121d6565b806122e5575060005460ff16155b6123205760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff1615801561234b576000805460ff1961ff0019909116610100171660011790555b612353613201565b61235b6132a1565b6123648261333e565b80156119f9576000805461ff00191690555050565b600054610100900460ff168061239257506123926121d6565b806123a0575060005460ff16155b6123db5760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff16158015612406576000805460ff1961ff0019909116610100171660011790555b612364826133f4565b60006001600160a01b0386166124565760405162461bcd60e51b81526004018080602001828103825260258152602001806139f76025913960400191505060405180910390fd5b6001612469612464876134b6565b613539565b83868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156124c0573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b3390565b6001600160a01b0384166125325760405162461bcd60e51b8152600401808060200182810382526021815260200180613ba96021913960400191505060405180910390fd5b81518351146125725760405162461bcd60e51b8152600401808060200182810382526028815260200180613b816028913960400191505060405180910390fd5b600061257c6124e9565b905061258d8160008787878761194f565b60005b845181101561265157612608606560008784815181106125ac57fe5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020548583815181106125f257fe5b60200260200101516127d990919063ffffffff16565b6065600087848151811061261857fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038b168252909252902055600101612590565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156126d85781810151838201526020016126c0565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156127175781810151838201526020016126ff565b5050505090500194505050505060405180910390a461273b81600087878787612833565b5050505050565b600081848411156127d15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561279657818101518382015260200161277e565b50505050905090810190601f1680156127c35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015611ea2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b612845846001600160a01b031661314a565b1561194f57836001600160a01b031663bc197c8187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156128d35781810151838201526020016128bb565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156129125781810151838201526020016128fa565b50505050905001848103825285818151815260200191508051906020019080838360005b8381101561294e578181015183820152602001612936565b50505050905090810190601f16801561297b5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156129a057600080fd5b505af19250505080156129c557506040513d60208110156129c057600080fd5b505160015b612a5a576129d16137c5565b806129dc5750612a23565b60405162461bcd60e51b815260206004820181815283516024840152835184939192839260440191908501908083836000831561279657818101518382015260200161277e565b60405162461bcd60e51b815260040180806020018281038252603481526020018061386b6034913960400191505060405180910390fd5b6001600160e01b0319811663bc197c8160e01b14612aa95760405162461bcd60e51b815260040180806020018281038252602881526020018061389f6028913960400191505060405180910390fd5b50505050505050565b6001600160a01b038316612af75760405162461bcd60e51b8152600401808060200182810382526023815260200180613aa16023913960400191505060405180910390fd5b8051825114612b375760405162461bcd60e51b8152600401808060200182810382526028815260200180613b816028913960400191505060405180910390fd5b6000612b416124e9565b9050612b618185600086866040518060200160405280600081525061194f565b60005b8351811015612c3f57612bf6838281518110612b7c57fe5b602002602001015160405180606001604052806024815260200161395b6024913960656000888681518110612bad57fe5b602002602001015181526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020546127429092919063ffffffff16565b60656000868481518110612c0657fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038a168252909252902055600101612b64565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015612cc6578181015183820152602001612cae565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015612d05578181015183820152602001612ced565b5050505090500194505050505060405180910390a450505050565b6001600160a01b038416612d655760405162461bcd60e51b8152600401808060200182810382526021815260200180613ba96021913960400191505060405180910390fd5b6000612d6f6124e9565b9050612d8181600087611f7288612e62565b60008481526065602090815260408083206001600160a01b0389168452909152902054612dae90846127d9565b60008581526065602090815260408083206001600160a01b03808b16808652918452828520959095558151898152928301889052815190948616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a461273b81600087878787612ea6565b80516119f9906067906020840190613702565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b604080516001808252818301909252606091829190602080830190803683370190505090508281600081518110612e9557fe5b602090810291909101015292915050565b612eb8846001600160a01b031661314a565b1561194f57836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612f47578181015183820152602001612f2f565b50505050905090810190601f168015612f745780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b158015612f9757600080fd5b505af1925050508015612fbc57506040513d6020811015612fb757600080fd5b505160015b612fc8576129d16137c5565b6001600160e01b0319811663f23a6e6160e01b14612aa95760405162461bcd60e51b815260040180806020018281038252602881526020018061389f6028913960400191505060405180910390fd5b6001600160a01b03831661305c5760405162461bcd60e51b8152600401808060200182810382526023815260200180613aa16023913960400191505060405180910390fd5b60006130666124e9565b90506130968185600061307887612e62565b61308187612e62565b6040518060200160405280600081525061194f565b6130dd8260405180606001604052806024815260200161395b6024913960008681526065602090815260408083206001600160a01b038b1684529091529020549190612742565b60008481526065602090815260408083206001600160a01b03808a16808652918452828520959095558151888152928301879052815193949093908616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a450505050565b3b151590565b600054610100900460ff168061316957506131696121d6565b80613177575060005460ff16155b6131b25760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff161580156131dd576000805460ff1961ff0019909116610100171660011790555b6131e5613201565b6131ed613585565b80156122bb576000805461ff001916905550565b600054610100900460ff168061321a575061321a6121d6565b80613228575060005460ff16155b6132635760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff161580156131ed576000805460ff1961ff00199091166101001716600117905580156122bb576000805461ff001916905550565b600054610100900460ff16806132ba57506132ba6121d6565b806132c8575060005460ff16155b6133035760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff1615801561332e576000805460ff1961ff0019909116610100171660011790555b6131ed6301ffc9a760e01b61367e565b600054610100900460ff168061335757506133576121d6565b80613365575060005460ff16155b6133a05760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff161580156133cb576000805460ff1961ff0019909116610100171660011790555b6133d482612e21565b6133e4636cdb3d1360e11b61367e565b6123646303a24d0760e21b61367e565b6040518060800160405280604f815260200161397f604f913980516020918201208251838301206040805180820190915260018152603160f81b930192909252907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc63061345f611957565b60001b60405160200180868152602001858152602001848152602001836001600160a01b03168152602001828152602001955050505050506040516020818303038152906040528051906020012060ca8190555050565b60006040518060800160405280604381526020016138f260439139805190602001208260000151836020015184604001518051906020012060405160200180858152602001848152602001836001600160a01b03168152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000613543611632565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b600054610100900460ff168061359e575061359e6121d6565b806135ac575060005460ff16155b6135e75760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff16158015613612576000805460ff1961ff0019909116610100171660011790555b600061361c6124e9565b609780546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156122bb576000805461ff001916905550565b6001600160e01b031980821614156136dd576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152603360205260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061374357805160ff1916838001178555613770565b82800160010185558215613770579182015b82811115613770578251825591602001919060010190613755565b5061377c9291506137aa565b5090565b60405180606001604052806000815260200160006001600160a01b03168152602001606081525090565b5b8082111561377c57600081556001016137ab565b60e01c90565b600060443d10156137d557611636565b600481823e6308c379a06137e982516137bf565b146137f357611636565b6040513d600319016004823e80513d67ffffffffffffffff81602484011181841117156138235750505050611636565b8284019250825191508082111561383d5750505050611636565b503d8301602082840101111561385557505050611636565b601f01601f191681016020016040529150509056fe455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73455243313135353a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e6174757265294f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5349474e4552455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e736665724f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725369676e657220616e64207369676e617475726520646f206e6f74206d61746368455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368455243313135353a206d696e7420746f20746865207a65726f2061646472657373a2646970667358221220ba78251eaa45d276ee0908423a2a942826f0a596d8bb5c836846ede0deff0f1064736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101805760003560e01c80633af32abf116100d15780638da5cb5b1161008a578063e985e9c511610064578063e985e9c514610e2e578063f242432a14610e69578063f2fde38b14610f3f578063f5298aca14610f7257610180565b80638da5cb5b14610d115780639b642de114610d42578063a22cb46514610df357610180565b80633af32abf146109095780634ba79dfe1461093c5780634e1273f41461096f5780636b20c45414610aef578063715018a614610c2f578063731133e914610c4457610180565b80630f7e59701161013e5780632d0335ab116101185780632d0335ab146106c05780632eb2c2d6146106f35780633408e470146108c157806338eada1c146108d657610180565b80630f7e5970146104d15780631f7fdffa146104e657806320379ee5146106ab57610180565b8062fdd58e1461018557806301ffc9a7146101d057806306fdde0314610218578063077f224a146102a25780630c53c51c146103e55780630e89341c146104a7575b600080fd5b34801561019157600080fd5b506101be600480360360408110156101a857600080fd5b506001600160a01b038135169060200135610fb1565b60408051918252519081900360200190f35b3480156101dc57600080fd5b50610204600480360360208110156101f357600080fd5b50356001600160e01b031916611023565b604080519115158252519081900360200190f35b34801561022457600080fd5b5061022d611042565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026757818101518382015260200161024f565b50505050905090810190601f1680156102945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ae57600080fd5b506103e3600480360360608110156102c557600080fd5b810190602081018135600160201b8111156102df57600080fd5b8201836020820111156102f157600080fd5b803590602001918460018302840111600160201b8311171561031257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561036457600080fd5b82018360208201111561037657600080fd5b803590602001918460018302840111600160201b8311171561039757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550505090356001600160a01b031691506110d09050565b005b61022d600480360360a08110156103fb57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561042557600080fd5b82018360208201111561043757600080fd5b803590602001918460018302840111600160201b8311171561045857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020810135906040013560ff1661123a565b3480156104b357600080fd5b5061022d600480360360208110156104ca57600080fd5b5035611510565b3480156104dd57600080fd5b5061022d6115a8565b3480156104f257600080fd5b506102046004803603608081101561050957600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561053357600080fd5b82018360208201111561054557600080fd5b803590602001918460208302840111600160201b8311171561056657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156105b557600080fd5b8201836020820111156105c757600080fd5b803590602001918460208302840111600160201b831117156105e857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561063757600080fd5b82018360208201111561064957600080fd5b803590602001918460018302840111600160201b8311171561066a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506115c5945050505050565b3480156106b757600080fd5b506101be611632565b3480156106cc57600080fd5b506101be600480360360208110156106e357600080fd5b50356001600160a01b0316611639565b3480156106ff57600080fd5b506103e3600480360360a081101561071657600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561074957600080fd5b82018360208201111561075b57600080fd5b803590602001918460208302840111600160201b8311171561077c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156107cb57600080fd5b8201836020820111156107dd57600080fd5b803590602001918460208302840111600160201b831117156107fe57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561084d57600080fd5b82018360208201111561085f57600080fd5b803590602001918460018302840111600160201b8311171561088057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611654945050505050565b3480156108cd57600080fd5b506101be611957565b3480156108e257600080fd5b506103e3600480360360208110156108f957600080fd5b50356001600160a01b031661195b565b34801561091557600080fd5b506102046004803603602081101561092c57600080fd5b50356001600160a01b03166119fd565b34801561094857600080fd5b506103e36004803603602081101561095f57600080fd5b50356001600160a01b0316611a1b565b34801561097b57600080fd5b50610a9f6004803603604081101561099257600080fd5b810190602081018135600160201b8111156109ac57600080fd5b8201836020820111156109be57600080fd5b803590602001918460208302840111600160201b831117156109df57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610a2e57600080fd5b820183602082011115610a4057600080fd5b803590602001918460208302840111600160201b83111715610a6157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611ab6945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610adb578181015183820152602001610ac3565b505050509050019250505060405180910390f35b348015610afb57600080fd5b506103e360048036036060811015610b1257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610b3c57600080fd5b820183602082011115610b4e57600080fd5b803590602001918460208302840111600160201b83111715610b6f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610bbe57600080fd5b820183602082011115610bd057600080fd5b803590602001918460208302840111600160201b83111715610bf157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611ba2945050505050565b348015610c3b57600080fd5b506103e3611c01565b348015610c5057600080fd5b5061020460048036036080811015610c6757600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b811115610c9d57600080fd5b820183602082011115610caf57600080fd5b803590602001918460018302840111600160201b83111715610cd057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611cad945050505050565b348015610d1d57600080fd5b50610d26611d0e565b604080516001600160a01b039092168252519081900360200190f35b348015610d4e57600080fd5b506103e360048036036020811015610d6557600080fd5b810190602081018135600160201b811115610d7f57600080fd5b820183602082011115610d9157600080fd5b803590602001918460018302840111600160201b83111715610db257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611d1d945050505050565b348015610dff57600080fd5b506103e360048036036040811015610e1657600080fd5b506001600160a01b0381351690602001351515611d7a565b348015610e3a57600080fd5b5061020460048036036040811015610e5157600080fd5b506001600160a01b0381358116916020013516611e69565b348015610e7557600080fd5b506103e3600480360360a0811015610e8c57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b811115610ecb57600080fd5b820183602082011115610edd57600080fd5b803590602001918460018302840111600160201b83111715610efe57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ea9945050505050565b348015610f4b57600080fd5b506103e360048036036020811015610f6257600080fd5b50356001600160a01b0316612074565b348015610f7e57600080fd5b506103e360048036036060811015610f9557600080fd5b506001600160a01b038135169060208101359060400135612177565b60006001600160a01b038316610ff85760405162461bcd60e51b815260040180806020018281038252602b8152602001806138c7602b913960400191505060405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b6001600160e01b03191660009081526033602052604090205460ff1690565b60cc805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156110c85780601f1061109d576101008083540402835291602001916110c8565b820191906000526020600020905b8154815290600101906020018083116110ab57829003601f168201915b505050505081565b600054610100900460ff16806110e957506110e96121d6565b806110f7575060005460ff16155b6111325760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff1615801561115d576000805460ff1961ff0019909116610100171660011790555b6111656121e7565b61116e836122be565b6111778261195b565b835161118a9060cc906020870190613702565b5060cc8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815261122293909290918301828280156112185780601f106111ed57610100808354040283529160200191611218565b820191906000526020600020905b8154815290600101906020018083116111fb57829003601f168201915b5050505050612379565b8015611234576000805461ff00191690555b50505050565b6060611244613780565b50604080516060810182526001600160a01b038816600081815260cb602090815290849020548352820152908101869052611282878287878761240f565b6112bd5760405162461bcd60e51b8152600401808060200182810382526021815260200180613b0e6021913960400191505060405180910390fd5b6001600160a01b038716600081815260cb602090815260408083208054600101905580519384523384830181905260609185018281528b51928601929092528a517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b958d9592948d94919391926080850192918601918190849084905b8381101561135257818101518382015260200161133a565b50505050905090810190601f16801561137f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160006060306001600160a01b0316888a6040516020018083805190602001908083835b602083106113d05780518252601f1990920191602091820191016113b1565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160a01b031660601b8152601401925050506040516020818303038152906040526040518082805190602001908083835b602083106114465780518252601f199092019160209182019101611427565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146114a8576040519150601f19603f3d011682016040523d82523d6000602084013e6114ad565b606091505b509150915081611504576040805162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604482015290519081900360640190fd5b98975050505050505050565b60678054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561159c5780601f106115715761010080835404028352916020019161159c565b820191906000526020600020905b81548152906001019060200180831161157f57829003601f168201915b50505050509050919050565b604051806040016040528060018152602001603160f81b81525081565b6000806115d06124e9565b90506115db816119fd565b61161a576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b611626868686866124ed565b50600195945050505050565b60ca545b90565b6001600160a01b0316600090815260cb602052604090205490565b81518351146116945760405162461bcd60e51b8152600401808060200182810382526028815260200180613b816028913960400191505060405180910390fd5b6001600160a01b0384166116d95760405162461bcd60e51b8152600401808060200182810382526025815260200180613a1c6025913960400191505060405180910390fd5b6116e16124e9565b6001600160a01b0316856001600160a01b0316148061170c575061170c856117076124e9565b611e69565b6117475760405162461bcd60e51b8152600401808060200182810382526032815260200180613a416032913960400191505060405180910390fd5b60006117516124e9565b905061176181878787878761194f565b60005b845181101561186757600085828151811061177b57fe5b60200260200101519050600085838151811061179357fe5b60200260200101519050611800816040518060600160405280602a8152602001613ac4602a91396065600086815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020546127429092919063ffffffff16565b60008381526065602090815260408083206001600160a01b038e811685529252808320939093558a168152205461183790826127d9565b60009283526065602090815260408085206001600160a01b038c1686529091529092209190915550600101611764565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156118ed5781810151838201526020016118d5565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561192c578181015183820152602001611914565b5050505090500194505050505060405180910390a461194f818787878787612833565b505050505050565b4690565b60006119656124e9565b9050611970816119fd565b6119af576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b6001600160a01b038216600090815260c9602052604090205460ff16156119d5576119f9565b6001600160a01b038216600090815260c960205260409020805460ff191660011790555b5050565b6001600160a01b0316600090815260c9602052604090205460ff1690565b6000611a256124e9565b9050611a30816119fd565b611a6f576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b6001600160a01b038216600090815260c9602052604090205460ff16611a94576119f9565b506001600160a01b0316600090815260c960205260409020805460ff19169055565b60608151835114611af85760405162461bcd60e51b8152600401808060200182810382526029815260200180613b586029913960400191505060405180910390fd5b6060835167ffffffffffffffff81118015611b1257600080fd5b50604051908082528060200260200182016040528015611b3c578160200160208202803683370190505b50905060005b8451811015611b9a57611b7b858281518110611b5a57fe5b6020026020010151858381518110611b6e57fe5b6020026020010151610fb1565b828281518110611b8757fe5b6020908102919091010152600101611b42565b509392505050565b6000611bac6124e9565b9050611bb7816119fd565b611bf6576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b611234848484612ab2565b611c096124e9565b6001600160a01b0316611c1a611d0e565b6001600160a01b031614611c63576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b6097546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3609780546001600160a01b0319169055565b600080611cb86124e9565b9050611cc3816119fd565b611d02576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b61162686868686612d20565b6097546001600160a01b031690565b6000611d276124e9565b9050611d32816119fd565b611d71576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b6119f982612e21565b816001600160a01b0316611d8c6124e9565b6001600160a01b03161415611dd25760405162461bcd60e51b8152600401808060200182810382526029815260200180613b2f6029913960400191505060405180910390fd5b8060666000611ddf6124e9565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611e236124e9565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b60006001600160a01b03821673207fa8df3a17d96ca7ea4f2893fcdcb78a3041011415611e985750600161101d565b611ea28383612e34565b9392505050565b6001600160a01b038416611eee5760405162461bcd60e51b8152600401808060200182810382526025815260200180613a1c6025913960400191505060405180910390fd5b611ef66124e9565b6001600160a01b0316856001600160a01b03161480611f1c5750611f1c856117076124e9565b611f575760405162461bcd60e51b81526004018080602001828103825260298152602001806139ce6029913960400191505060405180910390fd5b6000611f616124e9565b9050611f81818787611f7288612e62565b611f7b88612e62565b8761194f565b611fc8836040518060600160405280602a8152602001613ac4602a913960008781526065602090815260408083206001600160a01b038d1684529091529020549190612742565b60008581526065602090815260408083206001600160a01b038b81168552925280832093909355871681522054611fff90846127d9565b60008581526065602090815260408083206001600160a01b03808b168086529184529382902094909455805188815291820187905280518a8416938616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a461194f818787878787612ea6565b61207c6124e9565b6001600160a01b031661208d611d0e565b6001600160a01b0316146120d6576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b6001600160a01b03811661211b5760405162461bcd60e51b81526004018080602001828103825260268152602001806139356026913960400191505060405180910390fd5b6097546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3609780546001600160a01b0319166001600160a01b0392909216919091179055565b60006121816124e9565b905061218c816119fd565b6121cb576040805162461bcd60e51b81526020600482018190526024820152600080516020613aee833981519152604482015290519081900360640190fd5b611234848484613017565b60006121e13061314a565b15905090565b600054610100900460ff168061220057506122006121d6565b8061220e575060005460ff16155b6122495760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff16158015612274576000805460ff1961ff0019909116610100171660011790555b61227c613150565b60006122866124e9565b6001600160a01b0316600090815260c960205260409020805460ff191660011790555080156122bb576000805461ff00191690555b50565b600054610100900460ff16806122d757506122d76121d6565b806122e5575060005460ff16155b6123205760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff1615801561234b576000805460ff1961ff0019909116610100171660011790555b612353613201565b61235b6132a1565b6123648261333e565b80156119f9576000805461ff00191690555050565b600054610100900460ff168061239257506123926121d6565b806123a0575060005460ff16155b6123db5760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff16158015612406576000805460ff1961ff0019909116610100171660011790555b612364826133f4565b60006001600160a01b0386166124565760405162461bcd60e51b81526004018080602001828103825260258152602001806139f76025913960400191505060405180910390fd5b6001612469612464876134b6565b613539565b83868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156124c0573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b3390565b6001600160a01b0384166125325760405162461bcd60e51b8152600401808060200182810382526021815260200180613ba96021913960400191505060405180910390fd5b81518351146125725760405162461bcd60e51b8152600401808060200182810382526028815260200180613b816028913960400191505060405180910390fd5b600061257c6124e9565b905061258d8160008787878761194f565b60005b845181101561265157612608606560008784815181106125ac57fe5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020548583815181106125f257fe5b60200260200101516127d990919063ffffffff16565b6065600087848151811061261857fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038b168252909252902055600101612590565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156126d85781810151838201526020016126c0565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156127175781810151838201526020016126ff565b5050505090500194505050505060405180910390a461273b81600087878787612833565b5050505050565b600081848411156127d15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561279657818101518382015260200161277e565b50505050905090810190601f1680156127c35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015611ea2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b612845846001600160a01b031661314a565b1561194f57836001600160a01b031663bc197c8187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156128d35781810151838201526020016128bb565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156129125781810151838201526020016128fa565b50505050905001848103825285818151815260200191508051906020019080838360005b8381101561294e578181015183820152602001612936565b50505050905090810190601f16801561297b5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156129a057600080fd5b505af19250505080156129c557506040513d60208110156129c057600080fd5b505160015b612a5a576129d16137c5565b806129dc5750612a23565b60405162461bcd60e51b815260206004820181815283516024840152835184939192839260440191908501908083836000831561279657818101518382015260200161277e565b60405162461bcd60e51b815260040180806020018281038252603481526020018061386b6034913960400191505060405180910390fd5b6001600160e01b0319811663bc197c8160e01b14612aa95760405162461bcd60e51b815260040180806020018281038252602881526020018061389f6028913960400191505060405180910390fd5b50505050505050565b6001600160a01b038316612af75760405162461bcd60e51b8152600401808060200182810382526023815260200180613aa16023913960400191505060405180910390fd5b8051825114612b375760405162461bcd60e51b8152600401808060200182810382526028815260200180613b816028913960400191505060405180910390fd5b6000612b416124e9565b9050612b618185600086866040518060200160405280600081525061194f565b60005b8351811015612c3f57612bf6838281518110612b7c57fe5b602002602001015160405180606001604052806024815260200161395b6024913960656000888681518110612bad57fe5b602002602001015181526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020546127429092919063ffffffff16565b60656000868481518110612c0657fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038a168252909252902055600101612b64565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015612cc6578181015183820152602001612cae565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015612d05578181015183820152602001612ced565b5050505090500194505050505060405180910390a450505050565b6001600160a01b038416612d655760405162461bcd60e51b8152600401808060200182810382526021815260200180613ba96021913960400191505060405180910390fd5b6000612d6f6124e9565b9050612d8181600087611f7288612e62565b60008481526065602090815260408083206001600160a01b0389168452909152902054612dae90846127d9565b60008581526065602090815260408083206001600160a01b03808b16808652918452828520959095558151898152928301889052815190948616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a461273b81600087878787612ea6565b80516119f9906067906020840190613702565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b604080516001808252818301909252606091829190602080830190803683370190505090508281600081518110612e9557fe5b602090810291909101015292915050565b612eb8846001600160a01b031661314a565b1561194f57836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612f47578181015183820152602001612f2f565b50505050905090810190601f168015612f745780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b158015612f9757600080fd5b505af1925050508015612fbc57506040513d6020811015612fb757600080fd5b505160015b612fc8576129d16137c5565b6001600160e01b0319811663f23a6e6160e01b14612aa95760405162461bcd60e51b815260040180806020018281038252602881526020018061389f6028913960400191505060405180910390fd5b6001600160a01b03831661305c5760405162461bcd60e51b8152600401808060200182810382526023815260200180613aa16023913960400191505060405180910390fd5b60006130666124e9565b90506130968185600061307887612e62565b61308187612e62565b6040518060200160405280600081525061194f565b6130dd8260405180606001604052806024815260200161395b6024913960008681526065602090815260408083206001600160a01b038b1684529091529020549190612742565b60008481526065602090815260408083206001600160a01b03808a16808652918452828520959095558151888152928301879052815193949093908616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a450505050565b3b151590565b600054610100900460ff168061316957506131696121d6565b80613177575060005460ff16155b6131b25760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff161580156131dd576000805460ff1961ff0019909116610100171660011790555b6131e5613201565b6131ed613585565b80156122bb576000805461ff001916905550565b600054610100900460ff168061321a575061321a6121d6565b80613228575060005460ff16155b6132635760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff161580156131ed576000805460ff1961ff00199091166101001716600117905580156122bb576000805461ff001916905550565b600054610100900460ff16806132ba57506132ba6121d6565b806132c8575060005460ff16155b6133035760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff1615801561332e576000805460ff1961ff0019909116610100171660011790555b6131ed6301ffc9a760e01b61367e565b600054610100900460ff168061335757506133576121d6565b80613365575060005460ff16155b6133a05760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff161580156133cb576000805460ff1961ff0019909116610100171660011790555b6133d482612e21565b6133e4636cdb3d1360e11b61367e565b6123646303a24d0760e21b61367e565b6040518060800160405280604f815260200161397f604f913980516020918201208251838301206040805180820190915260018152603160f81b930192909252907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc63061345f611957565b60001b60405160200180868152602001858152602001848152602001836001600160a01b03168152602001828152602001955050505050506040516020818303038152906040528051906020012060ca8190555050565b60006040518060800160405280604381526020016138f260439139805190602001208260000151836020015184604001518051906020012060405160200180858152602001848152602001836001600160a01b03168152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b6000613543611632565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b600054610100900460ff168061359e575061359e6121d6565b806135ac575060005460ff16155b6135e75760405162461bcd60e51b815260040180806020018281038252602e815260200180613a73602e913960400191505060405180910390fd5b600054610100900460ff16158015613612576000805460ff1961ff0019909116610100171660011790555b600061361c6124e9565b609780546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156122bb576000805461ff001916905550565b6001600160e01b031980821614156136dd576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152603360205260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061374357805160ff1916838001178555613770565b82800160010185558215613770579182015b82811115613770578251825591602001919060010190613755565b5061377c9291506137aa565b5090565b60405180606001604052806000815260200160006001600160a01b03168152602001606081525090565b5b8082111561377c57600081556001016137ab565b60e01c90565b600060443d10156137d557611636565b600481823e6308c379a06137e982516137bf565b146137f357611636565b6040513d600319016004823e80513d67ffffffffffffffff81602484011181841117156138235750505050611636565b8284019250825191508082111561383d5750505050611636565b503d8301602082840101111561385557505050611636565b601f01601f191681016020016040529150509056fe455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73455243313135353a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e6174757265294f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5349474e4552455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e736665724f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725369676e657220616e64207369676e617475726520646f206e6f74206d61746368455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368455243313135353a206d696e7420746f20746865207a65726f2061646472657373a2646970667358221220ba78251eaa45d276ee0908423a2a942826f0a596d8bb5c836846ede0deff0f1064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAddress(address)": {
        "details": "adds a given address to the whitelist",
        "params": {
          "_address": "address to add"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isWhitelisted(address)": {
        "details": "returns true if a given address is whitelisted, false if not",
        "params": {
          "_address": "address to check"
        },
        "returns": {
          "_0": "true if the address is whitelisted, false if not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAddress(address)": {
        "details": "removes a given address from the whitelist",
        "params": {
          "_address": "address to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1034,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1037,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2885,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 602,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 659,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1126,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1132,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1134,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 2127,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 465,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 584,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17846,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "whitelist",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17283,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "domainSeperator",
        "offset": 0,
        "slot": "202",
        "type": "t_bytes32"
      },
      {
        "astId": 17394,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "nonces",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17566,
        "contract": "contracts/utility/SyntheticNFT.sol:SyntheticNFT",
        "label": "name",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}