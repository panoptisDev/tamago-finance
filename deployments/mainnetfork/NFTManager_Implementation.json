{
  "address": "0xBC0dD6eBc1146E502A35E695Dd8DA0719d014a74",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "variantId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "PositionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "variantId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "PositionRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ROUTER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenValue",
          "type": "uint256"
        }
      ],
      "name": "addSyntheticVariant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralShare",
      "outputs": [
        {
          "internalType": "contract IPancakePair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralShareSymbol",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discountDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "estimateMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "estimateRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "forceMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "forceRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralSharePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSyntheticPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalCollatelizationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_nftUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_priceResolverAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralShareAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_collateralShareSymbol",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_syntheticSymbol",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_routerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPairAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offsetDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceResolver",
      "outputs": [
        {
          "internalType": "contract IPriceResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPairAmount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum NFTManager.ContractState",
          "name": "_state",
          "type": "uint8"
        }
      ],
      "name": "setContractState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setDiscountDisabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_multiplier",
          "type": "uint256"
        }
      ],
      "name": "setMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setNftUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setOffsetDisabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceResolverAddress",
          "type": "address"
        }
      ],
      "name": "setPriceResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setRedeemFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_syntheticNFT",
          "type": "address"
        }
      ],
      "name": "setSyntheticNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_disabled",
          "type": "bool"
        }
      ],
      "name": "setSyntheticVariantDisable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum NFTManager.ContractState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticNFT",
      "outputs": [
        {
          "internalType": "contract ISyntheticNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticSymbol",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticVariantCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "syntheticVariants",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRawCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOutstanding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalIssued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBurnt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "disabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        }
      ],
      "name": "targetCollatelizationRatio",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebtCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalOutstanding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRawCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        }
      ],
      "name": "variantCollatelizationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x67ace4d542193b345f9d5aa7be9656fa6192580dc7964c5e3750e90a7fc40d45",
  "receipt": {
    "to": null,
    "from": "0x27dDF44eC9E32343599F7B939e4c35c034f78076",
    "contractAddress": "0xBC0dD6eBc1146E502A35E695Dd8DA0719d014a74",
    "transactionIndex": 0,
    "gasUsed": "5277583",
    "logsBloom": "0x
    "blockHash": "0x9ed6ff04210bbf64b28fc569aa2d7fe4c2db11076f425293ced2fe875cce5517",
    "transactionHash": "0x67ace4d542193b345f9d5aa7be9656fa6192580dc7964c5e3750e90a7fc40d45",
    "logs": [],
    "blockNumber": 15908733,
    "cumulativeGasUsed": "5277583",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "10dfbe4ed68b85e88ef67ca1c7827bfc",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"variantId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"PositionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"variantId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"PositionRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenValue\",\"type\":\"uint256\"}],\"name\":\"addSyntheticVariant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralShare\",\"outputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralShareSymbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"estimateMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"estimateRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"forceMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"forceRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralSharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSyntheticPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalCollatelizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nftUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_priceResolverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralShareAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_collateralShareSymbol\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_syntheticSymbol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPairAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offsetDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceResolver\",\"outputs\":[{\"internalType\":\"contract IPriceResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPairAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTManager.ContractState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setContractState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setDiscountDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setNftUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setOffsetDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceResolverAddress\",\"type\":\"address\"}],\"name\":\"setPriceResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_syntheticNFT\",\"type\":\"address\"}],\"name\":\"setSyntheticNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_disabled\",\"type\":\"bool\"}],\"name\":\"setSyntheticVariantDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum NFTManager.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticNFT\",\"outputs\":[{\"internalType\":\"contract ISyntheticNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticSymbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticVariantCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"syntheticVariants\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRawCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOutstanding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBurnt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"targetCollatelizationRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRawCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"variantCollatelizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The contract heavily depends on 3rd party modules from QuickSwap, Chainlink to running. Check out docs.tamago.finance for more details\",\"kind\":\"dev\",\"methods\":{\"addAddress(address)\":{\"details\":\"adds a given address to the whitelist\",\"params\":{\"_address\":\"address to add\"}},\"estimateMint(uint8,uint256)\":{\"params\":{\"_id\":\"the NFT's variant id\",\"_tokenAmount\":\"total NFT to be created\"},\"returns\":{\"baseTokenAmount\":\"required amount of token0 on LP\",\"discount\":\"The discount if CR > 1\",\"lpAmount\":\"Estimated LP amount to be deposited as a collateral\",\"pairTokenAmount\":\"required amount of token1 on LP\"}},\"estimateRedeem(uint8,uint256)\":{\"params\":{\"_id\":\"the NFT's variant id\",\"_tokenAmount\":\"total NFT to be burnt\"},\"returns\":{\"baseTokenAmount\":\"redeemed amount of token0 on LP\",\"lpAmount\":\"Estimated LP amount to be withdrawn from Quickswap\",\"offset\":\"The offset fee when CR < 1\",\"pairTokenAmount\":\"redeemed amount of token1 on LP\"}},\"getCollateralSharePrice()\":{\"returns\":{\"_0\":\"US price per a LP token\"}},\"getSyntheticPrice()\":{\"returns\":{\"_0\":\"US price per a synthetic token\"}},\"globalCollatelizationRatio()\":{\"returns\":{\"_0\":\"the system collateral ratio\"}},\"initialize(string,string,address,address,bytes32,bytes32,address,address)\":{\"params\":{\"_collateralShareAddress\":\"the address of LP token to be used as a collateral\",\"_collateralShareSymbol\":\"the symbol of LP token that defined on the price registry\",\"_devAddress\":\"dev address\",\"_name\":\"name of the NFT collection\",\"_nftUri\":\"base uri for the ERC-1155 NFT\",\"_priceResolverAddress\":\"the address of the shared price feeder registry\",\"_syntheticSymbol\":\"the symbol of value-backed NFT that defined on the price registry\"}},\"isWhitelisted(address)\":{\"details\":\"returns true if a given address is whitelisted, false if not\",\"params\":{\"_address\":\"address to check\"},\"returns\":{\"_0\":\"true if the address is whitelisted, false if not\"}},\"mint(uint8,uint256,uint256,uint256)\":{\"params\":{\"_id\":\"the NFT's variant id\",\"_maxBaseAmount\":\"cap amount of token0 that can be sent out from the wallet\",\"_maxPairAmount\":\"cap amount of token1 that can be sent out from the wallet\",\"_tokenAmount\":\"total NFT to be created\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(uint8,uint256,uint256,uint256)\":{\"params\":{\"_id\":\"the NFT's variant id\",\"_minBaseAmount\":\"min. amount of token0 expects to receive\",\"_minPairAmount\":\"min. amount of token1 expects to receive\",\"_tokenAmount\":\"total NFT to be burnt\"}},\"removeAddress(address)\":{\"details\":\"removes a given address from the whitelist\",\"params\":{\"_address\":\"address to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"targetCollatelizationRatio(uint8)\":{\"params\":{\"_id\":\"the NFT's variant id\"},\"returns\":{\"_0\":\"the target ratio when CR < 1\",\"_1\":\"the target ratio when CR > 1\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"variantCollatelizationRatio(uint8)\":{\"params\":{\"_id\":\"the NFT's variant id\"},\"returns\":{\"_0\":\"the variant collateral ratio\"}}},\"title\":\"A contract to collaterizes ERC-20 and mints NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"estimateMint(uint8,uint256)\":{\"notice\":\"calculate amount of collateral assets to be placed for minting the NFT\"},\"estimateRedeem(uint8,uint256)\":{\"notice\":\"calcualte amount of collateral assets to be returned when burning NFT\"},\"getCollateralSharePrice()\":{\"notice\":\"call the price feeder registry to retrieve the latest price of LP token\"},\"getSyntheticPrice()\":{\"notice\":\"call the price feeder registry to retrieve the latest price of NFT\"},\"globalCollatelizationRatio()\":{\"notice\":\"looks for the system collateral ratio basically calculates from total collateral deposited / total NFT minted\"},\"initialize(string,string,address,address,bytes32,bytes32,address,address)\":{\"notice\":\"the contructor that requires necessary params to setup ERC-1155 contract\"},\"mint(uint8,uint256,uint256,uint256)\":{\"notice\":\"taking 2 tokens and adding them to Quickswap LP, the returned LP will be locked and be the variant's collateral for the NFT issuing\"},\"redeem(uint8,uint256,uint256,uint256)\":{\"notice\":\"burning NFT and returning collateral assets, the offset fee will be charged when CR < 1\"},\"targetCollatelizationRatio(uint8)\":{\"notice\":\"calculates the target ratio that we need to either leaving and giving away (as discount) some collaterals to help bring the ratio back to 1\"},\"variantCollatelizationRatio(uint8)\":{\"notice\":\"looks for the collateral ratio for particular variant\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTManager.sol\":\"NFTManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc6dbbc2f50a7c104377798a37b2acd1a41c1242544b0bb7a9a7c863f0520eb50\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x60ba1a103fd296c59818ec8254e137ac3f96c3cff6ad474290cce2f0011e82d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2392b21b331e4e51770afd96dae9d54337d78c10ad3b365b892f5849594d6a4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x68a2498b459518376db0497bce2344169497020cd95db90d76f8312e02c40ba0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xcbc02d192c55298cf65e5695375c839eac979a597a0fbdc1635195c4d28ca5ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8457e15aa90badabe0d6ef6f572f1ebd47bebf156921c825ae6e009dda15b706\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e\",\"license\":\"MIT\"},\"contracts/NFTManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./utility/LibMath.sol\\\";\\nimport \\\"./utility/WhitelistUpgradeable.sol\\\";\\nimport \\\"./utility/SyntheticNFT.sol\\\";\\nimport \\\"./interfaces/IPriceResolver.sol\\\";\\nimport \\\"./interfaces/INFTManager.sol\\\";\\nimport \\\"./interfaces/IPancakeRouter02.sol\\\";\\nimport \\\"./interfaces/IPancakeFactory.sol\\\";\\n\\n/**\\n * @title A contract to collaterizes ERC-20 and mints NFT\\n * @dev The contract heavily depends on 3rd party modules from QuickSwap, Chainlink to running. Check out docs.tamago.finance for more details\\n */\\n\\ncontract NFTManager is ReentrancyGuardUpgradeable, WhitelistUpgradeable, INFTManager {\\n    using LibMathSigned for int256;\\n    using LibMathUnsigned for uint256;\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    enum ContractState {\\n        INITIAL,\\n        NORMAL,\\n        EMERGENCY,\\n        EXPIRED\\n    }\\n\\n    struct SyntheticVariant {\\n        // name of the variant\\n        string name;\\n        // token id for this variant\\n        uint256 tokenId;\\n        // value\\n        uint256 tokenValue;\\n        // raw collateral on this variant\\n        uint256 totalRawCollateral;\\n        uint256 totalDebtCollateral;\\n        // total tokens that been minted\\n        uint256 totalOutstanding;\\n        // total tokens that been issued\\n        uint256 totalIssued;\\n        // total tokens that been burnt\\n        uint256 totalBurnt;\\n        // active status\\n        bool disabled;\\n    }\\n\\n    // Name of the contract\\n    string public name;\\n    // Contract state\\n    ContractState public state;\\n    // Price resolver contract.\\n    IPriceResolver public priceResolver;\\n    // Synthetic NFT created by this contract.\\n    ISyntheticNFT public override syntheticNFT;\\n    // Collateral share\\n    IPancakePair public override collateralShare;\\n    // Collateral share's symbol for price calculation\\n    bytes32 public collateralShareSymbol;\\n    // Target currency in the registry\\n    bytes32 public syntheticSymbol;\\n    // Synthetic NFT variants\\n    mapping(uint8 => SyntheticVariant) public syntheticVariants;\\n    // Total Synthetic NFT variants\\n    uint8 public syntheticVariantCount;\\n    // Total raw collateral\\n    uint256 public totalRawCollateral;\\n    uint256 public totalDebtCollateral;\\n    // Total NFT synthetics outstanding\\n    uint256 public totalOutstanding;\\n    // Dev address\\n    address public devAddress;\\n    // Redeem fee\\n    uint256 public redeemFee;\\n    // Ignore offset/discount fees when active\\n    bool public offsetDisabled;\\n    bool public discountDisabled;\\n    // Multiplier for discount/redeem fees\\n    uint256 public multiplier = 1 ether;\\n    // Router\\n    address public ROUTER_ADDRESS;\\n    // max NFT that can be minted per time\\n    uint256 constant MAX_NFT = 100;\\n\\n    uint256 constant ONE = 1 ether; // 1\\n    uint256 constant MAX_UINT256 = uint256(-1);\\n        // 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff; // Quickswap Router\\n    int256 constant BASE = 10 ether;\\n    int256 constant K = 9.3 ether;\\n\\n    event PositionCreated(\\n        address minter,\\n        uint8 variantId,\\n        uint256 tokenValue,\\n        uint256 collateralAmount,\\n        uint256 tokenAmount\\n    );\\n\\n    event PositionRemoved(\\n        address minter,\\n        uint8 variantId,\\n        uint256 tokenValue,\\n        uint256 collateralAmount,\\n        uint256 tokenAmount\\n    );\\n\\n    /// @notice the contructor that requires necessary params to setup ERC-1155 contract\\n    /// @param _name name of the NFT collection\\n    /// @param _nftUri base uri for the ERC-1155 NFT\\n    /// @param _priceResolverAddress the address of the shared price feeder registry\\n    /// @param _collateralShareAddress the address of LP token to be used as a collateral\\n    /// @param _collateralShareSymbol the symbol of LP token that defined on the price registry\\n    /// @param _syntheticSymbol the symbol of value-backed NFT that defined on the price registry\\n    /// @param _devAddress dev address\\n    function initialize(\\n        string memory _name,\\n        string memory _nftUri,\\n        address _priceResolverAddress,\\n        address _collateralShareAddress,\\n        bytes32 _collateralShareSymbol,\\n        bytes32 _syntheticSymbol,\\n        address _routerAddress,\\n        address _devAddress\\n    ) external initializer {\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        WhitelistUpgradeable.__Whitelist_init();\\n        name = _name;\\n        syntheticSymbol = _syntheticSymbol;\\n        state = ContractState.INITIAL;\\n        collateralShare = IPancakePair(_collateralShareAddress);\\n        collateralShareSymbol = _collateralShareSymbol;\\n\\n        priceResolver = IPriceResolver(_priceResolverAddress);\\n\\n        ROUTER_ADDRESS = _routerAddress;\\n\\n        redeemFee = 300; // 3.0%\\n\\n        devAddress = _devAddress;\\n\\n        // add dev into the whitelist\\n        addAddress(_devAddress);\\n\\n        if (_devAddress != msg.sender) {\\n            addAddress(msg.sender);\\n        }\\n\\n        if (collateralShare.token0() != address(0)) {\\n            IERC20Upgradeable(collateralShare.token0()).approve(\\n                ROUTER_ADDRESS,\\n                MAX_UINT256\\n            );\\n            IERC20Upgradeable(collateralShare.token1()).approve(\\n                ROUTER_ADDRESS,\\n                MAX_UINT256\\n            );\\n            IERC20Upgradeable(address(collateralShare)).approve(\\n                ROUTER_ADDRESS,\\n                MAX_UINT256\\n            );\\n        }\\n    }\\n\\n    /// @notice calculate amount of collateral assets to be placed for minting the NFT\\n    /// @param _id the NFT's variant id\\n    /// @param _tokenAmount total NFT to be created\\n    /// @return baseTokenAmount required amount of token0 on LP\\n    /// @return pairTokenAmount required amount of token1 on LP\\n    /// @return lpAmount Estimated LP amount to be deposited as a collateral\\n    /// @return discount The discount if CR > 1\\n    function estimateMint(uint8 _id, uint256 _tokenAmount)\\n        public\\n        view\\n        validateId(_id, _tokenAmount)\\n        returns (\\n            uint256 baseTokenAmount,\\n            uint256 pairTokenAmount,\\n            uint256 lpAmount,\\n            uint256 discount\\n        )\\n    {\\n        (baseTokenAmount, pairTokenAmount, lpAmount, discount) = _estimateMint(\\n            _id,\\n            _tokenAmount\\n        );\\n    }\\n\\n    /// @notice calcualte amount of collateral assets to be returned when burning NFT\\n    /// @param _id the NFT's variant id\\n    /// @param _tokenAmount total NFT to be burnt\\n    /// @return baseTokenAmount redeemed amount of token0 on LP\\n    /// @return pairTokenAmount redeemed amount of token1 on LP\\n    /// @return lpAmount Estimated LP amount to be withdrawn from Quickswap\\n    /// @return offset The offset fee when CR < 1\\n    function estimateRedeem(uint8 _id, uint256 _tokenAmount)\\n        public\\n        view\\n        validateId(_id, _tokenAmount)\\n        returns (\\n            uint256 baseTokenAmount,\\n            uint256 pairTokenAmount,\\n            uint256 lpAmount,\\n            uint256 offset\\n        )\\n    {\\n        (baseTokenAmount, pairTokenAmount, lpAmount, offset) = _estimateRedeem(\\n            _id,\\n            _tokenAmount\\n        );\\n    }\\n\\n    /// @notice taking 2 tokens and adding them to Quickswap LP, the returned LP will be locked and be the variant's collateral for the NFT issuing\\n    /// @param _id the NFT's variant id\\n    /// @param _tokenAmount total NFT to be created\\n    /// @param _maxBaseAmount cap amount of token0 that can be sent out from the wallet\\n    /// @param _maxPairAmount  cap amount of token1 that can be sent out from the wallet\\n    function mint(\\n        uint8 _id,\\n        uint256 _tokenAmount,\\n        uint256 _maxBaseAmount,\\n        uint256 _maxPairAmount\\n    ) public nonReentrant isReady validateId(_id, _tokenAmount) {\\n        (uint256 baseAmount, uint256 pairAmount, , ) = _estimateMint(\\n            _id,\\n            _tokenAmount\\n        );\\n\\n        require(_maxBaseAmount >= baseAmount, \\\"Exceeding _maxBaseAmount\\\");\\n        require(_maxPairAmount >= pairAmount, \\\"Exceeding _maxPairAmount\\\");\\n\\n        // takes ERC-20 tokens\\n        IERC20Upgradeable(collateralShare.token0()).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            baseAmount\\n        );\\n        IERC20Upgradeable(collateralShare.token1()).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            pairAmount\\n        );\\n\\n        (, , uint256 lpAmount) = IPancakeRouter02(ROUTER_ADDRESS).addLiquidity(\\n            collateralShare.token0(),\\n            collateralShare.token1(),\\n            baseAmount,\\n            pairAmount,\\n            0,\\n            0,\\n            address(this),\\n            now + 86400\\n        );\\n\\n        _createPosition(_id, lpAmount, _tokenAmount);\\n\\n        // mint NFT back to the minter\\n        syntheticNFT.mint(\\n            msg.sender,\\n            syntheticVariants[_id].tokenId,\\n            _tokenAmount,\\n            _toBytes(0)\\n        );\\n    }\\n\\n    /// @notice burning NFT and returning collateral assets, the offset fee will be charged when CR < 1\\n    /// @param _id the NFT's variant id\\n    /// @param _tokenAmount total NFT to be burnt\\n    /// @param _minBaseAmount min. amount of token0 expects to receive\\n    /// @param _minPairAmount min. amount of token1 expects to receive\\n    function redeem(\\n        uint8 _id,\\n        uint256 _tokenAmount,\\n        uint256 _minBaseAmount,\\n        uint256 _minPairAmount\\n    ) public nonReentrant isReady validateId(_id, _tokenAmount) {\\n        (, , uint256 lpAmount, ) = _estimateRedeem(_id, _tokenAmount);\\n\\n        _removePosition(_id, lpAmount, _tokenAmount);\\n\\n        // burn NFT\\n        syntheticNFT.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            syntheticVariants[_id].tokenId,\\n            _tokenAmount,\\n            _toBytes(0)\\n        );\\n        syntheticNFT.burn(\\n            address(this),\\n            syntheticVariants[_id].tokenId,\\n            _tokenAmount\\n        );\\n\\n        (uint256 baseTokenAmount, uint256 pairTokenAmount) = IPancakeRouter02(\\n            ROUTER_ADDRESS\\n        ).removeLiquidity(\\n                collateralShare.token0(),\\n                collateralShare.token1(),\\n                lpAmount,\\n                _minBaseAmount,\\n                _minPairAmount,\\n                address(this),\\n                now + 86400\\n            );\\n\\n        require(\\n            baseTokenAmount >= _minBaseAmount,\\n            \\\"_minBaseAmount is not reached\\\"\\n        );\\n        require(\\n            pairTokenAmount >= _minPairAmount,\\n            \\\"_minPairAmount is not reached\\\"\\n        );\\n\\n        // return tokens back\\n        if (redeemFee != 0) {\\n            uint256 baseFee = baseTokenAmount.mul(redeemFee).div(10000);\\n            uint256 pairFee = pairTokenAmount.mul(redeemFee).div(10000);\\n            IERC20Upgradeable(collateralShare.token0()).transfer(\\n                msg.sender,\\n                baseTokenAmount.sub(baseFee)\\n            );\\n            IERC20Upgradeable(collateralShare.token1()).transfer(\\n                msg.sender,\\n                pairTokenAmount.sub(pairFee)\\n            );\\n            // transfer fees to dev.\\n            IERC20Upgradeable(collateralShare.token0()).transfer(devAddress, baseFee);\\n            IERC20Upgradeable(collateralShare.token1()).transfer(devAddress, pairFee);\\n        } else {\\n            IERC20Upgradeable(collateralShare.token0()).transfer(\\n                msg.sender,\\n                baseTokenAmount\\n            );\\n            IERC20Upgradeable(collateralShare.token1()).transfer(\\n                msg.sender,\\n                pairTokenAmount\\n            );\\n        }\\n    }\\n\\n    /// @notice call the price feeder registry to retrieve the latest price of NFT\\n    /// @return US price per a synthetic token\\n    function getSyntheticPrice() public view returns (uint256) {\\n        require(\\n            priceResolver.isValid(syntheticSymbol),\\n            \\\"syntheticSymbol is not valid\\\"\\n        );\\n        return priceResolver.getCurrentPrice(syntheticSymbol);\\n    }\\n\\n    /// @notice call the price feeder registry to retrieve the latest price of LP token\\n    /// @return US price per a LP token\\n    function getCollateralSharePrice() public view returns (uint256) {\\n        require(\\n            priceResolver.isValid(collateralShareSymbol),\\n            \\\"collateralShareSymbol is not valid\\\"\\n        );\\n        return priceResolver.getCurrentPrice(collateralShareSymbol);\\n    }\\n\\n    /// @notice looks for the system collateral ratio basically calculates from total collateral deposited / total NFT minted\\n    /// @return the system collateral ratio\\n    function globalCollatelizationRatio() public view returns (uint256) {\\n        require(totalRawCollateral > 0, \\\"No collaterals in the contract\\\");\\n        return\\n            _calculateCollateralizationRatio(\\n                totalRawCollateral,\\n                totalOutstanding\\n            );\\n    }\\n\\n    /// @notice looks for the collateral ratio for particular variant\\n    /// @param _id the NFT's variant id\\n    /// @return the variant collateral ratio\\n    function variantCollatelizationRatio(uint8 _id)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(syntheticVariantCount > _id, \\\"Invalid given _id\\\");\\n\\n        if (syntheticVariants[_id].totalRawCollateral > 0) {\\n            return\\n                _calculateCollateralizationRatio(\\n                    syntheticVariants[_id].totalRawCollateral,\\n                    syntheticVariants[_id].totalOutstanding\\n                );\\n        } else {\\n            // return 100% when no collaterals\\n            return 1 ether;\\n        }\\n    }\\n\\n    /// @notice calculates the target ratio that we need to either leaving and giving away (as discount) some collaterals to help bring the ratio back to 1\\n    /// @param _id the NFT's variant id\\n    /// @return the target ratio when CR < 1\\n    /// @return the target ratio when CR > 1\\n    function targetCollatelizationRatio(uint8 _id)\\n        public\\n        view\\n        returns (int256, int256)\\n    {\\n        require(syntheticVariantCount > _id, \\\"Invalid given _id\\\");\\n        return (_calculateTargetCROffset(_id), _calculateTargetCRDiscount(_id));\\n    }\\n\\n    // ONLY ADMIN CAN PROCEED\\n\\n    // add NFT variant\\n    function addSyntheticVariant(\\n        string memory _name,\\n        uint256 _tokenId,\\n        uint256 _tokenValue\\n    ) public nonReentrant onlyWhitelisted {\\n        syntheticVariants[syntheticVariantCount].name = _name;\\n        syntheticVariants[syntheticVariantCount].tokenId = _tokenId;\\n        syntheticVariants[syntheticVariantCount].tokenValue = _tokenValue;\\n\\n        syntheticVariantCount += 1;\\n    }\\n\\n    function setSyntheticNFT(address _syntheticNFT) public nonReentrant onlyWhitelisted {\\n        require(_syntheticNFT != address(0), \\\"!address(0)\\\");\\n        syntheticNFT = ISyntheticNFT(_syntheticNFT);\\n    }\\n\\n    // enable/disable synthetic NFT variant\\n    function setSyntheticVariantDisable(uint8 _id, bool _disabled)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        require(syntheticVariantCount > _id, \\\"Invalid given _id\\\");\\n        syntheticVariants[_id].disabled = _disabled;\\n    }\\n\\n    // emergency withdraw ERC-20 tokens out of the contract\\n    function withdrawErc20(address _tokenAddress, uint256 _amount)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        IERC20Upgradeable(_tokenAddress).transfer(msg.sender, _amount);\\n    }\\n\\n    // force mint ERC-1155\\n    function forceMint(\\n        uint8 _id,\\n        uint256 _collateralAmount,\\n        uint256 _tokenAmount\\n    ) public nonReentrant onlyWhitelisted validateId(_id, _tokenAmount) {\\n        _createPosition(_id, _collateralAmount, _tokenAmount);\\n\\n        // take collaterals\\n        collateralShare.transferFrom(\\n            msg.sender,\\n            address(this),\\n            _collateralAmount\\n        );\\n\\n        // mint NFT back to the minter\\n        syntheticNFT.mint(\\n            msg.sender,\\n            syntheticVariants[_id].tokenId,\\n            _tokenAmount,\\n            _toBytes(0)\\n        );\\n    }\\n\\n    // force burn ERC-1155\\n    function forceRedeem(\\n        uint8 _id,\\n        uint256 _collateralAmount,\\n        uint256 _tokenAmount\\n    ) public nonReentrant onlyWhitelisted validateId(_id, _tokenAmount) {\\n        _removePosition(_id, _collateralAmount, _tokenAmount);\\n\\n        // burn NFT\\n        syntheticNFT.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            syntheticVariants[_id].tokenId,\\n            _tokenAmount,\\n            _toBytes(0)\\n        );\\n        syntheticNFT.burn(\\n            address(this),\\n            syntheticVariants[_id].tokenId,\\n            _tokenAmount\\n        );\\n\\n        // return collaterals back to the minter\\n        collateralShare.transfer(msg.sender, _collateralAmount);\\n    }\\n\\n    // set the multiplier for redeem fee/discount to help shift the ratio to the target faster\\n    function setMultiplier(uint256 _multiplier)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        require(_multiplier >= 0.5 ether, \\\"_multiplier must greater than 0.5\\\");\\n        multiplier = _multiplier;\\n    }\\n\\n    // update the contract state\\n    function setContractState(ContractState _state)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        state = _state;\\n    }\\n\\n    // update the price resolver contract\\n    function setPriceResolver(address _priceResolverAddress)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        priceResolver = IPriceResolver(_priceResolverAddress);\\n    }\\n\\n    // update dev address\\n    function setDevAddress(address _devAddress)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        devAddress = _devAddress;\\n    }\\n\\n    // update NFT uri\\n    function setNftUri(string memory _uri) public nonReentrant onlyWhitelisted {\\n        syntheticNFT.setUri(_uri);\\n    }\\n\\n    // update redeem fees\\n    function setRedeemFee(uint256 _fee) public nonReentrant onlyWhitelisted {\\n        redeemFee = _fee;\\n    }\\n\\n    // enable / disable offset fees\\n    function setOffsetDisabled(bool _active)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        offsetDisabled = _active;\\n    }\\n\\n    // enable / disable discount fees\\n    function setDiscountDisabled(bool _active)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        discountDisabled = _active;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    // Check if the state is ready\\n    modifier isReady() {\\n        require((state) == ContractState.NORMAL, \\\"Contract state is not ready\\\");\\n        _;\\n    }\\n\\n    modifier validateId(uint8 _id, uint256 _tokenAmount) {\\n        require(syntheticVariantCount > _id, \\\"Invalid given _id\\\");\\n        require(\\n            syntheticVariants[_id].disabled == false,\\n            \\\"The given _id is disabled\\\"\\n        );\\n        require(_tokenAmount != 0, \\\"_tokenAmount can't be zero\\\");\\n        require(MAX_NFT >= _tokenAmount, \\\"Exceed MAX_NFT\\\");\\n        _;\\n    }\\n\\n    function _toBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), x)\\n        }\\n    }\\n\\n    function _createPosition(\\n        uint8 _id,\\n        uint256 _collateralAmount,\\n        uint256 _tokenAmount\\n    ) internal {\\n        syntheticVariants[_id].totalOutstanding = syntheticVariants[_id].totalOutstanding.add(\\n            syntheticVariants[_id].tokenValue.mul(_tokenAmount)\\n        );\\n        syntheticVariants[_id].totalIssued = syntheticVariants[_id].totalIssued.add(_tokenAmount);\\n        syntheticVariants[_id].totalRawCollateral = syntheticVariants[_id].totalRawCollateral.add(_collateralAmount);\\n\\n        emit PositionCreated(\\n            msg.sender,\\n            _id,\\n            syntheticVariants[_id].tokenValue,\\n            _collateralAmount,\\n            _tokenAmount\\n        );\\n\\n        totalRawCollateral = totalRawCollateral.add(_collateralAmount);\\n        totalOutstanding = totalOutstanding.add(\\n            syntheticVariants[_id].tokenValue.mul(_tokenAmount)\\n        );\\n    }\\n\\n    function _removePosition(\\n        uint8 _id,\\n        uint256 _collateralAmount,\\n        uint256 _tokenAmount\\n    ) internal {\\n        syntheticVariants[_id].totalOutstanding = syntheticVariants[_id].totalOutstanding.sub(syntheticVariants[_id]\\n            .tokenValue\\n            .mul(_tokenAmount));\\n        syntheticVariants[_id].totalBurnt = syntheticVariants[_id].totalBurnt.add(_tokenAmount);\\n\\n        // record the debt\\n        if (_collateralAmount > syntheticVariants[_id].totalRawCollateral) {\\n            uint256 debt = _collateralAmount.sub(syntheticVariants[_id].totalRawCollateral);\\n            syntheticVariants[_id].totalDebtCollateral = syntheticVariants[_id].totalDebtCollateral.add(debt);\\n            totalDebtCollateral = totalDebtCollateral.add(debt);\\n            _collateralAmount = _collateralAmount.sub(debt);\\n        }\\n\\n        syntheticVariants[_id].totalRawCollateral = syntheticVariants[_id].totalRawCollateral.sub(_collateralAmount);\\n\\n        emit PositionRemoved(\\n            msg.sender,\\n            _id,\\n            syntheticVariants[_id].tokenValue,\\n            _collateralAmount,\\n            _tokenAmount\\n        );\\n\\n        totalRawCollateral = totalRawCollateral.sub(_collateralAmount);\\n        totalOutstanding = totalOutstanding.sub(syntheticVariants[_id].tokenValue.mul(_tokenAmount));\\n    }\\n\\n    function _calculateCollateralizationRatio(\\n        uint256 collateralAmount,\\n        uint256 syntheticAmount\\n    ) internal view returns (uint256) {\\n        uint256 collateralRate = priceResolver.getCurrentPrice(\\n            collateralShareSymbol\\n        );\\n        uint256 syntheticRate = priceResolver.getCurrentPrice(syntheticSymbol);\\n\\n        uint256 numerator = collateralRate.wmul(collateralAmount);\\n        uint256 denominator = syntheticRate.wmul(syntheticAmount);\\n\\n        uint256 output = (collateralRate.wdiv(syntheticRate)).wmul(\\n            collateralAmount.wdiv(syntheticAmount)\\n        );\\n        // uint256 output = (collateralRate.wdiv(syntheticRate)).mul(collateralAmount).div(syntheticAmount);\\n\\n        return numerator.wdiv(denominator);\\n        // return output;\\n    }\\n\\n    function _estimateLPInputs(uint8 _id, uint256 _tokenAmount)\\n        internal\\n        view\\n        returns (\\n            uint256 baseTokenAmount,\\n            uint256 pairTokenAmount,\\n            uint256 lpAmount\\n        )\\n    {\\n        uint256 syntheticPrice = priceResolver.getCurrentPrice(syntheticSymbol);\\n        uint256 sharePrice = priceResolver.getCurrentPrice(\\n            collateralShareSymbol\\n        );\\n        uint256 mintedValue = syntheticPrice.wmul(\\n            syntheticVariants[_id].tokenValue.mul(_tokenAmount)\\n        );\\n        uint256 lpNeeded = mintedValue.wdiv(sharePrice);\\n\\n        lpAmount = lpNeeded;\\n\\n        uint256 baseInLp = IERC20Upgradeable(collateralShare.token0()).balanceOf(\\n            address(collateralShare)\\n        );\\n        uint256 pairInLp = IERC20Upgradeable(collateralShare.token1()).balanceOf(\\n            address(collateralShare)\\n        );\\n\\n        baseTokenAmount = (lpNeeded.mul(baseInLp)).div(\\n            collateralShare.totalSupply()\\n        );\\n        pairTokenAmount = (lpNeeded.mul(pairInLp)).div(\\n            collateralShare.totalSupply()\\n        );\\n    }\\n\\n    function _estimateRedeem(uint8 _id, uint256 _tokenAmount)\\n        internal\\n        view\\n        returns (\\n            uint256 baseTokenAmount,\\n            uint256 pairTokenAmount,\\n            uint256 lpAmount,\\n            uint256 offset\\n        )\\n    {\\n        (baseTokenAmount, pairTokenAmount, lpAmount) = _estimateLPInputs(\\n            _id,\\n            _tokenAmount\\n        );\\n\\n        int256 targetCR = _calculateTargetCROffset(_id);\\n\\n        // adjusting redeemed amount when CR < 1\\n        if (targetCR != 1 ether && targetCR > 0 && offsetDisabled == false) {\\n            uint256 newTotalCollateral = syntheticVariants[_id]\\n                .totalRawCollateral\\n                .sub(lpAmount);\\n            uint256 newCR = _calculateCollateralizationRatio(\\n                newTotalCollateral,\\n                syntheticVariants[_id].totalOutstanding.sub(\\n                    syntheticVariants[_id].tokenValue.mul(_tokenAmount)\\n                )\\n            );\\n\\n            uint256 adjustedTotalCollateral = (\\n                (targetCR.toUint256()).wmul(newTotalCollateral)\\n            ).wdiv(newCR);\\n            if (adjustedTotalCollateral > newTotalCollateral) {\\n                offset = (adjustedTotalCollateral.sub(newTotalCollateral)).wmul(\\n                        lpAmount.wdiv(syntheticVariants[_id].totalRawCollateral)\\n                    );\\n                offset = offset.wmul(multiplier);\\n            }\\n\\n            uint256 lpAmountWithOffset = lpAmount.sub(offset);\\n\\n            baseTokenAmount = baseTokenAmount.mul(lpAmountWithOffset).div(\\n                lpAmount\\n            );\\n            pairTokenAmount = pairTokenAmount.mul(lpAmountWithOffset).div(\\n                lpAmount\\n            );\\n            lpAmount = lpAmountWithOffset;\\n        }\\n    }\\n\\n    function _estimateMint(uint8 _id, uint256 _tokenAmount)\\n        internal\\n        view\\n        returns (\\n            uint256 baseTokenAmount,\\n            uint256 pairTokenAmount,\\n            uint256 lpAmount,\\n            uint256 discount\\n        )\\n    {\\n        (baseTokenAmount, pairTokenAmount, lpAmount) = _estimateLPInputs(\\n            _id,\\n            _tokenAmount\\n        );\\n\\n        int256 targetCR = _calculateTargetCRDiscount(_id);\\n\\n        // adjusting minted amount when target CR > current CR > 1\\n        if (targetCR > 1 ether && discountDisabled == false) {\\n            uint256 newTotalCollateral = syntheticVariants[_id]\\n                .totalRawCollateral\\n                .add(lpAmount);\\n            uint256 newCR = _calculateCollateralizationRatio(\\n                newTotalCollateral,\\n                syntheticVariants[_id].totalOutstanding.add(\\n                    syntheticVariants[_id].tokenValue.mul(_tokenAmount)\\n                )\\n            );\\n\\n            uint256 adjustedTotalCollateral = (\\n                (targetCR.toUint256()).wmul(newTotalCollateral)\\n            ).wdiv(newCR);\\n\\n            if (newTotalCollateral > adjustedTotalCollateral) {\\n                discount = newTotalCollateral.sub(adjustedTotalCollateral).wmul(\\n                        lpAmount.wdiv(syntheticVariants[_id].totalRawCollateral)\\n                    );\\n                discount = discount.wmul(multiplier);\\n            }\\n\\n            uint256 lpAmountWithDiscount = lpAmount.sub(discount);\\n\\n            baseTokenAmount = baseTokenAmount.mul(lpAmountWithDiscount).div(\\n                lpAmount\\n            );\\n            pairTokenAmount = pairTokenAmount.mul(lpAmountWithDiscount).div(\\n                lpAmount\\n            );\\n            lpAmount = lpAmountWithDiscount;\\n        }\\n    }\\n\\n    // when cr is between 0 -> 1\\n    function _calculateTargetCROffset(uint8 _id)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 cr = variantCollatelizationRatio(_id).toInt256();\\n        int256 result = _calculateTargetCR(cr);\\n        if (cr > 0 && 1 ether >= result) {\\n            return result;\\n        } else {\\n            return 1 ether;\\n        }\\n    }\\n\\n    // when cr is between 1 -> infinity\\n    function _calculateTargetCRDiscount(uint8 _id)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 cr = variantCollatelizationRatio(_id).toInt256();\\n        int256 result = _calculateTargetCR(cr);\\n        if (cr > 1 ether && cr > result) {\\n            return _calculateTargetCR(cr);\\n        } else {\\n            return 1 ether;\\n        }\\n    }\\n\\n    // log^b(kx+1)\\n    function _calculateTargetCR(int256 _cr) internal pure returns (int256) {\\n        return BASE.logBase((K.wmul(_cr)).add(1 ether));\\n    }\\n}\\n\",\"keccak256\":\"0xb13082293ad703f7297f8419da837f8937e6ad97e87f970623b25d24cf172af8\",\"license\":\"MIT\"},\"contracts/interfaces/INFTManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IPancakePair.sol\\\";\\nimport \\\"./ISyntheticNFT.sol\\\";\\n\\ninterface INFTManager {\\n\\n    function syntheticNFT() external view returns (ISyntheticNFT);\\n\\n    function collateralShare() external view returns (IPancakePair);\\n\\n}\",\"keccak256\":\"0xa1407194441af97852eccb180c014fd9a1f21d18452c590fb24c0b7f3b02be24\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x5e58f3b4a78f2ead85a979d2d0c2578cbab1d5efdb561dd263060512db286cce\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xdbfdc6b4f3fc343f1b53d09d918bc7ff74b883bb22682536d4e4d7f675aa5662\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x4b7f70013990ca258c1fcdba9f968b9d47cdc08fc8ffa95835201313a9aaba8b\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\nimport './IPancakeRouter01.sol';\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x97e6fdb750ca6aa448db32b5e5da0cc4d49751c441716b5c51ac8a24ada3c8ad\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPriceResolver {\\n\\n    function getCurrentPrice(bytes32 _symbol) external view returns (uint256);\\n\\n    function isValid(bytes32 _symbol) external view returns (bool);\\n\\n}\",\"keccak256\":\"0x232582725ce67115d1b374c8bfa01b4123ec269f0743695a6ea37133f47ae26c\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticNFT.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface ISyntheticNFT is IERC1155Upgradeable {\\n\\n    function mint(address to, uint256 id, uint256 value, bytes memory data) external returns (bool);\\n\\n    function mintBatch(address to,  uint256[] memory ids, uint256[] memory values, bytes memory data) external returns (bool);\\n\\n    function burn(address owner, uint256 id, uint256 value) external;\\n\\n    function burnBatch( address owner, uint256[] memory ids, uint256[] memory values) external;\\n\\n    function setUri(string memory uri) external;\\n\\n}\",\"keccak256\":\"0x1f4fb3f5b06bb82c1c8a7484dc9dbb423e7fab36820c663362ebd21187e8242c\",\"license\":\"MIT\"},\"contracts/utility/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary LibMathSigned {\\n    int256 private constant _WAD = 10 ** 18;\\n    int256 private constant _INT256_MIN = -2 ** 255;\\n\\n    uint8 private constant FIXED_DIGITS = 18;\\n    int256 private constant FIXED_1 = 10 ** 18;\\n    int256 private constant FIXED_E = 2718281828459045235;\\n    uint8 private constant LONGER_DIGITS = 36;\\n    int256 private constant LONGER_FIXED_LOG_E_1_5 = 405465108108164381978013115464349137;\\n    int256 private constant LONGER_FIXED_1 = 10 ** 36;\\n    int256 private constant LONGER_FIXED_LOG_E_10 = 2302585092994045684017991454684364208;\\n\\n\\n    function WAD() internal pure returns (int256) {\\n        return _WAD;\\n    }\\n\\n    // additive inverse\\n    function neg(int256 a) internal pure returns (int256) {\\n        return sub(int256(0), a);\\n    }\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L13\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n        require(!(a == -1 && b == _INT256_MIN), \\\"wmultiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"wmultiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L32\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"wdivision by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"wdivision overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L44\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L54\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function wmul(int256 x, int256 y) internal pure returns (int256 z) {\\n        z = roundHalfUp(mul(x, y), _WAD) / _WAD;\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function wdiv(int256 x, int256 y) internal pure returns (int256 z) {\\n        if (y < 0) {\\n            y = -y;\\n            x = -x;\\n        }\\n        z = roundHalfUp(mul(x, _WAD), y) / y;\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function wfrac(int256 x, int256 y, int256 z) internal pure returns (int256 r) {\\n        int256 t = mul(x, y);\\n        if (z < 0) {\\n            z = neg(z);\\n            t = neg(t);\\n        }\\n        r = roundHalfUp(t, z) / z;\\n    }\\n\\n    function min(int256 x, int256 y) internal pure returns (int256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(int256 x, int256 y) internal pure returns (int256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    // see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/utils/SafeCast.sol#L103\\n    function toUint256(int256 x) internal pure returns (uint256) {\\n        require(x >= 0, \\\"int overflow\\\");\\n        return uint256(x);\\n    }\\n\\n    // x ^ n\\n    // NOTE: n is a normal integer, do not shift 18 decimals\\n    // solium-disable-next-line security/no-assign-params\\n    function wpowi(int256 x, int256 n) internal pure returns (int256 z) {\\n        require(n >= 0, \\\"wpowi only supports n >= 0\\\");\\n        z = n % 2 != 0 ? x : _WAD;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = wmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = wmul(z, x);\\n            }\\n        }\\n    }\\n\\n    // ROUND_HALF_UP rule helper. You have to call roundHalfUp(x, y) / y to finish the rounding operation\\n    // 0.5 \\u2248 1, 0.4 \\u2248 0, -0.5 \\u2248 -1, -0.4 \\u2248 0\\n    function roundHalfUp(int256 x, int256 y) internal pure returns (int256) {\\n        require(y > 0, \\\"roundHalfUp only supports y > 0\\\");\\n        if (x >= 0) {\\n            return add(x, y / 2);\\n        }\\n        return sub(x, y / 2);\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function wln(int256 x) internal pure returns (int256) {\\n        require(x > 0, \\\"logE of negative number\\\");\\n        require(x <= 10000000000000000000000000000000000000000, \\\"logE only accepts v <= 1e22 * 1e18\\\"); // in order to prevent using safe-math\\n        int256 r = 0;\\n        uint8 extraDigits = LONGER_DIGITS - FIXED_DIGITS;\\n        int256 t = int256(uint256(10)**uint256(extraDigits));\\n\\n        while (x <= FIXED_1 / 10) {\\n            x = x * 10;\\n            r -= LONGER_FIXED_LOG_E_10;\\n        }\\n        while (x >= 10 * FIXED_1) {\\n            x = x / 10;\\n            r += LONGER_FIXED_LOG_E_10;\\n        }\\n        while (x < FIXED_1) {\\n            x = wmul(x, FIXED_E);\\n            r -= LONGER_FIXED_1;\\n        }\\n        while (x > FIXED_E) {\\n            x = wdiv(x, FIXED_E);\\n            r += LONGER_FIXED_1;\\n        }\\n        if (x == FIXED_1) {\\n            return roundHalfUp(r, t) / t;\\n        }\\n        if (x == FIXED_E) {\\n            return FIXED_1 + roundHalfUp(r, t) / t;\\n        }\\n        x *= t;\\n\\n        //               x^2   x^3   x^4\\n        // Ln(1+x) = x - --- + --- - --- + ...\\n        //                2     3     4\\n        // when -1 < x < 1, O(x^n) < \\u03b5 => when n = 36, 0 < x < 0.316\\n        //\\n        //                    2    x           2    x          2    x\\n        // Ln(a+x) = Ln(a) + ---(------)^1  + ---(------)^3 + ---(------)^5 + ...\\n        //                    1   2a+x         3   2a+x        5   2a+x\\n        //\\n        // Let x = v - a\\n        //                  2   v-a         2   v-a        2   v-a\\n        // Ln(v) = Ln(a) + ---(-----)^1  + ---(-----)^3 + ---(-----)^5 + ...\\n        //                  1   v+a         3   v+a        5   v+a\\n        // when n = 36, 1 < v < 3.423\\n        r = r + LONGER_FIXED_LOG_E_1_5;\\n        int256 a1_5 = (3 * LONGER_FIXED_1) / 2;\\n        int256 m = (LONGER_FIXED_1 * (x - a1_5)) / (x + a1_5);\\n        r = r + 2 * m;\\n        int256 m2 = (m * m) / LONGER_FIXED_1;\\n        uint8 i = 3;\\n        while (true) {\\n            m = (m * m2) / LONGER_FIXED_1;\\n            r = r + (2 * m) / int256(i);\\n            i += 2;\\n            if (i >= 3 + 2 * FIXED_DIGITS) {\\n                break;\\n            }\\n        }\\n        return roundHalfUp(r, t) / t;\\n    }\\n\\n    // Log(b, x)\\n    function logBase(int256 base, int256 x) internal pure returns (int256) {\\n        return wdiv(wln(x), wln(base));\\n    }\\n\\n    function ceil(int256 x, int256 m) internal pure returns (int256) {\\n        require(x >= 0, \\\"ceil need x >= 0\\\");\\n        require(m > 0, \\\"ceil need m > 0\\\");\\n        return (sub(add(x, m), 1) / m) * m;\\n    }\\n}\\n\\n\\nlibrary LibMathUnsigned {\\n    uint256 private constant _WAD = 10**18;\\n    uint256 private constant _POSITIVE_INT256_MAX = 2**255 - 1;\\n\\n    function WAD() internal pure returns (uint256) {\\n        return _WAD;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L26\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"Unaddition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L55\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"Unsubtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L71\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"Unmultiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L111\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"Undivision by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), _WAD / 2) / _WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, _WAD), y / 2) / y;\\n    }\\n\\n    function wfrac(uint256 x, uint256 y, uint256 z) internal pure returns (uint256 r) {\\n        r = mul(x, y) / z;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function toInt256(uint256 x) internal pure returns (int256) {\\n        require(x <= _POSITIVE_INT256_MAX, \\\"uint256 overflow\\\");\\n        return int256(x);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L146\\n     */\\n    function mod(uint256 x, uint256 m) internal pure returns (uint256) {\\n        require(m != 0, \\\"mod by zero\\\");\\n        return x % m;\\n    }\\n\\n    function ceil(uint256 x, uint256 m) internal pure returns (uint256) {\\n        require(m > 0, \\\"ceil need m > 0\\\");\\n        return (sub(add(x, m), 1) / m) * m;\\n    }\\n}\\n\",\"keccak256\":\"0xbb5e9a3c47425a161108a8c2e591eb29d5a4b1350f6d5c0025d0a9f68aa301c2\",\"license\":\"MIT\"},\"contracts/utility/SyntheticNFT.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"./WhitelistUpgradeable.sol\\\";\\n\\n/**\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/EIP712Base.sol\\n */\\ncontract EIP712Base is Initializable {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    string constant public ERC712_VERSION = \\\"1\\\";\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n        )\\n    );\\n    bytes32 internal domainSeperator;\\n\\n    // supposed to be called once while initializing.\\n    // one of the contractsa that inherits this contract follows proxy pattern\\n    // so it is not possible to do this in a constructor\\n    function _initializeEIP712(\\n        string memory name\\n    )\\n        internal\\n        initializer\\n    {\\n        _setDomainSeperator(name);\\n    }\\n\\n    function _setDomainSeperator(string memory name) internal {\\n        domainSeperator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(ERC712_VERSION)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getDomainSeperator() public view returns (bytes32) {\\n        return domainSeperator;\\n    }\\n\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\n            );\\n    }\\n}\\n\\n/**\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/NativeMetaTransaction.sol\\n */\\ncontract NativeMetaTransaction is EIP712Base {\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n        )\\n    );\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address payable relayerAddress,\\n        bytes functionSignature\\n    );\\n    mapping(address => uint256) nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"Signer and signature do not match\\\"\\n        );\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] = nonces[userAddress] + 1;\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            payable(msg.sender),\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    META_TRANSACTION_TYPEHASH,\\n                    metaTx.nonce,\\n                    metaTx.from,\\n                    keccak256(metaTx.functionSignature)\\n                )\\n            );\\n    }\\n\\n    function getNonce(address user) public view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n        return\\n            signer ==\\n            ecrecover(\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\n                sigV,\\n                sigR,\\n                sigS\\n            );\\n    }\\n}\\n\\ncontract SyntheticNFT is ERC1155Upgradeable, WhitelistUpgradeable, NativeMetaTransaction {\\n\\n    // Contract name\\n    string public name;\\n\\n    function initialize(string memory name_, string memory uri, address _nftManager) external initializer {\\n        WhitelistUpgradeable.__Whitelist_init();\\n        ERC1155Upgradeable.__ERC1155_init(uri);\\n        addAddress(_nftManager);\\n        name = name_;\\n        _initializeEIP712(name);\\n    }\\n\\n    function mint(address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data)\\n        external\\n        onlyWhitelisted\\n        returns (bool)\\n    {\\n        _mint(to, id, value, data);\\n        return true;\\n    }\\n\\n    function mintBatch(\\n       address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) external onlyWhitelisted returns (bool) {\\n        _mintBatch(to, ids, values, data);\\n        return true;\\n    }\\n\\n    function burn(\\n        address owner,\\n        uint256 id,\\n        uint256 value\\n    )\\n        external\\n        onlyWhitelisted\\n    {\\n        _burn(owner, id, value);\\n    }\\n\\n    function burnBatch(\\n        address owner,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external onlyWhitelisted {\\n        _burnBatch(owner, ids, values);\\n    }\\n\\n    function setUri(string memory uri) external onlyWhitelisted {\\n        _setURI(uri);\\n    }\\n\\n     function isApprovedForAll(\\n        address _owner,\\n        address _operator\\n    ) public override view returns (bool isOperator) {\\n        if (_operator == address(0x207Fa8Df3a17D96Ca7EA4f2893fcdCb78a304101)) {\\n            return true;\\n        }\\n        \\n        return ERC1155Upgradeable.isApprovedForAll(_owner, _operator);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x474c9d9b0eca7bfc0640d6e398fc8e562ede94a308ec4b8e884a426c6eec23fa\",\"license\":\"MIT\"},\"contracts/utility/WhitelistUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev The contract manages a list of whitelisted addresses\\n */\\ncontract WhitelistUpgradeable is OwnableUpgradeable {\\n  using AddressUpgradeable for address;\\n\\n  mapping(address => bool) private whitelist;\\n\\n  function __Whitelist_init() internal initializer {\\n    OwnableUpgradeable.__Ownable_init();\\n    address msgSender = _msgSender();\\n    whitelist[msgSender] = true;\\n  }\\n\\n  /**\\n   * @dev returns true if a given address is whitelisted, false if not\\n   *\\n   * @param _address address to check\\n   *\\n   * @return true if the address is whitelisted, false if not\\n   */\\n  function isWhitelisted(address _address) public view returns (bool) {\\n    return whitelist[_address];\\n  }\\n\\n  modifier onlyWhitelisted() {\\n    address sender = _msgSender();\\n    require(isWhitelisted(sender), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev adds a given address to the whitelist\\n   *\\n   * @param _address address to add\\n   */\\n  function addAddress(address _address) public onlyWhitelisted {\\n    if (whitelist[_address])\\n      // checks if the address is already whitelisted\\n      return;\\n\\n    whitelist[_address] = true;\\n  }\\n\\n  /**\\n   * @dev removes a given address from the whitelist\\n   *\\n   * @param _address address to remove\\n   */\\n  function removeAddress(address _address) public onlyWhitelisted {\\n    if (!whitelist[_address])\\n      // checks if the address is actually whitelisted\\n      return;\\n\\n    whitelist[_address] = false;\\n  }\\n}\\n\",\"keccak256\":\"0x4ffd52746018b6f0708b38577236ae02a479b60a2a05fd8415f814d2f899eb42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a764000060a65534801561001c57600080fd5b50615e21806200002d6000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c8063759da3d111610167578063c19d93fb116100ce578063e26cdf2b11610087578063e26cdf2b146109f1578063ea12671c14610a10578063ea3aef5214610a18578063eda0701414610a20578063f2fde38b14610af2578063f7b4c18714610b18576102a0565b8063c19d93fb1461091c578063d0d41fe114610945578063d332ef431461096b578063d49de602146109a4578063d8e6e79b146109ac578063db3e2ecb146109d2576102a0565b80639e1d8644116101205780639e1d86441461081c578063b630d27914610848578063b94a6dfe14610894578063b97998481461089c578063bd1f4b52146108c4578063bdf46087146108f0576102a0565b8063759da3d1146107ac57806377ce33b3146107b45780637f377a73146107d2578063848374ec146107da5780638da5cb5b1461080c578063965fa21e14610814576102a0565b80633ad10ef61161020b57806351289539116101c457806351289539146106035780635d841af51461060b578063641579a61461062857806367b577641461064557806369e69bc31461064d578063715018a6146107a4576102a0565b80633ad10ef6146105975780633af32abf1461059f5780633f3d7db6146105c557806348a6fbd7146105cd5780634ba79dfe146105d55780634e15afdc146105fb576102a0565b8063237cfae81161025d578063237cfae8146103ba57806323cdcf151461046357806329e78dc0146104875780632a751e42146104a757806338c86f321461054b57806338eada1c14610571576102a0565b806306fdde03146102a5578063105de9451461032257806311ab3b341461034a57806316078d04146103665780631a1062d0146103805780631b3ed722146103b2575b600080fd5b6102ad610b38565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102e75781810151838201526020016102cf565b50505050905090810190601f1680156103145780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103486004803603602081101561033857600080fd5b50356001600160a01b0316610bc6565b005b610352610cd5565b604080519115158252519081900360200190f35b61036e610ce3565b60408051918252519081900360200190f35b6103486004803603608081101561039657600080fd5b5060ff8135169060208101359060408101359060600135610ce9565b61036e6118f8565b610348600480360360608110156103d057600080fd5b810190602081018135600160201b8111156103ea57600080fd5b8201836020820111156103fc57600080fd5b803590602001918460018302840111600160201b8311171561041d57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050823593505050602001356118fe565b61046b611a0e565b604080516001600160a01b039092168252519081900360200190f35b61036e6004803603602081101561049d57600080fd5b503560ff16611a1d565b610348600480360360208110156104bd57600080fd5b810190602081018135600160201b8111156104d757600080fd5b8201836020820111156104e957600080fd5b803590602001918460018302840111600160201b8311171561050a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ac9945050505050565b6103486004803603602081101561056157600080fd5b50356001600160a01b0316611c34565b6103486004803603602081101561058757600080fd5b50356001600160a01b0316611d00565b61046b611da2565b610352600480360360208110156105b557600080fd5b50356001600160a01b0316611db1565b61036e611dcf565b61036e611dd5565b610348600480360360208110156105eb57600080fd5b50356001600160a01b0316611ddb565b61046b611e76565b61036e611e8a565b6103486004803603602081101561062157600080fd5b5035611e90565b6103486004803603602081101561063e57600080fd5b5035611f39565b61036e612029565b610348600480360361010081101561066457600080fd5b810190602081018135600160201b81111561067e57600080fd5b82018360208201111561069057600080fd5b803590602001918460018302840111600160201b831117156106b157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561070357600080fd5b82018360208201111561071557600080fd5b803590602001918460018302840111600160201b8311171561073657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550505081356001600160a01b039081169350602083013581169260408101359250606081013591608082013581169160a0013516612094565b6103486124e4565b61046b612590565b6107bc61259f565b6040805160ff9092168252519081900360200190f35b61036e6125a8565b610348600480360360808110156107f057600080fd5b5060ff81351690602081013590604081013590606001356126ef565b61046b612d12565b61036e612d21565b6103486004803603606081101561083257600080fd5b5060ff8135169060208101359060400135612d27565b61086e6004803603604081101561085e57600080fd5b5060ff81351690602001356130b1565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61046b613209565b610348600480360360408110156108b257600080fd5b5060ff81351690602001351515613218565b610348600480360360408110156108da57600080fd5b506001600160a01b038135169060200135613334565b6103486004803603606081101561090657600080fd5b5060ff8135169060208101359060400135613457565b610924613823565b6040518082600381111561093457fe5b815260200191505060405180910390f35b6103486004803603602081101561095b57600080fd5b50356001600160a01b031661382c565b61098b6004803603602081101561098157600080fd5b503560ff166138f2565b6040805192835260208301919091528051918290030190f35b61036e613962565b61086e600480360360408110156109c257600080fd5b5060ff8135169060200135613a8e565b610348600480360360208110156109e857600080fd5b50351515613bd4565b61034860048036036020811015610a0757600080fd5b50351515613c92565b610352613d49565b61036e613d52565b610a4060048036036020811015610a3657600080fd5b503560ff16613d58565b60405180806020018a8152602001898152602001888152602001878152602001868152602001858152602001848152602001831515815260200182810382528b818151815260200191508051906020019080838360005b83811015610aaf578181015183820152602001610a97565b50505050905090810190601f168015610adc5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b61034860048036036020811015610b0857600080fd5b50356001600160a01b0316613e2f565b61034860048036036020811015610b2e57600080fd5b503560ff16613f32565b6098805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610bbe5780601f10610b9357610100808354040283529160200191610bbe565b820191906000526020600020905b815481529060010190602001808311610ba157829003601f168201915b505050505081565b60026001541415610c0c576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000610c1b613ff7565b9050610c2681611db1565b610c65576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6001600160a01b038216610cae576040805162461bcd60e51b815260206004820152600b60248201526a216164647265737328302960a81b604482015290519081900360640190fd5b50609a80546001600160a01b0319166001600160a01b039290921691909117905560018055565b60a554610100900460ff1681565b60a25481565b60026001541415610d2f576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b6002600190815560995460ff166003811115610d4757fe5b14610d99576040805162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374207374617465206973206e6f742072656164790000000000604482015290519081900360640190fd5b609f548490849060ff808416911611610ded576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152609e60205260409020600801541615610e45576040805162461bcd60e51b81526020600482015260196024820152600080516020615cec833981519152604482015290519081900360640190fd5b80610e85576040805162461bcd60e51b815260206004820152601a6024820152600080516020615da2833981519152604482015290519081900360640190fd5b8060641015610ecc576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b6000610ed88787613ffb565b5092505050610ee887828861416c565b609a5460ff88166000908152609e60205260408120600101546001600160a01b039092169163f242432a91339130918b90610f2290614346565b6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f98578181015183820152602001610f80565b50505050905090810190601f168015610fc55780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015610fe857600080fd5b505af1158015610ffc573d6000803e3d6000fd5b5050609a5460ff8a166000908152609e6020526040808220600101548151637a94c56560e11b81523060048201526024810191909152604481018c905290516001600160a01b03909316945063f5298aca93506064808201939182900301818387803b15801561106b57600080fd5b505af115801561107f573d6000803e3d6000fd5b505060a754609b5460408051630dfe168160e01b81529051600095508594506001600160a01b039384169363baa2abde931691630dfe1681916004808301926020929190829003018186803b1580156110d757600080fd5b505afa1580156110eb573d6000803e3d6000fd5b505050506040513d602081101561110157600080fd5b5051609b546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561114857600080fd5b505afa15801561115c573d6000803e3d6000fd5b505050506040513d602081101561117257600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201879052606482018b9052608482018a90523060a483015262015180420160c4830152805160e4808401938290030181600087803b1580156111e657600080fd5b505af11580156111fa573d6000803e3d6000fd5b505050506040513d604081101561121057600080fd5b508051602090910151909250905086821015611273576040805162461bcd60e51b815260206004820152601d60248201527f5f6d696e42617365416d6f756e74206973206e6f742072656163686564000000604482015290519081900360640190fd5b858110156112c8576040805162461bcd60e51b815260206004820152601d60248201527f5f6d696e50616972416d6f756e74206973206e6f742072656163686564000000604482015290519081900360640190fd5b60a454156117035760006112f36127106112ed60a4548661437090919063ffffffff16565b906143e8565b905060006113126127106112ed60a4548661437090919063ffffffff16565b9050609b60009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561136257600080fd5b505afa158015611376573d6000803e3d6000fd5b505050506040513d602081101561138c57600080fd5b50516001600160a01b031663a9059cbb336113a78786614447565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156113ed57600080fd5b505af1158015611401573d6000803e3d6000fd5b505050506040513d602081101561141757600080fd5b5050609b546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561145e57600080fd5b505afa158015611472573d6000803e3d6000fd5b505050506040513d602081101561148857600080fd5b50516001600160a01b031663a9059cbb336114a38685614447565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156114e957600080fd5b505af11580156114fd573d6000803e3d6000fd5b505050506040513d602081101561151357600080fd5b5050609b5460408051630dfe168160e01b815290516001600160a01b0390921691630dfe168191600480820192602092909190829003018186803b15801561155a57600080fd5b505afa15801561156e573d6000803e3d6000fd5b505050506040513d602081101561158457600080fd5b505160a3546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018690529051919092169163a9059cbb9160448083019260209291908290030181600087803b1580156115dc57600080fd5b505af11580156115f0573d6000803e3d6000fd5b505050506040513d602081101561160657600080fd5b5050609b546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561164d57600080fd5b505afa158015611661573d6000803e3d6000fd5b505050506040513d602081101561167757600080fd5b505160a3546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b1580156116cf57600080fd5b505af11580156116e3573d6000803e3d6000fd5b505050506040513d60208110156116f957600080fd5b506118e992505050565b609b60009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561175157600080fd5b505afa158015611765573d6000803e3d6000fd5b505050506040513d602081101561177b57600080fd5b50516040805163a9059cbb60e01b81523360048201526024810185905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b1580156117ce57600080fd5b505af11580156117e2573d6000803e3d6000fd5b505050506040513d60208110156117f857600080fd5b5050609b546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561183f57600080fd5b505afa158015611853573d6000803e3d6000fd5b505050506040513d602081101561186957600080fd5b50516040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b1580156118bc57600080fd5b505af11580156118d0573d6000803e3d6000fd5b505050506040513d60208110156118e657600080fd5b50505b50506001805550505050505050565b60a65481565b60026001541415611944576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000611953613ff7565b905061195e81611db1565b61199d576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b609f5460ff166000908152609e6020908152604090912085516119c292870190615bd8565b5050609f805460ff9081166000908152609e6020526040808220600190810196909655835483168252902060020192909255805460ff1981169083168401909216919091179055805550565b609a546001600160a01b031681565b609f5460009060ff808416911611611a70576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff82166000908152609e602052604090206003015415611ab95760ff82166000908152609e602052604090206003810154600590910154611ab2919061449d565b9050611ac4565b50670de0b6b3a76400005b919050565b60026001541415611b0f576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000611b1e613ff7565b9050611b2981611db1565b611b68576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b609a54604051639b642de160e01b81526020600482018181528551602484015285516001600160a01b0390941693639b642de193879383926044909201919085019080838360005b83811015611bc8578181015183820152602001611bb0565b50505050905090810190601f168015611bf55780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b158015611c1457600080fd5b505af1158015611c28573d6000803e3d6000fd5b50506001805550505050565b60026001541415611c7a576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000611c89613ff7565b9050611c9481611db1565b611cd3576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b50609980546001600160a01b0390921661010002610100600160a81b031990921691909117905560018055565b6000611d0a613ff7565b9050611d1581611db1565b611d54576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526097602052604090205460ff1615611d7a57611d9e565b6001600160a01b0382166000908152609760205260409020805460ff191660011790555b5050565b60a3546001600160a01b031681565b6001600160a01b031660009081526097602052604090205460ff1690565b60a05481565b609d5481565b6000611de5613ff7565b9050611df081611db1565b611e2f576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526097602052604090205460ff16611e5457611d9e565b506001600160a01b03166000908152609760205260409020805460ff19169055565b60995461010090046001600160a01b031681565b609c5481565b60026001541415611ed6576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000611ee5613ff7565b9050611ef081611db1565b611f2f576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b5060a45560018055565b60026001541415611f7f576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000611f8e613ff7565b9050611f9981611db1565b611fd8576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6706f05b59d3b2000082101561201f5760405162461bcd60e51b8152600401808060200182810382526021815260200180615ccb6021913960400191505060405180910390fd5b5060a65560018055565b60008060a05411612081576040805162461bcd60e51b815260206004820152601e60248201527f4e6f20636f6c6c61746572616c7320696e2074686520636f6e74726163740000604482015290519081900360640190fd5b61208f60a05460a25461449d565b905090565b600054610100900460ff16806120ad57506120ad6145fb565b806120bb575060005460ff16155b6120f65760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff16158015612121576000805460ff1961ff0019909116610100171660011790555b61212961460c565b6121316146b6565b88516121449060989060208c0190615bd8565b50609d84905560998054609b80546001600160a01b03199081166001600160a01b038b811691909117909255609c8990556001600160a81b03199092166101008b8316021790925560a78054821686841617905561012c60a45560a380549091169184169190911790556121b782611d00565b6001600160a01b03821633146121d0576121d033611d00565b609b5460408051630dfe168160e01b815290516000926001600160a01b031691630dfe1681916004808301926020929190829003018186803b15801561221557600080fd5b505afa158015612229573d6000803e3d6000fd5b505050506040513d602081101561223f57600080fd5b50516001600160a01b0316146124c757609b60009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561229d57600080fd5b505afa1580156122b1573d6000803e3d6000fd5b505050506040513d60208110156122c757600080fd5b505160a7546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561232057600080fd5b505af1158015612334573d6000803e3d6000fd5b505050506040513d602081101561234a57600080fd5b5050609b546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561239157600080fd5b505afa1580156123a5573d6000803e3d6000fd5b505050506040513d60208110156123bb57600080fd5b505160a7546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561241457600080fd5b505af1158015612428573d6000803e3d6000fd5b505050506040513d602081101561243e57600080fd5b5050609b5460a7546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561249a57600080fd5b505af11580156124ae573d6000803e3d6000fd5b505050506040513d60208110156124c457600080fd5b50505b80156124d9576000805461ff00191690555b505050505050505050565b6124ec613ff7565b6001600160a01b03166124fd612d12565b6001600160a01b031614612546576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b609b546001600160a01b031681565b609f5460ff1681565b609954609c5460408051636a93856760e01b815260048101929092525160009261010090046001600160a01b031691636a938567916024808301926020929190829003018186803b1580156125fc57600080fd5b505afa158015612610573d6000803e3d6000fd5b505050506040513d602081101561262657600080fd5b50516126635760405162461bcd60e51b8152600401808060200182810382526022815260200180615d806022913960400191505060405180910390fd5b609960019054906101000a90046001600160a01b03166001600160a01b031663161e444e609c546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156126be57600080fd5b505afa1580156126d2573d6000803e3d6000fd5b505050506040513d60208110156126e857600080fd5b5051905090565b60026001541415612735576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b6002600190815560995460ff16600381111561274d57fe5b1461279f576040805162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374207374617465206973206e6f742072656164790000000000604482015290519081900360640190fd5b609f548490849060ff8084169116116127f3576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152609e6020526040902060080154161561284b576040805162461bcd60e51b81526020600482015260196024820152600080516020615cec833981519152604482015290519081900360640190fd5b8061288b576040805162461bcd60e51b815260206004820152601a6024820152600080516020615da2833981519152604482015290519081900360640190fd5b80606410156128d2576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b6000806128df888861478c565b5050915091508186101561293a576040805162461bcd60e51b815260206004820152601860248201527f457863656564696e67205f6d617842617365416d6f756e740000000000000000604482015290519081900360640190fd5b8085101561298f576040805162461bcd60e51b815260206004820152601860248201527f457863656564696e67205f6d617850616972416d6f756e740000000000000000604482015290519081900360640190fd5b612a20333084609b60009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156129e357600080fd5b505afa1580156129f7573d6000803e3d6000fd5b505050506040513d6020811015612a0d57600080fd5b50516001600160a01b031692919061488c565b612a74333083609b60009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156129e357600080fd5b60a754609b5460408051630dfe168160e01b815290516000936001600160a01b039081169363e8e3370093911691630dfe168191600480820192602092909190829003018186803b158015612ac857600080fd5b505afa158015612adc573d6000803e3d6000fd5b505050506040513d6020811015612af257600080fd5b5051609b546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b158015612b3957600080fd5b505afa158015612b4d573d6000803e3d6000fd5b505050506040513d6020811015612b6357600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152604482018790526064820186905260006084830181905260a483018190523060c484015262015180420160e48401529051610104808401936060939083900390910190829087803b158015612be757600080fd5b505af1158015612bfb573d6000803e3d6000fd5b505050506040513d6060811015612c1157600080fd5b50604001519050612c2389828a6148ec565b609a5460ff8a166000908152609e60205260408120600101546001600160a01b039092169163731133e9913391908c90612c5c90614346565b6040518563ffffffff1660e01b815260040180856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612cc3578181015183820152602001612cab565b50505050905090810190601f168015612cf05780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156118bc57600080fd5b6065546001600160a01b031690565b60a45481565b60026001541415612d6d576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000612d7c613ff7565b9050612d8781611db1565b612dc6576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b609f548490839060ff808416911611612e1a576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152609e60205260409020600801541615612e72576040805162461bcd60e51b81526020600482015260196024820152600080516020615cec833981519152604482015290519081900360640190fd5b80612eb2576040805162461bcd60e51b815260206004820152601a6024820152600080516020615da2833981519152604482015290519081900360640190fd5b8060641015612ef9576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b612f048686866148ec565b609b54604080516323b872dd60e01b81523360048201523060248201526044810188905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015612f5e57600080fd5b505af1158015612f72573d6000803e3d6000fd5b505050506040513d6020811015612f8857600080fd5b5050609a5460ff87166000908152609e60205260408120600101546001600160a01b039092169163731133e9913391908890612fc390614346565b6040518563ffffffff1660e01b815260040180856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561302a578181015183820152602001613012565b50505050905090810190601f1680156130575780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561307957600080fd5b505af115801561308d573d6000803e3d6000fd5b505050506040513d60208110156130a357600080fd5b505060018055505050505050565b609f546000908190819081908690869060ff80841691161161310e576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152609e60205260409020600801541615613166576040805162461bcd60e51b81526020600482015260196024820152600080516020615cec833981519152604482015290519081900360640190fd5b806131a6576040805162461bcd60e51b815260206004820152601a6024820152600080516020615da2833981519152604482015290519081900360640190fd5b80606410156131ed576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b6131f78888613ffb565b929b919a509850909650945050505050565b60a7546001600160a01b031681565b6002600154141561325e576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b6002600155600061326d613ff7565b905061327881611db1565b6132b7576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b609f5460ff808516911611613307576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b5060ff919091166000908152609e60205260409020600801805460ff191691151591909117905560018055565b6002600154141561337a576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000613389613ff7565b905061339481611db1565b6133d3576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b0385169163a9059cbb9160448083019260209291908290030181600087803b15801561342257600080fd5b505af1158015613436573d6000803e3d6000fd5b505050506040513d602081101561344c57600080fd5b505060018055505050565b6002600154141561349d576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b600260015560006134ac613ff7565b90506134b781611db1565b6134f6576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b609f548490839060ff80841691161161354a576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152609e602052604090206008015416156135a2576040805162461bcd60e51b81526020600482015260196024820152600080516020615cec833981519152604482015290519081900360640190fd5b806135e2576040805162461bcd60e51b815260206004820152601a6024820152600080516020615da2833981519152604482015290519081900360640190fd5b8060641015613629576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b61363486868661416c565b609a5460ff87166000908152609e60205260408120600101546001600160a01b039092169163f242432a9133913091899061366e90614346565b6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156136e45781810151838201526020016136cc565b50505050905090810190601f1680156137115780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561373457600080fd5b505af1158015613748573d6000803e3d6000fd5b5050609a5460ff89166000908152609e6020526040808220600101548151637a94c56560e11b81523060048201526024810191909152604481018a905290516001600160a01b03909316945063f5298aca93506064808201939182900301818387803b1580156137b757600080fd5b505af11580156137cb573d6000803e3d6000fd5b5050609b546040805163a9059cbb60e01b8152336004820152602481018a905290516001600160a01b03909216935063a9059cbb92506044808201926020929091908290030181600087803b15801561307957600080fd5b60995460ff1681565b60026001541415613872576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000613881613ff7565b905061388c81611db1565b6138cb576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b5060a380546001600160a01b0319166001600160a01b039290921691909117905560018055565b609f54600090819060ff808516911611613947576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b61395083614a29565b61395984614a84565b91509150915091565b609954609d5460408051636a93856760e01b815260048101929092525160009261010090046001600160a01b031691636a938567916024808301926020929190829003018186803b1580156139b657600080fd5b505afa1580156139ca573d6000803e3d6000fd5b505050506040513d60208110156139e057600080fd5b5051613a33576040805162461bcd60e51b815260206004820152601c60248201527f73796e74686574696353796d626f6c206973206e6f742076616c696400000000604482015290519081900360640190fd5b609960019054906101000a90046001600160a01b03166001600160a01b031663161e444e609d546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156126be57600080fd5b609f546000908190819081908690869060ff808416911611613aeb576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152609e60205260409020600801541615613b43576040805162461bcd60e51b81526020600482015260196024820152600080516020615cec833981519152604482015290519081900360640190fd5b80613b83576040805162461bcd60e51b815260206004820152601a6024820152600080516020615da2833981519152604482015290519081900360640190fd5b8060641015613bca576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b6131f7888861478c565b60026001541415613c1a576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000613c29613ff7565b9050613c3481611db1565b613c73576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b5060a580549115156101000261ff001990921691909117905560018055565b60026001541415613cd8576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000613ce7613ff7565b9050613cf281611db1565b613d31576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b5060a5805460ff191691151591909117905560018055565b60a55460ff1681565b60a15481565b609e6020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015613def5780601f10613dc457610100808354040283529160200191613def565b820191906000526020600020905b815481529060010190602001808311613dd257829003601f168201915b50505060018401546002850154600386015460048701546005880154600689015460078a01546008909a0154989995989497509295509093909260ff1689565b613e37613ff7565b6001600160a01b0316613e48612d12565b6001600160a01b031614613e91576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6001600160a01b038116613ed65760405162461bcd60e51b8152600401808060200182810382526026815260200180615c836026913960400191505060405180910390fd5b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b60026001541415613f78576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000613f87613ff7565b9050613f9281611db1565b613fd1576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6099805483919060ff19166001836003811115613fea57fe5b0217905550506001805550565b3390565b60008060008061400b8686614acf565b91955093509150600061401d87614a29565b905080670de0b6b3a7640000141580156140375750600081135b8015614046575060a55460ff16155b156141625760ff87166000908152609e602052604081206003015461406b9085614447565b60ff89166000908152609e6020526040812060020154919250906140ba9083906140b590614099908c614370565b60ff8d166000908152609e602052604090206005015490614447565b61449d565b905060006140db826140d5856140cf88614f22565b90614f6c565b90614fa5565b90508281111561412e5760ff8a166000908152609e60205260409020600301546141149061410a908890614fa5565b6140cf8386614447565b945061412b60a65486614f6c90919063ffffffff16565b94505b600061413a8787614447565b905061414a876112ed8b84614370565b985061415a876112ed8a84614370565b975095505050505b5092959194509250565b60ff83166000908152609e60205260409020600201546141ac906141909083614370565b60ff85166000908152609e602052604090206005015490614447565b60ff84166000908152609e602052604090206005810191909155600701546141d49082614fc5565b60ff84166000908152609e602052604090206007810191909155600301548211156142715760ff83166000908152609e602052604081206003015461421a908490614447565b60ff85166000908152609e602052604090206004015490915061423d9082614fc5565b60ff85166000908152609e602052604090206004015560a1546142609082614fc5565b60a15561426d8382614447565b9250505b60ff83166000908152609e60205260409020600301546142919083614447565b60ff84166000818152609e60209081526040918290206003810194909455600290930154815133815293840192909252828101919091526060820184905260808201839052517f1d52264c290e444923399d71f1a1d34e37e52c16b4e85326d5accce8653f709f9181900360a00190a160a05461430e9083614447565b60a05560ff83166000908152609e602052604090206002015461433e906143359083614370565b60a25490614447565b60a255505050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60008261437f575060006143e2565b8282028284828161438c57fe5b04146143df576040805162461bcd60e51b815260206004820152601960248201527f556e6d756c7469706c69636174696f6e206f766572666c6f7700000000000000604482015290519081900360640190fd5b90505b92915050565b6000808211614433576040805162461bcd60e51b8152602060048201526012602482015271556e6469766973696f6e206279207a65726f60701b604482015290519081900360640190fd5b600082848161443e57fe5b04949350505050565b600082821115614497576040805162461bcd60e51b8152602060048201526016602482015275556e7375627472616374696f6e206f766572666c6f7760501b604482015290519081900360640190fd5b50900390565b600080609960019054906101000a90046001600160a01b03166001600160a01b031663161e444e609c546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156144fb57600080fd5b505afa15801561450f573d6000803e3d6000fd5b505050506040513d602081101561452557600080fd5b5051609954609d5460408051630b0f222760e11b81526004810192909252519293506000926101009092046001600160a01b03169163161e444e91602480820192602092909190829003018186803b15801561458057600080fd5b505afa158015614594573d6000803e3d6000fd5b505050506040513d60208110156145aa57600080fd5b5051905060006145ba8387614f6c565b905060006145c88387614f6c565b905060006145e36145d98989614fa5565b6140cf8787614fa5565b90506145ef8383614fa5565b98975050505050505050565b600061460630615015565b15905090565b600054610100900460ff168061462557506146256145fb565b80614633575060005460ff16155b61466e5760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff16158015614699576000805460ff1961ff0019909116610100171660011790555b6146a161501b565b80156146b3576000805461ff00191690555b50565b600054610100900460ff16806146cf57506146cf6145fb565b806146dd575060005460ff16155b6147185760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff16158015614743576000805460ff1961ff0019909116610100171660011790555b61474b6150c0565b6000614755613ff7565b6001600160a01b03166000908152609760205260409020805460ff191660011790555080156146b3576000805461ff001916905550565b60008060008061479c8686614acf565b9195509350915060006147ae87614a84565b9050670de0b6b3a7640000811380156147cf575060a554610100900460ff16155b156141625760ff87166000908152609e60205260408120600301546147f49085614fc5565b60ff89166000908152609e60205260408120600201549192509061483e9083906140b590614822908c614370565b60ff8d166000908152609e602052604090206005015490614fc5565b90506000614853826140d5856140cf88614f22565b90508083111561412e5760ff8a166000908152609e602052604090206003015461411490614882908890614fa5565b6140cf8584614447565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526148e690859061515d565b50505050565b60ff83166000908152609e602052604090206002015461492c906149109083614370565b60ff85166000908152609e602052604090206005015490614fc5565b60ff84166000908152609e602052604090206005810191909155600601546149549082614fc5565b60ff84166000908152609e6020526040902060068101919091556003015461497c9083614fc5565b60ff84166000818152609e60209081526040918290206003810194909455600290930154815133815293840192909252828101919091526060820184905260808201839052517ff7bd85d3f10229150829e8504450ec5e026df0879e5a690aa9a5cb6bab4a51d89181900360a00190a160a0546149f99083614fc5565b60a05560ff83166000908152609e602052604090206002015461433e90614a209083614370565b60a25490614fc5565b600080614a3d614a3884611a1d565b615213565b90506000614a4a82615264565b9050600082138015614a64575080670de0b6b3a764000012155b15614a72579150611ac49050565b670de0b6b3a764000092505050611ac4565b600080614a93614a3884611a1d565b90506000614aa082615264565b9050670de0b6b3a764000082138015614ab857508082135b15614a7257614ac682615264565b92505050611ac4565b600080600080609960019054906101000a90046001600160a01b03166001600160a01b031663161e444e609d546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015614b3057600080fd5b505afa158015614b44573d6000803e3d6000fd5b505050506040513d6020811015614b5a57600080fd5b5051609954609c5460408051630b0f222760e11b81526004810192909252519293506000926101009092046001600160a01b03169163161e444e91602480820192602092909190829003018186803b158015614bb557600080fd5b505afa158015614bc9573d6000803e3d6000fd5b505050506040513d6020811015614bdf57600080fd5b505160ff88166000908152609e602052604081206002015491925090614c1090614c099089614370565b8490614f6c565b90506000614c1e8284614fa5565b90508094506000609b60009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015614c7357600080fd5b505afa158015614c87573d6000803e3d6000fd5b505050506040513d6020811015614c9d57600080fd5b5051609b54604080516370a0823160e01b81526001600160a01b039283166004820152905191909216916370a08231916024808301926020929190829003018186803b158015614cec57600080fd5b505afa158015614d00573d6000803e3d6000fd5b505050506040513d6020811015614d1657600080fd5b5051609b546040805163d21220a760e01b815290519293506000926001600160a01b039092169163d21220a791600480820192602092909190829003018186803b158015614d6357600080fd5b505afa158015614d77573d6000803e3d6000fd5b505050506040513d6020811015614d8d57600080fd5b5051609b54604080516370a0823160e01b81526001600160a01b039283166004820152905191909216916370a08231916024808301926020929190829003018186803b158015614ddc57600080fd5b505afa158015614df0573d6000803e3d6000fd5b505050506040513d6020811015614e0657600080fd5b5051609b54604080516318160ddd60e01b81529051929350614e8a926001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b158015614e5457600080fd5b505afa158015614e68573d6000803e3d6000fd5b505050506040513d6020811015614e7e57600080fd5b50516112ed8585614370565b9850614f13609b60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614edd57600080fd5b505afa158015614ef1573d6000803e3d6000fd5b505050506040513d6020811015614f0757600080fd5b50516112ed8584614370565b97505050505050509250925092565b600080821215614f68576040805162461bcd60e51b815260206004820152600c60248201526b696e74206f766572666c6f7760a01b604482015290519081900360640190fd5b5090565b6000670de0b6b3a7640000614f96614f848585614370565b6002670de0b6b3a76400005b04614fc5565b81614f9d57fe5b049392505050565b600081614f96614fbd85670de0b6b3a7640000614370565b600285614f90565b6000828201838110156143df576040805162461bcd60e51b8152602060048201526013602482015272556e6164646974696f6e206f766572666c6f7760681b604482015290519081900360640190fd5b3b151590565b600054610100900460ff168061503457506150346145fb565b80615042575060005460ff16155b61507d5760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff161580156150a8576000805460ff1961ff0019909116610100171660011790555b6001805580156146b3576000805461ff001916905550565b600054610100900460ff16806150d957506150d96145fb565b806150e7575060005460ff16155b6151225760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff1615801561514d576000805460ff1961ff0019909116610100171660011790555b61515561529c565b6146a161533c565b60606151b2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166154359092919063ffffffff16565b80519091501561520e578080602001905160208110156151d157600080fd5b505161520e5760405162461bcd60e51b815260040180806020018281038252602a815260200180615dc2602a913960400191505060405180910390fd5b505050565b60006001600160ff1b03821115614f68576040805162461bcd60e51b815260206004820152601060248201526f75696e74323536206f766572666c6f7760801b604482015290519081900360640190fd5b60006143e261528d670de0b6b3a76400006152876781103cb9fb2200008661544e565b90615483565b678ac7230489e80000906154f2565b600054610100900460ff16806152b557506152b56145fb565b806152c3575060005460ff16155b6152fe5760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff161580156146a1576000805460ff1961ff00199091166101001716600117905580156146b3576000805461ff001916905550565b600054610100900460ff168061535557506153556145fb565b80615363575060005460ff16155b61539e5760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff161580156153c9576000805460ff1961ff0019909116610100171660011790555b60006153d3613ff7565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156146b3576000805461ff001916905550565b6060615444848460008561550e565b90505b9392505050565b6000670de0b6b3a7640000615474615466858561566a565b670de0b6b3a7640000615735565b8161547b57fe5b059392505050565b60008282018183128015906154985750838112155b806154ad57506000831280156154ad57508381125b6143df576040805162461bcd60e51b81526020600482015260116024820152706164646974696f6e206f766572666c6f7760781b604482015290519081900360640190fd5b60006143df615500836157b4565b615509856157b4565b615a8f565b60608247101561554f5760405162461bcd60e51b8152600401808060200182810382526026815260200180615d0c6026913960400191505060405180910390fd5b61555885615015565b6155a9576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106155e85780518252601f1990920191602091820191016155c9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461564a576040519150601f19603f3d011682016040523d82523d6000602084013e61564f565b606091505b509150915061565f828286615ac2565b979650505050505050565b600082615679575060006143e2565b8260001914801561568d5750600160ff1b82145b156156da576040805162461bcd60e51b8152602060048201526018602482015277776d756c7469706c69636174696f6e206f766572666c6f7760401b604482015290519081900360640190fd5b828202828482816156e757fe5b05146143df576040805162461bcd60e51b8152602060048201526018602482015277776d756c7469706c69636174696f6e206f766572666c6f7760401b604482015290519081900360640190fd5b600080821361578b576040805162461bcd60e51b815260206004820152601f60248201527f726f756e6448616c665570206f6e6c7920737570706f7274732079203e203000604482015290519081900360640190fd5b600083126157a7576157a08360028405615483565b90506143e2565b6143df8360028405615b66565b600080821361580a576040805162461bcd60e51b815260206004820152601760248201527f6c6f6745206f66206e65676174697665206e756d626572000000000000000000604482015290519081900360640190fd5b701d6329f1c35ca4bfabb9f561000000000082131561585a5760405162461bcd60e51b8152600401808060200182810382526022815260200180615ca96022913960400191505060405180910390fd5b60006012670de0b6b3a76400005b67016345785d8a000085136158975784600a0294506f01bb7635c5de48ef4ce5b7b41cc43db083039250615868565b678ac7230489e8000085126158c657600a850594506f01bb7635c5de48ef4ce5b7b41cc43db083019250615897565b670de0b6b3a7640000851215615903576158e8856725b946ebc0b3617361544e565b94506ec097ce7bc90715b34b9f1000000000830392506158c6565b6725b946ebc0b3617385131561594057615925856725b946ebc0b36173615a8f565b94506ec097ce7bc90715b34b9f100000000083019250615903565b670de0b6b3a764000085141561596d578061595b8483615735565b8161596257fe5b059350505050611ac4565b6725b946ebc0b361738514156159a457806159888483615735565b8161598f57fe5b05670de0b6b3a7640000019350505050611ac4565b938402936e4e16f927cdca7f15b39123f740f5d192909201916f0120e3b5b9ad8aa08cf16e980000000060008187016ec097ce7bc90715b34b9f10000000006f0120e3b5b9ad8aa08cf16e97ffffffff19890102816159ff57fe5b059050806002028501945060006ec097ce7bc90715b34b9f100000000082830281615a2657fe5b05905060035b6ec097ce7bc90715b34b9f10000000008383020592508060ff168360020281615a5157fe5b059690960195600201602760ff821610615a6a57615a6f565b615a2c565b84615a7a8887615735565b81615a8157fe5b059998505050505050505050565b600080821215615aa6578160000391508260000392505b81615474615abc85670de0b6b3a764000061566a565b84615735565b60608315615ad1575081615447565b825115615ae15782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615b2b578181015183820152602001615b13565b50505050905090810190601f168015615b585780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000818303818312801590615b7b5750838113155b80615b905750600083128015615b9057508381135b6143df576040805162461bcd60e51b81526020600482015260146024820152737375627472616374696f6e206f766572666c6f7760601b604482015290519081900360640190fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615c1957805160ff1916838001178555615c46565b82800160010185558215615c46579182015b82811115615c46578251825591602001919060010190615c2b565b50614f689291505b80821115614f685760008155600101615c4e56fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736c6f6745206f6e6c7920616363657074732076203c3d2031653232202a20316531385f6d756c7469706c696572206d7573742067726561746572207468616e20302e3554686520676976656e205f69642069732064697361626c656400000000000000416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572636f6c6c61746572616c536861726553796d626f6c206973206e6f742076616c69645f746f6b656e416d6f756e742063616e2774206265207a65726f0000000000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220e2231ec18ef5e12ce4d97430d0fd68341bda8ed69fbbf7a351ce233eb5ef0e4e64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102a05760003560e01c8063759da3d111610167578063c19d93fb116100ce578063e26cdf2b11610087578063e26cdf2b146109f1578063ea12671c14610a10578063ea3aef5214610a18578063eda0701414610a20578063f2fde38b14610af2578063f7b4c18714610b18576102a0565b8063c19d93fb1461091c578063d0d41fe114610945578063d332ef431461096b578063d49de602146109a4578063d8e6e79b146109ac578063db3e2ecb146109d2576102a0565b80639e1d8644116101205780639e1d86441461081c578063b630d27914610848578063b94a6dfe14610894578063b97998481461089c578063bd1f4b52146108c4578063bdf46087146108f0576102a0565b8063759da3d1146107ac57806377ce33b3146107b45780637f377a73146107d2578063848374ec146107da5780638da5cb5b1461080c578063965fa21e14610814576102a0565b80633ad10ef61161020b57806351289539116101c457806351289539146106035780635d841af51461060b578063641579a61461062857806367b577641461064557806369e69bc31461064d578063715018a6146107a4576102a0565b80633ad10ef6146105975780633af32abf1461059f5780633f3d7db6146105c557806348a6fbd7146105cd5780634ba79dfe146105d55780634e15afdc146105fb576102a0565b8063237cfae81161025d578063237cfae8146103ba57806323cdcf151461046357806329e78dc0146104875780632a751e42146104a757806338c86f321461054b57806338eada1c14610571576102a0565b806306fdde03146102a5578063105de9451461032257806311ab3b341461034a57806316078d04146103665780631a1062d0146103805780631b3ed722146103b2575b600080fd5b6102ad610b38565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102e75781810151838201526020016102cf565b50505050905090810190601f1680156103145780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103486004803603602081101561033857600080fd5b50356001600160a01b0316610bc6565b005b610352610cd5565b604080519115158252519081900360200190f35b61036e610ce3565b60408051918252519081900360200190f35b6103486004803603608081101561039657600080fd5b5060ff8135169060208101359060408101359060600135610ce9565b61036e6118f8565b610348600480360360608110156103d057600080fd5b810190602081018135600160201b8111156103ea57600080fd5b8201836020820111156103fc57600080fd5b803590602001918460018302840111600160201b8311171561041d57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050823593505050602001356118fe565b61046b611a0e565b604080516001600160a01b039092168252519081900360200190f35b61036e6004803603602081101561049d57600080fd5b503560ff16611a1d565b610348600480360360208110156104bd57600080fd5b810190602081018135600160201b8111156104d757600080fd5b8201836020820111156104e957600080fd5b803590602001918460018302840111600160201b8311171561050a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ac9945050505050565b6103486004803603602081101561056157600080fd5b50356001600160a01b0316611c34565b6103486004803603602081101561058757600080fd5b50356001600160a01b0316611d00565b61046b611da2565b610352600480360360208110156105b557600080fd5b50356001600160a01b0316611db1565b61036e611dcf565b61036e611dd5565b610348600480360360208110156105eb57600080fd5b50356001600160a01b0316611ddb565b61046b611e76565b61036e611e8a565b6103486004803603602081101561062157600080fd5b5035611e90565b6103486004803603602081101561063e57600080fd5b5035611f39565b61036e612029565b610348600480360361010081101561066457600080fd5b810190602081018135600160201b81111561067e57600080fd5b82018360208201111561069057600080fd5b803590602001918460018302840111600160201b831117156106b157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561070357600080fd5b82018360208201111561071557600080fd5b803590602001918460018302840111600160201b8311171561073657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550505081356001600160a01b039081169350602083013581169260408101359250606081013591608082013581169160a0013516612094565b6103486124e4565b61046b612590565b6107bc61259f565b6040805160ff9092168252519081900360200190f35b61036e6125a8565b610348600480360360808110156107f057600080fd5b5060ff81351690602081013590604081013590606001356126ef565b61046b612d12565b61036e612d21565b6103486004803603606081101561083257600080fd5b5060ff8135169060208101359060400135612d27565b61086e6004803603604081101561085e57600080fd5b5060ff81351690602001356130b1565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61046b613209565b610348600480360360408110156108b257600080fd5b5060ff81351690602001351515613218565b610348600480360360408110156108da57600080fd5b506001600160a01b038135169060200135613334565b6103486004803603606081101561090657600080fd5b5060ff8135169060208101359060400135613457565b610924613823565b6040518082600381111561093457fe5b815260200191505060405180910390f35b6103486004803603602081101561095b57600080fd5b50356001600160a01b031661382c565b61098b6004803603602081101561098157600080fd5b503560ff166138f2565b6040805192835260208301919091528051918290030190f35b61036e613962565b61086e600480360360408110156109c257600080fd5b5060ff8135169060200135613a8e565b610348600480360360208110156109e857600080fd5b50351515613bd4565b61034860048036036020811015610a0757600080fd5b50351515613c92565b610352613d49565b61036e613d52565b610a4060048036036020811015610a3657600080fd5b503560ff16613d58565b60405180806020018a8152602001898152602001888152602001878152602001868152602001858152602001848152602001831515815260200182810382528b818151815260200191508051906020019080838360005b83811015610aaf578181015183820152602001610a97565b50505050905090810190601f168015610adc5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b61034860048036036020811015610b0857600080fd5b50356001600160a01b0316613e2f565b61034860048036036020811015610b2e57600080fd5b503560ff16613f32565b6098805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610bbe5780601f10610b9357610100808354040283529160200191610bbe565b820191906000526020600020905b815481529060010190602001808311610ba157829003601f168201915b505050505081565b60026001541415610c0c576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000610c1b613ff7565b9050610c2681611db1565b610c65576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6001600160a01b038216610cae576040805162461bcd60e51b815260206004820152600b60248201526a216164647265737328302960a81b604482015290519081900360640190fd5b50609a80546001600160a01b0319166001600160a01b039290921691909117905560018055565b60a554610100900460ff1681565b60a25481565b60026001541415610d2f576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b6002600190815560995460ff166003811115610d4757fe5b14610d99576040805162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374207374617465206973206e6f742072656164790000000000604482015290519081900360640190fd5b609f548490849060ff808416911611610ded576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152609e60205260409020600801541615610e45576040805162461bcd60e51b81526020600482015260196024820152600080516020615cec833981519152604482015290519081900360640190fd5b80610e85576040805162461bcd60e51b815260206004820152601a6024820152600080516020615da2833981519152604482015290519081900360640190fd5b8060641015610ecc576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b6000610ed88787613ffb565b5092505050610ee887828861416c565b609a5460ff88166000908152609e60205260408120600101546001600160a01b039092169163f242432a91339130918b90610f2290614346565b6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f98578181015183820152602001610f80565b50505050905090810190601f168015610fc55780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015610fe857600080fd5b505af1158015610ffc573d6000803e3d6000fd5b5050609a5460ff8a166000908152609e6020526040808220600101548151637a94c56560e11b81523060048201526024810191909152604481018c905290516001600160a01b03909316945063f5298aca93506064808201939182900301818387803b15801561106b57600080fd5b505af115801561107f573d6000803e3d6000fd5b505060a754609b5460408051630dfe168160e01b81529051600095508594506001600160a01b039384169363baa2abde931691630dfe1681916004808301926020929190829003018186803b1580156110d757600080fd5b505afa1580156110eb573d6000803e3d6000fd5b505050506040513d602081101561110157600080fd5b5051609b546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561114857600080fd5b505afa15801561115c573d6000803e3d6000fd5b505050506040513d602081101561117257600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201879052606482018b9052608482018a90523060a483015262015180420160c4830152805160e4808401938290030181600087803b1580156111e657600080fd5b505af11580156111fa573d6000803e3d6000fd5b505050506040513d604081101561121057600080fd5b508051602090910151909250905086821015611273576040805162461bcd60e51b815260206004820152601d60248201527f5f6d696e42617365416d6f756e74206973206e6f742072656163686564000000604482015290519081900360640190fd5b858110156112c8576040805162461bcd60e51b815260206004820152601d60248201527f5f6d696e50616972416d6f756e74206973206e6f742072656163686564000000604482015290519081900360640190fd5b60a454156117035760006112f36127106112ed60a4548661437090919063ffffffff16565b906143e8565b905060006113126127106112ed60a4548661437090919063ffffffff16565b9050609b60009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561136257600080fd5b505afa158015611376573d6000803e3d6000fd5b505050506040513d602081101561138c57600080fd5b50516001600160a01b031663a9059cbb336113a78786614447565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156113ed57600080fd5b505af1158015611401573d6000803e3d6000fd5b505050506040513d602081101561141757600080fd5b5050609b546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561145e57600080fd5b505afa158015611472573d6000803e3d6000fd5b505050506040513d602081101561148857600080fd5b50516001600160a01b031663a9059cbb336114a38685614447565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156114e957600080fd5b505af11580156114fd573d6000803e3d6000fd5b505050506040513d602081101561151357600080fd5b5050609b5460408051630dfe168160e01b815290516001600160a01b0390921691630dfe168191600480820192602092909190829003018186803b15801561155a57600080fd5b505afa15801561156e573d6000803e3d6000fd5b505050506040513d602081101561158457600080fd5b505160a3546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018690529051919092169163a9059cbb9160448083019260209291908290030181600087803b1580156115dc57600080fd5b505af11580156115f0573d6000803e3d6000fd5b505050506040513d602081101561160657600080fd5b5050609b546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561164d57600080fd5b505afa158015611661573d6000803e3d6000fd5b505050506040513d602081101561167757600080fd5b505160a3546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b1580156116cf57600080fd5b505af11580156116e3573d6000803e3d6000fd5b505050506040513d60208110156116f957600080fd5b506118e992505050565b609b60009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561175157600080fd5b505afa158015611765573d6000803e3d6000fd5b505050506040513d602081101561177b57600080fd5b50516040805163a9059cbb60e01b81523360048201526024810185905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b1580156117ce57600080fd5b505af11580156117e2573d6000803e3d6000fd5b505050506040513d60208110156117f857600080fd5b5050609b546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561183f57600080fd5b505afa158015611853573d6000803e3d6000fd5b505050506040513d602081101561186957600080fd5b50516040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b1580156118bc57600080fd5b505af11580156118d0573d6000803e3d6000fd5b505050506040513d60208110156118e657600080fd5b50505b50506001805550505050505050565b60a65481565b60026001541415611944576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000611953613ff7565b905061195e81611db1565b61199d576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b609f5460ff166000908152609e6020908152604090912085516119c292870190615bd8565b5050609f805460ff9081166000908152609e6020526040808220600190810196909655835483168252902060020192909255805460ff1981169083168401909216919091179055805550565b609a546001600160a01b031681565b609f5460009060ff808416911611611a70576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff82166000908152609e602052604090206003015415611ab95760ff82166000908152609e602052604090206003810154600590910154611ab2919061449d565b9050611ac4565b50670de0b6b3a76400005b919050565b60026001541415611b0f576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000611b1e613ff7565b9050611b2981611db1565b611b68576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b609a54604051639b642de160e01b81526020600482018181528551602484015285516001600160a01b0390941693639b642de193879383926044909201919085019080838360005b83811015611bc8578181015183820152602001611bb0565b50505050905090810190601f168015611bf55780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b158015611c1457600080fd5b505af1158015611c28573d6000803e3d6000fd5b50506001805550505050565b60026001541415611c7a576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000611c89613ff7565b9050611c9481611db1565b611cd3576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b50609980546001600160a01b0390921661010002610100600160a81b031990921691909117905560018055565b6000611d0a613ff7565b9050611d1581611db1565b611d54576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526097602052604090205460ff1615611d7a57611d9e565b6001600160a01b0382166000908152609760205260409020805460ff191660011790555b5050565b60a3546001600160a01b031681565b6001600160a01b031660009081526097602052604090205460ff1690565b60a05481565b609d5481565b6000611de5613ff7565b9050611df081611db1565b611e2f576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526097602052604090205460ff16611e5457611d9e565b506001600160a01b03166000908152609760205260409020805460ff19169055565b60995461010090046001600160a01b031681565b609c5481565b60026001541415611ed6576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000611ee5613ff7565b9050611ef081611db1565b611f2f576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b5060a45560018055565b60026001541415611f7f576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000611f8e613ff7565b9050611f9981611db1565b611fd8576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6706f05b59d3b2000082101561201f5760405162461bcd60e51b8152600401808060200182810382526021815260200180615ccb6021913960400191505060405180910390fd5b5060a65560018055565b60008060a05411612081576040805162461bcd60e51b815260206004820152601e60248201527f4e6f20636f6c6c61746572616c7320696e2074686520636f6e74726163740000604482015290519081900360640190fd5b61208f60a05460a25461449d565b905090565b600054610100900460ff16806120ad57506120ad6145fb565b806120bb575060005460ff16155b6120f65760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff16158015612121576000805460ff1961ff0019909116610100171660011790555b61212961460c565b6121316146b6565b88516121449060989060208c0190615bd8565b50609d84905560998054609b80546001600160a01b03199081166001600160a01b038b811691909117909255609c8990556001600160a81b03199092166101008b8316021790925560a78054821686841617905561012c60a45560a380549091169184169190911790556121b782611d00565b6001600160a01b03821633146121d0576121d033611d00565b609b5460408051630dfe168160e01b815290516000926001600160a01b031691630dfe1681916004808301926020929190829003018186803b15801561221557600080fd5b505afa158015612229573d6000803e3d6000fd5b505050506040513d602081101561223f57600080fd5b50516001600160a01b0316146124c757609b60009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561229d57600080fd5b505afa1580156122b1573d6000803e3d6000fd5b505050506040513d60208110156122c757600080fd5b505160a7546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561232057600080fd5b505af1158015612334573d6000803e3d6000fd5b505050506040513d602081101561234a57600080fd5b5050609b546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561239157600080fd5b505afa1580156123a5573d6000803e3d6000fd5b505050506040513d60208110156123bb57600080fd5b505160a7546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561241457600080fd5b505af1158015612428573d6000803e3d6000fd5b505050506040513d602081101561243e57600080fd5b5050609b5460a7546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561249a57600080fd5b505af11580156124ae573d6000803e3d6000fd5b505050506040513d60208110156124c457600080fd5b50505b80156124d9576000805461ff00191690555b505050505050505050565b6124ec613ff7565b6001600160a01b03166124fd612d12565b6001600160a01b031614612546576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b609b546001600160a01b031681565b609f5460ff1681565b609954609c5460408051636a93856760e01b815260048101929092525160009261010090046001600160a01b031691636a938567916024808301926020929190829003018186803b1580156125fc57600080fd5b505afa158015612610573d6000803e3d6000fd5b505050506040513d602081101561262657600080fd5b50516126635760405162461bcd60e51b8152600401808060200182810382526022815260200180615d806022913960400191505060405180910390fd5b609960019054906101000a90046001600160a01b03166001600160a01b031663161e444e609c546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156126be57600080fd5b505afa1580156126d2573d6000803e3d6000fd5b505050506040513d60208110156126e857600080fd5b5051905090565b60026001541415612735576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b6002600190815560995460ff16600381111561274d57fe5b1461279f576040805162461bcd60e51b815260206004820152601b60248201527f436f6e7472616374207374617465206973206e6f742072656164790000000000604482015290519081900360640190fd5b609f548490849060ff8084169116116127f3576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152609e6020526040902060080154161561284b576040805162461bcd60e51b81526020600482015260196024820152600080516020615cec833981519152604482015290519081900360640190fd5b8061288b576040805162461bcd60e51b815260206004820152601a6024820152600080516020615da2833981519152604482015290519081900360640190fd5b80606410156128d2576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b6000806128df888861478c565b5050915091508186101561293a576040805162461bcd60e51b815260206004820152601860248201527f457863656564696e67205f6d617842617365416d6f756e740000000000000000604482015290519081900360640190fd5b8085101561298f576040805162461bcd60e51b815260206004820152601860248201527f457863656564696e67205f6d617850616972416d6f756e740000000000000000604482015290519081900360640190fd5b612a20333084609b60009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156129e357600080fd5b505afa1580156129f7573d6000803e3d6000fd5b505050506040513d6020811015612a0d57600080fd5b50516001600160a01b031692919061488c565b612a74333083609b60009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156129e357600080fd5b60a754609b5460408051630dfe168160e01b815290516000936001600160a01b039081169363e8e3370093911691630dfe168191600480820192602092909190829003018186803b158015612ac857600080fd5b505afa158015612adc573d6000803e3d6000fd5b505050506040513d6020811015612af257600080fd5b5051609b546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b158015612b3957600080fd5b505afa158015612b4d573d6000803e3d6000fd5b505050506040513d6020811015612b6357600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152604482018790526064820186905260006084830181905260a483018190523060c484015262015180420160e48401529051610104808401936060939083900390910190829087803b158015612be757600080fd5b505af1158015612bfb573d6000803e3d6000fd5b505050506040513d6060811015612c1157600080fd5b50604001519050612c2389828a6148ec565b609a5460ff8a166000908152609e60205260408120600101546001600160a01b039092169163731133e9913391908c90612c5c90614346565b6040518563ffffffff1660e01b815260040180856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612cc3578181015183820152602001612cab565b50505050905090810190601f168015612cf05780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156118bc57600080fd5b6065546001600160a01b031690565b60a45481565b60026001541415612d6d576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000612d7c613ff7565b9050612d8781611db1565b612dc6576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b609f548490839060ff808416911611612e1a576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152609e60205260409020600801541615612e72576040805162461bcd60e51b81526020600482015260196024820152600080516020615cec833981519152604482015290519081900360640190fd5b80612eb2576040805162461bcd60e51b815260206004820152601a6024820152600080516020615da2833981519152604482015290519081900360640190fd5b8060641015612ef9576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b612f048686866148ec565b609b54604080516323b872dd60e01b81523360048201523060248201526044810188905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015612f5e57600080fd5b505af1158015612f72573d6000803e3d6000fd5b505050506040513d6020811015612f8857600080fd5b5050609a5460ff87166000908152609e60205260408120600101546001600160a01b039092169163731133e9913391908890612fc390614346565b6040518563ffffffff1660e01b815260040180856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561302a578181015183820152602001613012565b50505050905090810190601f1680156130575780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561307957600080fd5b505af115801561308d573d6000803e3d6000fd5b505050506040513d60208110156130a357600080fd5b505060018055505050505050565b609f546000908190819081908690869060ff80841691161161310e576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152609e60205260409020600801541615613166576040805162461bcd60e51b81526020600482015260196024820152600080516020615cec833981519152604482015290519081900360640190fd5b806131a6576040805162461bcd60e51b815260206004820152601a6024820152600080516020615da2833981519152604482015290519081900360640190fd5b80606410156131ed576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b6131f78888613ffb565b929b919a509850909650945050505050565b60a7546001600160a01b031681565b6002600154141561325e576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b6002600155600061326d613ff7565b905061327881611db1565b6132b7576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b609f5460ff808516911611613307576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b5060ff919091166000908152609e60205260409020600801805460ff191691151591909117905560018055565b6002600154141561337a576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000613389613ff7565b905061339481611db1565b6133d3576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b0385169163a9059cbb9160448083019260209291908290030181600087803b15801561342257600080fd5b505af1158015613436573d6000803e3d6000fd5b505050506040513d602081101561344c57600080fd5b505060018055505050565b6002600154141561349d576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b600260015560006134ac613ff7565b90506134b781611db1565b6134f6576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b609f548490839060ff80841691161161354a576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152609e602052604090206008015416156135a2576040805162461bcd60e51b81526020600482015260196024820152600080516020615cec833981519152604482015290519081900360640190fd5b806135e2576040805162461bcd60e51b815260206004820152601a6024820152600080516020615da2833981519152604482015290519081900360640190fd5b8060641015613629576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b61363486868661416c565b609a5460ff87166000908152609e60205260408120600101546001600160a01b039092169163f242432a9133913091899061366e90614346565b6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156136e45781810151838201526020016136cc565b50505050905090810190601f1680156137115780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561373457600080fd5b505af1158015613748573d6000803e3d6000fd5b5050609a5460ff89166000908152609e6020526040808220600101548151637a94c56560e11b81523060048201526024810191909152604481018a905290516001600160a01b03909316945063f5298aca93506064808201939182900301818387803b1580156137b757600080fd5b505af11580156137cb573d6000803e3d6000fd5b5050609b546040805163a9059cbb60e01b8152336004820152602481018a905290516001600160a01b03909216935063a9059cbb92506044808201926020929091908290030181600087803b15801561307957600080fd5b60995460ff1681565b60026001541415613872576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000613881613ff7565b905061388c81611db1565b6138cb576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b5060a380546001600160a01b0319166001600160a01b039290921691909117905560018055565b609f54600090819060ff808516911611613947576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b61395083614a29565b61395984614a84565b91509150915091565b609954609d5460408051636a93856760e01b815260048101929092525160009261010090046001600160a01b031691636a938567916024808301926020929190829003018186803b1580156139b657600080fd5b505afa1580156139ca573d6000803e3d6000fd5b505050506040513d60208110156139e057600080fd5b5051613a33576040805162461bcd60e51b815260206004820152601c60248201527f73796e74686574696353796d626f6c206973206e6f742076616c696400000000604482015290519081900360640190fd5b609960019054906101000a90046001600160a01b03166001600160a01b031663161e444e609d546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156126be57600080fd5b609f546000908190819081908690869060ff808416911611613aeb576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff8083166000908152609e60205260409020600801541615613b43576040805162461bcd60e51b81526020600482015260196024820152600080516020615cec833981519152604482015290519081900360640190fd5b80613b83576040805162461bcd60e51b815260206004820152601a6024820152600080516020615da2833981519152604482015290519081900360640190fd5b8060641015613bca576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b6131f7888861478c565b60026001541415613c1a576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000613c29613ff7565b9050613c3481611db1565b613c73576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b5060a580549115156101000261ff001990921691909117905560018055565b60026001541415613cd8576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000613ce7613ff7565b9050613cf281611db1565b613d31576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b5060a5805460ff191691151591909117905560018055565b60a55460ff1681565b60a15481565b609e6020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015613def5780601f10613dc457610100808354040283529160200191613def565b820191906000526020600020905b815481529060010190602001808311613dd257829003601f168201915b50505060018401546002850154600386015460048701546005880154600689015460078a01546008909a0154989995989497509295509093909260ff1689565b613e37613ff7565b6001600160a01b0316613e48612d12565b6001600160a01b031614613e91576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6001600160a01b038116613ed65760405162461bcd60e51b8152600401808060200182810382526026815260200180615c836026913960400191505060405180910390fd5b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b60026001541415613f78576040805162461bcd60e51b815260206004820152601f6024820152600080516020615c63833981519152604482015290519081900360640190fd5b60026001556000613f87613ff7565b9050613f9281611db1565b613fd1576040805162461bcd60e51b81526020600482018190526024820152600080516020615d60833981519152604482015290519081900360640190fd5b6099805483919060ff19166001836003811115613fea57fe5b0217905550506001805550565b3390565b60008060008061400b8686614acf565b91955093509150600061401d87614a29565b905080670de0b6b3a7640000141580156140375750600081135b8015614046575060a55460ff16155b156141625760ff87166000908152609e602052604081206003015461406b9085614447565b60ff89166000908152609e6020526040812060020154919250906140ba9083906140b590614099908c614370565b60ff8d166000908152609e602052604090206005015490614447565b61449d565b905060006140db826140d5856140cf88614f22565b90614f6c565b90614fa5565b90508281111561412e5760ff8a166000908152609e60205260409020600301546141149061410a908890614fa5565b6140cf8386614447565b945061412b60a65486614f6c90919063ffffffff16565b94505b600061413a8787614447565b905061414a876112ed8b84614370565b985061415a876112ed8a84614370565b975095505050505b5092959194509250565b60ff83166000908152609e60205260409020600201546141ac906141909083614370565b60ff85166000908152609e602052604090206005015490614447565b60ff84166000908152609e602052604090206005810191909155600701546141d49082614fc5565b60ff84166000908152609e602052604090206007810191909155600301548211156142715760ff83166000908152609e602052604081206003015461421a908490614447565b60ff85166000908152609e602052604090206004015490915061423d9082614fc5565b60ff85166000908152609e602052604090206004015560a1546142609082614fc5565b60a15561426d8382614447565b9250505b60ff83166000908152609e60205260409020600301546142919083614447565b60ff84166000818152609e60209081526040918290206003810194909455600290930154815133815293840192909252828101919091526060820184905260808201839052517f1d52264c290e444923399d71f1a1d34e37e52c16b4e85326d5accce8653f709f9181900360a00190a160a05461430e9083614447565b60a05560ff83166000908152609e602052604090206002015461433e906143359083614370565b60a25490614447565b60a255505050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60008261437f575060006143e2565b8282028284828161438c57fe5b04146143df576040805162461bcd60e51b815260206004820152601960248201527f556e6d756c7469706c69636174696f6e206f766572666c6f7700000000000000604482015290519081900360640190fd5b90505b92915050565b6000808211614433576040805162461bcd60e51b8152602060048201526012602482015271556e6469766973696f6e206279207a65726f60701b604482015290519081900360640190fd5b600082848161443e57fe5b04949350505050565b600082821115614497576040805162461bcd60e51b8152602060048201526016602482015275556e7375627472616374696f6e206f766572666c6f7760501b604482015290519081900360640190fd5b50900390565b600080609960019054906101000a90046001600160a01b03166001600160a01b031663161e444e609c546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156144fb57600080fd5b505afa15801561450f573d6000803e3d6000fd5b505050506040513d602081101561452557600080fd5b5051609954609d5460408051630b0f222760e11b81526004810192909252519293506000926101009092046001600160a01b03169163161e444e91602480820192602092909190829003018186803b15801561458057600080fd5b505afa158015614594573d6000803e3d6000fd5b505050506040513d60208110156145aa57600080fd5b5051905060006145ba8387614f6c565b905060006145c88387614f6c565b905060006145e36145d98989614fa5565b6140cf8787614fa5565b90506145ef8383614fa5565b98975050505050505050565b600061460630615015565b15905090565b600054610100900460ff168061462557506146256145fb565b80614633575060005460ff16155b61466e5760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff16158015614699576000805460ff1961ff0019909116610100171660011790555b6146a161501b565b80156146b3576000805461ff00191690555b50565b600054610100900460ff16806146cf57506146cf6145fb565b806146dd575060005460ff16155b6147185760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff16158015614743576000805460ff1961ff0019909116610100171660011790555b61474b6150c0565b6000614755613ff7565b6001600160a01b03166000908152609760205260409020805460ff191660011790555080156146b3576000805461ff001916905550565b60008060008061479c8686614acf565b9195509350915060006147ae87614a84565b9050670de0b6b3a7640000811380156147cf575060a554610100900460ff16155b156141625760ff87166000908152609e60205260408120600301546147f49085614fc5565b60ff89166000908152609e60205260408120600201549192509061483e9083906140b590614822908c614370565b60ff8d166000908152609e602052604090206005015490614fc5565b90506000614853826140d5856140cf88614f22565b90508083111561412e5760ff8a166000908152609e602052604090206003015461411490614882908890614fa5565b6140cf8584614447565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526148e690859061515d565b50505050565b60ff83166000908152609e602052604090206002015461492c906149109083614370565b60ff85166000908152609e602052604090206005015490614fc5565b60ff84166000908152609e602052604090206005810191909155600601546149549082614fc5565b60ff84166000908152609e6020526040902060068101919091556003015461497c9083614fc5565b60ff84166000818152609e60209081526040918290206003810194909455600290930154815133815293840192909252828101919091526060820184905260808201839052517ff7bd85d3f10229150829e8504450ec5e026df0879e5a690aa9a5cb6bab4a51d89181900360a00190a160a0546149f99083614fc5565b60a05560ff83166000908152609e602052604090206002015461433e90614a209083614370565b60a25490614fc5565b600080614a3d614a3884611a1d565b615213565b90506000614a4a82615264565b9050600082138015614a64575080670de0b6b3a764000012155b15614a72579150611ac49050565b670de0b6b3a764000092505050611ac4565b600080614a93614a3884611a1d565b90506000614aa082615264565b9050670de0b6b3a764000082138015614ab857508082135b15614a7257614ac682615264565b92505050611ac4565b600080600080609960019054906101000a90046001600160a01b03166001600160a01b031663161e444e609d546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015614b3057600080fd5b505afa158015614b44573d6000803e3d6000fd5b505050506040513d6020811015614b5a57600080fd5b5051609954609c5460408051630b0f222760e11b81526004810192909252519293506000926101009092046001600160a01b03169163161e444e91602480820192602092909190829003018186803b158015614bb557600080fd5b505afa158015614bc9573d6000803e3d6000fd5b505050506040513d6020811015614bdf57600080fd5b505160ff88166000908152609e602052604081206002015491925090614c1090614c099089614370565b8490614f6c565b90506000614c1e8284614fa5565b90508094506000609b60009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015614c7357600080fd5b505afa158015614c87573d6000803e3d6000fd5b505050506040513d6020811015614c9d57600080fd5b5051609b54604080516370a0823160e01b81526001600160a01b039283166004820152905191909216916370a08231916024808301926020929190829003018186803b158015614cec57600080fd5b505afa158015614d00573d6000803e3d6000fd5b505050506040513d6020811015614d1657600080fd5b5051609b546040805163d21220a760e01b815290519293506000926001600160a01b039092169163d21220a791600480820192602092909190829003018186803b158015614d6357600080fd5b505afa158015614d77573d6000803e3d6000fd5b505050506040513d6020811015614d8d57600080fd5b5051609b54604080516370a0823160e01b81526001600160a01b039283166004820152905191909216916370a08231916024808301926020929190829003018186803b158015614ddc57600080fd5b505afa158015614df0573d6000803e3d6000fd5b505050506040513d6020811015614e0657600080fd5b5051609b54604080516318160ddd60e01b81529051929350614e8a926001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b158015614e5457600080fd5b505afa158015614e68573d6000803e3d6000fd5b505050506040513d6020811015614e7e57600080fd5b50516112ed8585614370565b9850614f13609b60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614edd57600080fd5b505afa158015614ef1573d6000803e3d6000fd5b505050506040513d6020811015614f0757600080fd5b50516112ed8584614370565b97505050505050509250925092565b600080821215614f68576040805162461bcd60e51b815260206004820152600c60248201526b696e74206f766572666c6f7760a01b604482015290519081900360640190fd5b5090565b6000670de0b6b3a7640000614f96614f848585614370565b6002670de0b6b3a76400005b04614fc5565b81614f9d57fe5b049392505050565b600081614f96614fbd85670de0b6b3a7640000614370565b600285614f90565b6000828201838110156143df576040805162461bcd60e51b8152602060048201526013602482015272556e6164646974696f6e206f766572666c6f7760681b604482015290519081900360640190fd5b3b151590565b600054610100900460ff168061503457506150346145fb565b80615042575060005460ff16155b61507d5760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff161580156150a8576000805460ff1961ff0019909116610100171660011790555b6001805580156146b3576000805461ff001916905550565b600054610100900460ff16806150d957506150d96145fb565b806150e7575060005460ff16155b6151225760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff1615801561514d576000805460ff1961ff0019909116610100171660011790555b61515561529c565b6146a161533c565b60606151b2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166154359092919063ffffffff16565b80519091501561520e578080602001905160208110156151d157600080fd5b505161520e5760405162461bcd60e51b815260040180806020018281038252602a815260200180615dc2602a913960400191505060405180910390fd5b505050565b60006001600160ff1b03821115614f68576040805162461bcd60e51b815260206004820152601060248201526f75696e74323536206f766572666c6f7760801b604482015290519081900360640190fd5b60006143e261528d670de0b6b3a76400006152876781103cb9fb2200008661544e565b90615483565b678ac7230489e80000906154f2565b600054610100900460ff16806152b557506152b56145fb565b806152c3575060005460ff16155b6152fe5760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff161580156146a1576000805460ff1961ff00199091166101001716600117905580156146b3576000805461ff001916905550565b600054610100900460ff168061535557506153556145fb565b80615363575060005460ff16155b61539e5760405162461bcd60e51b815260040180806020018281038252602e815260200180615d32602e913960400191505060405180910390fd5b600054610100900460ff161580156153c9576000805460ff1961ff0019909116610100171660011790555b60006153d3613ff7565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156146b3576000805461ff001916905550565b6060615444848460008561550e565b90505b9392505050565b6000670de0b6b3a7640000615474615466858561566a565b670de0b6b3a7640000615735565b8161547b57fe5b059392505050565b60008282018183128015906154985750838112155b806154ad57506000831280156154ad57508381125b6143df576040805162461bcd60e51b81526020600482015260116024820152706164646974696f6e206f766572666c6f7760781b604482015290519081900360640190fd5b60006143df615500836157b4565b615509856157b4565b615a8f565b60608247101561554f5760405162461bcd60e51b8152600401808060200182810382526026815260200180615d0c6026913960400191505060405180910390fd5b61555885615015565b6155a9576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106155e85780518252601f1990920191602091820191016155c9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461564a576040519150601f19603f3d011682016040523d82523d6000602084013e61564f565b606091505b509150915061565f828286615ac2565b979650505050505050565b600082615679575060006143e2565b8260001914801561568d5750600160ff1b82145b156156da576040805162461bcd60e51b8152602060048201526018602482015277776d756c7469706c69636174696f6e206f766572666c6f7760401b604482015290519081900360640190fd5b828202828482816156e757fe5b05146143df576040805162461bcd60e51b8152602060048201526018602482015277776d756c7469706c69636174696f6e206f766572666c6f7760401b604482015290519081900360640190fd5b600080821361578b576040805162461bcd60e51b815260206004820152601f60248201527f726f756e6448616c665570206f6e6c7920737570706f7274732079203e203000604482015290519081900360640190fd5b600083126157a7576157a08360028405615483565b90506143e2565b6143df8360028405615b66565b600080821361580a576040805162461bcd60e51b815260206004820152601760248201527f6c6f6745206f66206e65676174697665206e756d626572000000000000000000604482015290519081900360640190fd5b701d6329f1c35ca4bfabb9f561000000000082131561585a5760405162461bcd60e51b8152600401808060200182810382526022815260200180615ca96022913960400191505060405180910390fd5b60006012670de0b6b3a76400005b67016345785d8a000085136158975784600a0294506f01bb7635c5de48ef4ce5b7b41cc43db083039250615868565b678ac7230489e8000085126158c657600a850594506f01bb7635c5de48ef4ce5b7b41cc43db083019250615897565b670de0b6b3a7640000851215615903576158e8856725b946ebc0b3617361544e565b94506ec097ce7bc90715b34b9f1000000000830392506158c6565b6725b946ebc0b3617385131561594057615925856725b946ebc0b36173615a8f565b94506ec097ce7bc90715b34b9f100000000083019250615903565b670de0b6b3a764000085141561596d578061595b8483615735565b8161596257fe5b059350505050611ac4565b6725b946ebc0b361738514156159a457806159888483615735565b8161598f57fe5b05670de0b6b3a7640000019350505050611ac4565b938402936e4e16f927cdca7f15b39123f740f5d192909201916f0120e3b5b9ad8aa08cf16e980000000060008187016ec097ce7bc90715b34b9f10000000006f0120e3b5b9ad8aa08cf16e97ffffffff19890102816159ff57fe5b059050806002028501945060006ec097ce7bc90715b34b9f100000000082830281615a2657fe5b05905060035b6ec097ce7bc90715b34b9f10000000008383020592508060ff168360020281615a5157fe5b059690960195600201602760ff821610615a6a57615a6f565b615a2c565b84615a7a8887615735565b81615a8157fe5b059998505050505050505050565b600080821215615aa6578160000391508260000392505b81615474615abc85670de0b6b3a764000061566a565b84615735565b60608315615ad1575081615447565b825115615ae15782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615b2b578181015183820152602001615b13565b50505050905090810190601f168015615b585780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000818303818312801590615b7b5750838113155b80615b905750600083128015615b9057508381135b6143df576040805162461bcd60e51b81526020600482015260146024820152737375627472616374696f6e206f766572666c6f7760601b604482015290519081900360640190fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615c1957805160ff1916838001178555615c46565b82800160010185558215615c46579182015b82811115615c46578251825591602001919060010190615c2b565b50614f689291505b80821115614f685760008155600101615c4e56fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736c6f6745206f6e6c7920616363657074732076203c3d2031653232202a20316531385f6d756c7469706c696572206d7573742067726561746572207468616e20302e3554686520676976656e205f69642069732064697361626c656400000000000000416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572636f6c6c61746572616c536861726553796d626f6c206973206e6f742076616c69645f746f6b656e416d6f756e742063616e2774206265207a65726f0000000000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220e2231ec18ef5e12ce4d97430d0fd68341bda8ed69fbbf7a351ce233eb5ef0e4e64736f6c634300060c0033",
  "devdoc": {
    "details": "The contract heavily depends on 3rd party modules from QuickSwap, Chainlink to running. Check out docs.tamago.finance for more details",
    "kind": "dev",
    "methods": {
      "addAddress(address)": {
        "details": "adds a given address to the whitelist",
        "params": {
          "_address": "address to add"
        }
      },
      "estimateMint(uint8,uint256)": {
        "params": {
          "_id": "the NFT's variant id",
          "_tokenAmount": "total NFT to be created"
        },
        "returns": {
          "baseTokenAmount": "required amount of token0 on LP",
          "discount": "The discount if CR > 1",
          "lpAmount": "Estimated LP amount to be deposited as a collateral",
          "pairTokenAmount": "required amount of token1 on LP"
        }
      },
      "estimateRedeem(uint8,uint256)": {
        "params": {
          "_id": "the NFT's variant id",
          "_tokenAmount": "total NFT to be burnt"
        },
        "returns": {
          "baseTokenAmount": "redeemed amount of token0 on LP",
          "lpAmount": "Estimated LP amount to be withdrawn from Quickswap",
          "offset": "The offset fee when CR < 1",
          "pairTokenAmount": "redeemed amount of token1 on LP"
        }
      },
      "getCollateralSharePrice()": {
        "returns": {
          "_0": "US price per a LP token"
        }
      },
      "getSyntheticPrice()": {
        "returns": {
          "_0": "US price per a synthetic token"
        }
      },
      "globalCollatelizationRatio()": {
        "returns": {
          "_0": "the system collateral ratio"
        }
      },
      "initialize(string,string,address,address,bytes32,bytes32,address,address)": {
        "params": {
          "_collateralShareAddress": "the address of LP token to be used as a collateral",
          "_collateralShareSymbol": "the symbol of LP token that defined on the price registry",
          "_devAddress": "dev address",
          "_name": "name of the NFT collection",
          "_nftUri": "base uri for the ERC-1155 NFT",
          "_priceResolverAddress": "the address of the shared price feeder registry",
          "_syntheticSymbol": "the symbol of value-backed NFT that defined on the price registry"
        }
      },
      "isWhitelisted(address)": {
        "details": "returns true if a given address is whitelisted, false if not",
        "params": {
          "_address": "address to check"
        },
        "returns": {
          "_0": "true if the address is whitelisted, false if not"
        }
      },
      "mint(uint8,uint256,uint256,uint256)": {
        "params": {
          "_id": "the NFT's variant id",
          "_maxBaseAmount": "cap amount of token0 that can be sent out from the wallet",
          "_maxPairAmount": "cap amount of token1 that can be sent out from the wallet",
          "_tokenAmount": "total NFT to be created"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(uint8,uint256,uint256,uint256)": {
        "params": {
          "_id": "the NFT's variant id",
          "_minBaseAmount": "min. amount of token0 expects to receive",
          "_minPairAmount": "min. amount of token1 expects to receive",
          "_tokenAmount": "total NFT to be burnt"
        }
      },
      "removeAddress(address)": {
        "details": "removes a given address from the whitelist",
        "params": {
          "_address": "address to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "targetCollatelizationRatio(uint8)": {
        "params": {
          "_id": "the NFT's variant id"
        },
        "returns": {
          "_0": "the target ratio when CR < 1",
          "_1": "the target ratio when CR > 1"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "variantCollatelizationRatio(uint8)": {
        "params": {
          "_id": "the NFT's variant id"
        },
        "returns": {
          "_0": "the variant collateral ratio"
        }
      }
    },
    "title": "A contract to collaterizes ERC-20 and mints NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "estimateMint(uint8,uint256)": {
        "notice": "calculate amount of collateral assets to be placed for minting the NFT"
      },
      "estimateRedeem(uint8,uint256)": {
        "notice": "calcualte amount of collateral assets to be returned when burning NFT"
      },
      "getCollateralSharePrice()": {
        "notice": "call the price feeder registry to retrieve the latest price of LP token"
      },
      "getSyntheticPrice()": {
        "notice": "call the price feeder registry to retrieve the latest price of NFT"
      },
      "globalCollatelizationRatio()": {
        "notice": "looks for the system collateral ratio basically calculates from total collateral deposited / total NFT minted"
      },
      "initialize(string,string,address,address,bytes32,bytes32,address,address)": {
        "notice": "the contructor that requires necessary params to setup ERC-1155 contract"
      },
      "mint(uint8,uint256,uint256,uint256)": {
        "notice": "taking 2 tokens and adding them to Quickswap LP, the returned LP will be locked and be the variant's collateral for the NFT issuing"
      },
      "redeem(uint8,uint256,uint256,uint256)": {
        "notice": "burning NFT and returning collateral assets, the offset fee will be charged when CR < 1"
      },
      "targetCollatelizationRatio(uint8)": {
        "notice": "calculates the target ratio that we need to either leaving and giving away (as discount) some collaterals to help bring the ratio back to 1"
      },
      "variantCollatelizationRatio(uint8)": {
        "notice": "looks for the collateral ratio for particular variant"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1034,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1037,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2900,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2943,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2885,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 465,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 584,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17846,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "whitelist",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10406,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "name",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 10408,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "state",
        "offset": 0,
        "slot": "153",
        "type": "t_enum(ContractState)10385"
      },
      {
        "astId": 10410,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "priceResolver",
        "offset": 1,
        "slot": "153",
        "type": "t_contract(IPriceResolver)14985"
      },
      {
        "astId": 10413,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "syntheticNFT",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(ISyntheticNFT)15073"
      },
      {
        "astId": 10416,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "collateralShare",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(IPancakePair)14559"
      },
      {
        "astId": 10418,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "collateralShareSymbol",
        "offset": 0,
        "slot": "156",
        "type": "t_bytes32"
      },
      {
        "astId": 10420,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "syntheticSymbol",
        "offset": 0,
        "slot": "157",
        "type": "t_bytes32"
      },
      {
        "astId": 10424,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "syntheticVariants",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint8,t_struct(SyntheticVariant)10404_storage)"
      },
      {
        "astId": 10426,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "syntheticVariantCount",
        "offset": 0,
        "slot": "159",
        "type": "t_uint8"
      },
      {
        "astId": 10428,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "totalRawCollateral",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 10430,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "totalDebtCollateral",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      },
      {
        "astId": 10432,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "totalOutstanding",
        "offset": 0,
        "slot": "162",
        "type": "t_uint256"
      },
      {
        "astId": 10434,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "devAddress",
        "offset": 0,
        "slot": "163",
        "type": "t_address"
      },
      {
        "astId": 10436,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "redeemFee",
        "offset": 0,
        "slot": "164",
        "type": "t_uint256"
      },
      {
        "astId": 10438,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "offsetDisabled",
        "offset": 0,
        "slot": "165",
        "type": "t_bool"
      },
      {
        "astId": 10440,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "discountDisabled",
        "offset": 1,
        "slot": "165",
        "type": "t_bool"
      },
      {
        "astId": 10443,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "multiplier",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 10445,
        "contract": "contracts/NFTManager.sol:NFTManager",
        "label": "ROUTER_ADDRESS",
        "offset": 0,
        "slot": "167",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPancakePair)14559": {
        "encoding": "inplace",
        "label": "contract IPancakePair",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceResolver)14985": {
        "encoding": "inplace",
        "label": "contract IPriceResolver",
        "numberOfBytes": "20"
      },
      "t_contract(ISyntheticNFT)15073": {
        "encoding": "inplace",
        "label": "contract ISyntheticNFT",
        "numberOfBytes": "20"
      },
      "t_enum(ContractState)10385": {
        "encoding": "inplace",
        "label": "enum NFTManager.ContractState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_struct(SyntheticVariant)10404_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct NFTManager.SyntheticVariant)",
        "numberOfBytes": "32",
        "value": "t_struct(SyntheticVariant)10404_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SyntheticVariant)10404_storage": {
        "encoding": "inplace",
        "label": "struct NFTManager.SyntheticVariant",
        "members": [
          {
            "astId": 10387,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 10389,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10391,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "tokenValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10393,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "totalRawCollateral",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10395,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "totalDebtCollateral",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10397,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "totalOutstanding",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10399,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "totalIssued",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 10401,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "totalBurnt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 10403,
            "contract": "contracts/NFTManager.sol:NFTManager",
            "label": "disabled",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}