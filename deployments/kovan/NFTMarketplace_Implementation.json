{
  "address": "0x30F05eaE48eC052beC6873E37E74545229e804F5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "is1155",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "OrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromAssetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toAssetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_orderId",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_assetAddress",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "_is1155",
          "type": "bool[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_root",
          "type": "bytes32[]"
        }
      ],
      "name": "createBatchOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_assetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_is1155",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "createOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_assetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "eligibleToSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "is1155",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "canceled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "ended",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setMaxBatchOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUnpaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_assetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_is1155",
          "type": "bool"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_orderIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_assetAddress",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "_is1155",
          "type": "bool[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "_proof",
          "type": "bytes32[][]"
        }
      ],
      "name": "swapBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b30d6d234ca9ee67fbd085ddd438aacda5c5909a891d3087874d7cb6dfcf447",
  "receipt": {
    "to": null,
    "from": "0x27dDF44eC9E32343599F7B939e4c35c034f78076",
    "contractAddress": "0x30F05eaE48eC052beC6873E37E74545229e804F5",
    "transactionIndex": 0,
    "gasUsed": "2709158",
    "logsBloom": "0x
    "blockHash": "0xeb5a50e4085a795f9f319dbe48202c7795b3013cd0206db02896667ac55aa33b",
    "transactionHash": "0x6b30d6d234ca9ee67fbd085ddd438aacda5c5909a891d3087874d7cb6dfcf447",
    "logs": [],
    "blockNumber": 30985914,
    "cumulativeGasUsed": "2709158",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8265e4161eec9b5a7dcd6b2c71b6665f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"is1155\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAssetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAssetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_orderId\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_assetAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_is1155\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_root\",\"type\":\"bytes32[]\"}],\"name\":\"createBatchOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_is1155\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"eligibleToSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"is1155\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxBatchOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_is1155\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_orderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_assetAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_is1155\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"_proof\",\"type\":\"bytes32[][]\"}],\"name\":\"swapBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAddress(address)\":{\"details\":\"adds a given address to the whitelist\",\"params\":{\"_address\":\"address to add\"}},\"cancelOrder(uint256)\":{\"params\":{\"_orderId\":\"ID that want to cancel\"}},\"createOrder(uint256,address,uint256,bool,bytes32)\":{\"params\":{\"_orderId\":\"ID for the event\"}},\"isWhitelisted(address)\":{\"details\":\"returns true if a given address is whitelisted, false if not\",\"params\":{\"_address\":\"address to check\"},\"returns\":{\"_0\":\"true if the address is whitelisted, false if not\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeAddress(address)\":{\"details\":\"removes a given address from the whitelist\",\"params\":{\"_address\":\"address to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"P2P marketplace\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelOrder(uint256)\":{\"notice\":\"cancel the order and return NFT back to the original holder\"},\"createOrder(uint256,address,uint256,bool,bytes32)\":{\"notice\":\"create an order and deposit NFT to the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTMarketplaceUpgradeable.sol\":\"NFTMarketplaceUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x4806316f4167dd87deca0a884bc0e6ed41d9e4926ce10862fead08aa42ebe8da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc6dbbc2f50a7c104377798a37b2acd1a41c1242544b0bb7a9a7c863f0520eb50\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n        __ERC1155Holder_init_unchained();\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal initializer {\\n    }\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9e6b4b970877d19735e8c488a8c66d3b5a3e01e4705d982379feaafb451057a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal initializer {\\n        _registerInterface(\\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155Received.selector ^\\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x119682df753fda361ec986768dd3586b2efa8399152fa35e979758f13d20533f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x68a2498b459518376db0497bce2344169497020cd95db90d76f8312e02c40ba0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xcbc02d192c55298cf65e5695375c839eac979a597a0fbdc1635195c4d28ca5ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers. \\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal initializer {\\n        __ERC721Holder_init_unchained();\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal initializer {\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3c9a42b988127a0ac1314c3190c9100fdc7964898f77a75da733fb81a696d672\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x53552243cd7de0d57a876cbaee3485d4bdc2b1c7d58ff15447cd623a3ddb5cd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x73bef0a5dec3efde8183c4858d90f683ed2771656c4329647b4d5b0f89498fd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e\",\"license\":\"MIT\"},\"contracts/NFTMarketplaceUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/cryptography/MerkleProofUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./utility/WhitelistUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @title P2P marketplace\\n */\\n\\ncontract NFTMarketplaceUpgradeable is\\n    Initializable,\\n    WhitelistUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IERC721ReceiverUpgradeable,\\n    ERC165Upgradeable,\\n    ERC721HolderUpgradeable,\\n    ERC1155HolderUpgradeable,\\n    PausableUpgradeable\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    struct Order {\\n        address assetAddress;\\n        uint256 tokenId;\\n        bool is1155;\\n        address owner;\\n        bytes32 root;\\n        bool canceled;\\n        bool ended;\\n        bool active;\\n    }\\n\\n    // Order Id => Order\\n    mapping(uint256 => Order) public orders;\\n    // Max. orders can be executed on swapBatch()\\n    uint256 maxBatchOrders; \\n\\n    event OrderCreated(\\n        uint256 indexed orderId,\\n        address assetAddress,\\n        uint256 tokenId,\\n        bool is1155,\\n        address owner,\\n        bytes32 root\\n    );\\n\\n    event OrderCanceled(uint256 indexed orderId, address owner);\\n\\n    event Swapped(uint256 indexed orderId, address fromAddress, address fromAssetAddress, uint256 fromTokenId, address toAddress, address toAssetAddress, uint256 toTokenId );\\n\\n    function initialize(address _devAddress)\\n        public\\n        initializer\\n    {\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        ERC721HolderUpgradeable.__ERC721Holder_init();\\n        ERC165Upgradeable.__ERC165_init();\\n        ERC1155HolderUpgradeable.__ERC1155Holder_init();\\n        PausableUpgradeable.__Pausable_init();\\n        WhitelistUpgradeable.__Whitelist_init();\\n\\n        // add dev into the whitelist\\n        addAddress(_devAddress);\\n\\n        maxBatchOrders = 10;\\n\\n        if (_devAddress != msg.sender) {\\n            addAddress(msg.sender);\\n        }\\n\\n        _registerInterface(\\n            IERC721ReceiverUpgradeable.onERC721Received.selector\\n        );\\n    }\\n\\n    /// @notice create an order and deposit NFT to the contract\\n    /// @param _orderId ID for the event\\n    function createOrder(\\n        uint256 _orderId,\\n        address _assetAddress,\\n        uint256 _tokenId,\\n        bool _is1155,\\n        bytes32 _root\\n    ) public nonReentrant whenNotPaused {\\n        require(orders[_orderId].active == false, \\\"Given ID is occupied\\\");\\n\\n        orders[_orderId].active = true;\\n        orders[_orderId].assetAddress = _assetAddress;\\n        orders[_orderId].tokenId = _tokenId;\\n        orders[_orderId].is1155 = _is1155;\\n        orders[_orderId].root = _root;\\n        orders[_orderId].owner = msg.sender;\\n\\n        if (_is1155 == true) {\\n            IERC1155Upgradeable(_assetAddress).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _tokenId,\\n                1,\\n                \\\"0x00\\\"\\n            );\\n        } else {\\n            IERC721Upgradeable(_assetAddress).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _tokenId\\n            );\\n        }\\n\\n        emit OrderCreated(\\n            _orderId,\\n            _assetAddress,\\n            _tokenId,\\n            _is1155,\\n            msg.sender,\\n            _root\\n        );\\n    }\\n\\n    function createBatchOrders(\\n        uint256[] calldata _orderId,\\n        address[] calldata _assetAddress,\\n        uint256[] calldata _tokenId,\\n        bool[] calldata _is1155,\\n        bytes32[] calldata _root\\n    ) external whenNotPaused nonReentrant {\\n        for (uint256 i = 0; i < _orderId.length; i++) {\\n            require(orders[_orderId[i]].active == false, \\\"Given ID is occupied\\\");\\n\\n            orders[_orderId[i]].active = true;\\n            orders[_orderId[i]].assetAddress = _assetAddress[i];\\n            orders[_orderId[i]].tokenId = _tokenId[i];\\n            orders[_orderId[i]].is1155 = _is1155[i];\\n            orders[_orderId[i]].root = _root[i];\\n            orders[_orderId[i]].owner = msg.sender;\\n\\n            if (_is1155[i] == true) {\\n                IERC1155Upgradeable(_assetAddress[i]).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _tokenId[i],\\n                    1,\\n                    \\\"0x00\\\"\\n                );\\n            } else {\\n                IERC721Upgradeable(_assetAddress[i]).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _tokenId[i]\\n                );\\n            }\\n\\n            emit OrderCreated(\\n                _orderId[i],\\n                _assetAddress[i],\\n                _tokenId[i],\\n                _is1155[i],\\n                msg.sender,\\n                _root[i]\\n            );\\n        }\\n    }\\n\\n    /// @notice cancel the order and return NFT back to the original holder\\n    /// @param _orderId ID that want to cancel\\n    function cancelOrder(uint256 _orderId) public whenNotPaused nonReentrant {\\n        require(orders[_orderId].active == true, \\\"Given ID is invalid\\\");\\n        require(orders[_orderId].owner == msg.sender, \\\"You are not the owner\\\");\\n\\n        if (orders[_orderId].is1155 == true) {\\n            IERC1155Upgradeable(orders[_orderId].assetAddress).safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    orders[_orderId].tokenId,\\n                    1,\\n                    \\\"0x00\\\"\\n                );\\n        } else {\\n            IERC721Upgradeable(orders[_orderId].assetAddress).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                orders[_orderId].tokenId\\n            );\\n        }\\n\\n        orders[_orderId].canceled = true;\\n        orders[_orderId].ended = true;\\n\\n        emit OrderCanceled(_orderId, msg.sender);\\n    }\\n\\n    function eligibleToSwap(\\n        uint256 _orderId,\\n        address _assetAddress,\\n        uint256 _tokenId,\\n        bytes32[] memory _proof\\n    ) public view validateId(_orderId) returns (bool) {\\n        return\\n            _eligibleToSwap(_orderId, _assetAddress, _tokenId, _proof);\\n    }\\n\\n    function swap(\\n        uint256 _orderId,\\n        address _assetAddress,\\n        uint256 _tokenId,\\n        bool _is1155,\\n        bytes32[] memory _proof\\n    ) public validateId(_orderId) whenNotPaused nonReentrant {\\n        require(\\n\\t\\t\\t_eligibleToSwap(_orderId, _assetAddress, _tokenId, _proof) == true,\\n\\t\\t\\t\\\"The caller is not eligible to claim the NFT\\\"\\n\\t\\t);\\n\\n        // taking NFT\\n        if (_is1155 == true) {\\n            IERC1155Upgradeable(_assetAddress).safeTransferFrom(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\torders[_orderId].owner,\\n\\t\\t\\t\\t_tokenId,\\n\\t\\t\\t\\t1,\\n\\t\\t\\t\\t\\\"0x00\\\"\\n\\t\\t\\t);\\n        } else {\\n            IERC721Upgradeable(_assetAddress).safeTransferFrom(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\torders[_orderId].owner,\\n\\t\\t\\t\\t_tokenId\\n\\t\\t\\t);\\n        }\\n\\n        // giving NFT\\n        if (orders[_orderId].is1155 == true) {\\n            IERC1155Upgradeable(orders[_orderId].assetAddress).safeTransferFrom(\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\torders[_orderId].tokenId,\\n\\t\\t\\t\\t1,\\n\\t\\t\\t\\t\\\"0x00\\\"\\n\\t\\t\\t);\\n        } else {\\n            IERC721Upgradeable(orders[_orderId].assetAddress).safeTransferFrom(\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\torders[_orderId].tokenId\\n\\t\\t\\t);\\n        }\\n\\n        orders[_orderId].ended = true;\\n\\n        emit Swapped(_orderId, msg.sender, _assetAddress, _tokenId, orders[_orderId].owner,  orders[_orderId].assetAddress , orders[_orderId].tokenId );\\n    }\\n\\n    function swapBatch(\\n        uint256[] calldata _orderIds,\\n        address[] calldata _assetAddress,\\n        uint256[] calldata _tokenId,\\n        bool[] calldata _is1155,\\n        bytes32[][] calldata _proof\\n    )\\n        public\\n        validateIds(_orderIds)\\n        whenNotPaused\\n        nonReentrant\\n    {\\n         for (uint256 i = 0; i < _orderIds.length; i++) {\\n            uint256 orderId = _orderIds[i];\\n            require(\\n                _eligibleToSwap(orderId, _assetAddress[i], _tokenId[i], _proof[i]) == true,\\n                \\\"The caller is not eligible to claim the NFT\\\"\\n            );\\n\\n            // taking NFT\\n            if (_is1155[i] == true) {\\n                IERC1155Upgradeable(_assetAddress[i]).safeTransferFrom(\\n                    msg.sender,\\n                    orders[orderId].owner,\\n                    _tokenId[i],\\n                    1,\\n                    \\\"0x00\\\"\\n                );\\n            } else {\\n                IERC721Upgradeable(_assetAddress[i]).safeTransferFrom(\\n                    msg.sender,\\n                    orders[orderId].owner,\\n                    _tokenId[i]\\n                );\\n            }\\n\\n            // giving NFT\\n            if (orders[orderId].is1155 == true) {\\n                IERC1155Upgradeable(orders[orderId].assetAddress).safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    orders[orderId].tokenId,\\n                    1,\\n                    \\\"0x00\\\"\\n                );\\n            } else {\\n                IERC721Upgradeable(orders[orderId].assetAddress).safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    orders[orderId].tokenId\\n                );\\n            }\\n\\n            orders[orderId].ended = true;\\n\\n            emit Swapped(orderId, msg.sender, _assetAddress[i], _tokenId[i], orders[orderId].owner,  orders[orderId].assetAddress , orders[orderId].tokenId );\\n         }\\n    }\\n\\n    // pause the contract\\n    function setPaused() public onlyWhitelisted whenNotPaused {\\n        _pause();\\n    }\\n\\n    // unpause the contract\\n    function setUnpaused() public onlyWhitelisted whenPaused {\\n        _unpause();\\n    }\\n\\n    function setMaxBatchOrders(uint256 _value) public onlyWhitelisted {\\n        require(_value != 0, \\\"Invalid value\\\");\\n        maxBatchOrders = _value;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    modifier validateId(uint256 _orderId) {\\n        require(orders[_orderId].active == true, \\\"Given ID is invalid\\\");\\n        require(\\n            orders[_orderId].canceled == false,\\n            \\\"The order has been cancelled\\\"\\n        );\\n        require(\\n            orders[_orderId].ended == false,\\n            \\\"The order has been fulfilled\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validateIds(uint256[] memory _orderIds) {\\n        require( maxBatchOrders >= _orderIds.length , \\\"Exceed batch size\\\" );\\n        for (uint256 i = 0; i < _orderIds.length; i++) {\\n            require(orders[i].active == true, \\\"Given ID is invalid\\\");\\n            require(\\n                orders[i].canceled == false,\\n                \\\"The order has been cancelled\\\"\\n            );\\n            require(\\n                orders[i].ended == false,\\n                \\\"The order has been fulfilled\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    function _eligibleToSwap(\\n        uint256 _orderId,\\n        address _assetAddress,\\n        uint256 _tokenId,\\n        bytes32[] memory _proof\\n    ) internal view returns (bool) {\\n        bytes32 leaf = keccak256(abi.encodePacked(_assetAddress, _tokenId));\\n        return\\n            MerkleProofUpgradeable.verify(_proof, orders[_orderId].root, leaf);\\n    }\\n}\\n\",\"keccak256\":\"0x43821662e90d21cb75feba08a382c43f604f1131ffb38ddeffe3bac405b8e260\",\"license\":\"MIT\"},\"contracts/utility/WhitelistUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev The contract manages a list of whitelisted addresses\\n */\\ncontract WhitelistUpgradeable is OwnableUpgradeable {\\n  using AddressUpgradeable for address;\\n\\n  mapping(address => bool) private whitelist;\\n\\n  function __Whitelist_init() internal initializer {\\n    OwnableUpgradeable.__Ownable_init();\\n    address msgSender = _msgSender();\\n    whitelist[msgSender] = true;\\n  }\\n\\n  /**\\n   * @dev returns true if a given address is whitelisted, false if not\\n   *\\n   * @param _address address to check\\n   *\\n   * @return true if the address is whitelisted, false if not\\n   */\\n  function isWhitelisted(address _address) public view returns (bool) {\\n    return whitelist[_address];\\n  }\\n\\n  modifier onlyWhitelisted() {\\n    address sender = _msgSender();\\n    require(isWhitelisted(sender), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev adds a given address to the whitelist\\n   *\\n   * @param _address address to add\\n   */\\n  function addAddress(address _address) public onlyWhitelisted {\\n    if (whitelist[_address])\\n      // checks if the address is already whitelisted\\n      return;\\n\\n    whitelist[_address] = true;\\n  }\\n\\n  /**\\n   * @dev removes a given address from the whitelist\\n   *\\n   * @param _address address to remove\\n   */\\n  function removeAddress(address _address) public onlyWhitelisted {\\n    if (!whitelist[_address])\\n      // checks if the address is actually whitelisted\\n      return;\\n\\n    whitelist[_address] = false;\\n  }\\n}\\n\",\"keccak256\":\"0x4ffd52746018b6f0708b38577236ae02a479b60a2a05fd8415f814d2f899eb42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613010806100206000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80635c975abb116100b8578063ae3430131161007c578063ae34301314610286578063bc197c8114610299578063c0275e8d146102ac578063c4d66de8146102bf578063f23a6e61146102d2578063f2fde38b146102e557610142565b80635c975abb1461022757806367c2f12c1461022f578063715018a6146102425780638da5cb5b1461024a578063a85c38ef1461025f57610142565b806338eada1c1161010a57806338eada1c146101c05780633af32abf146101d35780633c89edce146101e65780634ba79dfe146101ee57806350cbf10e14610201578063514fcac71461021457610142565b806301ffc9a71461014757806306222a13146101705780630cdc52a414610185578063150b7a021461019857806337a66d85146101b8575b600080fd5b61015a610155366004612926565b6102f8565b6040516101679190612be5565b60405180910390f35b61018361017e3660046127a2565b610317565b005b61018361019336600461288d565b6108e4565b6101ab6101a63660046126d5565b610d9b565b6040516101679190612bf0565b610183610dab565b6101836101ce366004612609565b610e0c565b61015a6101e1366004612609565b610e8b565b610183610ea9565b6101836101fc366004612609565b610f06565b61018361020f36600461294e565b610f7e565b61018361022236600461294e565b610fd3565b61015a611221565b61018361023d3660046129bb565b61122b565b610183611606565b61025261168f565b6040516101679190612abc565b61027261026d36600461294e565b61169e565b604051610167989796959493929190612b9b565b61015a610294366004612966565b6116f9565b6101ab6102a736600461262b565b6117b9565b6101836102ba366004612a21565b6117ca565b6101836102cd366004612609565b6119e0565b6101ab6102e036600461273d565b611acb565b6101836102f3366004612609565b611adc565b6001600160e01b03191660009081526098602052604090205460ff1690565b898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250508251610193541015915061037990505760405162461bcd60e51b815260040161037090612e34565b60405180910390fd5b60005b8151811015610435576000818152610192602052604090206004015462010000900460ff1615156001146103c25760405162461bcd60e51b815260040161037090612c61565b6000818152610192602052604090206004015460ff16156103f55760405162461bcd60e51b815260040161037090612d85565b60008181526101926020526040902060040154610100900460ff161561042d5760405162461bcd60e51b815260040161037090612ef2565b60010161037c565b5061043e611221565b1561045b5760405162461bcd60e51b815260040161037090612dbc565b6002606654141561047e5760405162461bcd60e51b815260040161037090612ebb565b600260665560005b8a8110156108d15760008c8c8381811061049c57fe5b905060200201359050610532818c8c858181106104b557fe5b90506020020160208101906104ca9190612609565b8b8b868181106104d657fe5b905060200201358888878181106104e957fe5b90506020028101906104fb9190612f29565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611b9d92505050565b15156001146105535760405162461bcd60e51b815260040161037090612c8e565b86868381811061055f57fe5b9050602002016020810190610574919061290a565b151560011415610638578a8a8381811061058a57fe5b905060200201602081019061059f9190612609565b600082815261019260205260409020600201546001600160a01b039182169163f242432a913391610100909104168c8c878181106105d957fe5b9050602002013560016040518563ffffffff1660e01b81526004016106019493929190612b2f565b600060405180830381600087803b15801561061b57600080fd5b505af115801561062f573d6000803e3d6000fd5b505050506106eb565b8a8a8381811061064457fe5b90506020020160208101906106599190612609565b600082815261019260205260409020600201546001600160a01b03918216916342842e0e913391610100909104168c8c8781811061069357fe5b905060200201356040518463ffffffff1660e01b81526004016106b893929190612ad0565b600060405180830381600087803b1580156106d257600080fd5b505af11580156106e6573d6000803e3d6000fd5b505050505b6000818152610192602052604090206002015460ff1615156001141561078b57600081815261019260205260409081902080546001918201549251637921219560e11b81526001600160a01b039091169263f242432a9261075492309233929091600401612b2f565b600060405180830381600087803b15801561076e57600080fd5b505af1158015610782573d6000803e3d6000fd5b50505050610806565b600081815261019260205260409081902080546001909101549151632142170760e11b81526001600160a01b03909116916342842e0e916107d3913091339190600401612ad0565b600060405180830381600087803b1580156107ed57600080fd5b505af1158015610801573d6000803e3d6000fd5b505050505b600081815261019260205260409020600401805461ff001916610100179055807f805c49e22da9be2e9133b26f3b3d856eeac0cc4afa93c4b16eccbe2b5fd7de1b338d8d8681811061085457fe5b90506020020160208101906108699190612609565b8c8c8781811061087557fe5b600088815261019260209081526040918290206002810154815460019092015493516108c0999897959093029094013594506001600160a01b03610100909404841693169190612af4565b60405180910390a250600101610486565b5050600160665550505050505050505050565b6108ec611221565b156109095760405162461bcd60e51b815260040161037090612dbc565b6002606654141561092c5760405162461bcd60e51b815260040161037090612ebb565b600260665560005b89811015610d895761019260008c8c8481811061094d57fe5b602090810292909201358352508101919091526040016000206004015462010000900460ff16156109905760405162461bcd60e51b815260040161037090612c05565b600161019260008d8d858181106109a357fe5b90506020020135815260200190815260200160002060040160026101000a81548160ff0219169083151502179055508888828181106109de57fe5b90506020020160208101906109f39190612609565b61019260008d8d85818110610a0457fe5b90506020020135815260200190815260200160002060000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550868682818110610a4c57fe5b9050602002013561019260008d8d85818110610a6457fe5b90506020020135815260200190815260200160002060010181905550848482818110610a8c57fe5b9050602002016020810190610aa1919061290a565b61019260008d8d85818110610ab257fe5b90506020020135815260200190815260200160002060020160006101000a81548160ff021916908315150217905550828282818110610aed57fe5b9050602002013561019260008d8d85818110610b0557fe5b905060200201358152602001908152602001600020600301819055503361019260008d8d85818110610b3357fe5b90506020020135815260200190815260200160002060020160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550848482818110610b7b57fe5b9050602002016020810190610b90919061290a565b151560011415610c3657888882818110610ba657fe5b9050602002016020810190610bbb9190612609565b6001600160a01b031663f242432a33308a8a86818110610bd757fe5b9050602002013560016040518563ffffffff1660e01b8152600401610bff9493929190612b2f565b600060405180830381600087803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b50505050610ccb565b888882818110610c4257fe5b9050602002016020810190610c579190612609565b6001600160a01b03166342842e0e33308a8a86818110610c7357fe5b905060200201356040518463ffffffff1660e01b8152600401610c9893929190612ad0565b600060405180830381600087803b158015610cb257600080fd5b505af1158015610cc6573d6000803e3d6000fd5b505050505b8a8a82818110610cd757fe5b905060200201357fde3b249a928a461ed26b543eee0d35d3b55f1de36390180411348c212f26b5098a8a84818110610d0b57fe5b9050602002016020810190610d209190612609565b898985818110610d2c57fe5b90506020020135888886818110610d3f57fe5b9050602002016020810190610d54919061290a565b33888888818110610d6157fe5b90506020020135604051610d79959493929190612b68565b60405180910390a2600101610934565b50506001606655505050505050505050565b630a85bd0160e11b949350505050565b6000610db5611bed565b9050610dc081610e8b565b610ddc5760405162461bcd60e51b815260040161037090612e5f565b610de4611221565b15610e015760405162461bcd60e51b815260040161037090612dbc565b610e09611bf1565b50565b6000610e16611bed565b9050610e2181610e8b565b610e3d5760405162461bcd60e51b815260040161037090612e5f565b6001600160a01b03821660009081526065602052604090205460ff1615610e6357610e87565b6001600160a01b0382166000908152606560205260409020805460ff191660011790555b5050565b6001600160a01b031660009081526065602052604090205460ff1690565b6000610eb3611bed565b9050610ebe81610e8b565b610eda5760405162461bcd60e51b815260040161037090612e5f565b610ee2611221565b610efe5760405162461bcd60e51b815260040161037090612c33565b610e09611c64565b6000610f10611bed565b9050610f1b81610e8b565b610f375760405162461bcd60e51b815260040161037090612e5f565b6001600160a01b03821660009081526065602052604090205460ff16610f5c57610e87565b506001600160a01b03166000908152606560205260409020805460ff19169055565b6000610f88611bed565b9050610f9381610e8b565b610faf5760405162461bcd60e51b815260040161037090612e5f565b81610fcc5760405162461bcd60e51b815260040161037090612e94565b5061019355565b610fdb611221565b15610ff85760405162461bcd60e51b815260040161037090612dbc565b6002606654141561101b5760405162461bcd60e51b815260040161037090612ebb565b60026066556000818152610192602052604090206004015462010000900460ff16151560011461105d5760405162461bcd60e51b815260040161037090612c61565b6000818152610192602052604090206002015461010090046001600160a01b0316331461109c5760405162461bcd60e51b815260040161037090612d56565b6000818152610192602052604090206002015460ff1615156001141561113c57600081815261019260205260409081902080546001918201549251637921219560e11b81526001600160a01b039091169263f242432a9261110592309233929091600401612b2f565b600060405180830381600087803b15801561111f57600080fd5b505af1158015611133573d6000803e3d6000fd5b505050506111b7565b600081815261019260205260409081902080546001909101549151632142170760e11b81526001600160a01b03909116916342842e0e91611184913091339190600401612ad0565b600060405180830381600087803b15801561119e57600080fd5b505af11580156111b2573d6000803e3d6000fd5b505050505b6000818152610192602052604090819020600401805461ff001960ff19909116600117166101001790555181907f9384174c8517f5537b08e79211fc039e8a098571a3a2b4cb21dfa6f3237e8de190611211903390612abc565b60405180910390a2506001606655565b6101605460ff1690565b60008581526101926020526040902060040154859062010000900460ff16151560011461126a5760405162461bcd60e51b815260040161037090612c61565b6000818152610192602052604090206004015460ff161561129d5760405162461bcd60e51b815260040161037090612d85565b60008181526101926020526040902060040154610100900460ff16156112d55760405162461bcd60e51b815260040161037090612ef2565b6112dd611221565b156112fa5760405162461bcd60e51b815260040161037090612dbc565b6002606654141561131d5760405162461bcd60e51b815260040161037090612ebb565b600260665561132e86868685611b9d565b151560011461134f5760405162461bcd60e51b815260040161037090612c8e565b600183151514156113de576000868152610192602052604090819020600201549051637921219560e11b81526001600160a01b038088169263f242432a926113a7923392610100900416908990600190600401612b2f565b600060405180830381600087803b1580156113c157600080fd5b505af11580156113d5573d6000803e3d6000fd5b5050505061145b565b6000868152610192602052604090819020600201549051632142170760e11b81526001600160a01b03808816926342842e0e92611428923392610100900416908990600401612ad0565b600060405180830381600087803b15801561144257600080fd5b505af1158015611456573d6000803e3d6000fd5b505050505b6000868152610192602052604090206002015460ff161515600114156114fb57600086815261019260205260409081902080546001918201549251637921219560e11b81526001600160a01b039091169263f242432a926114c492309233929091600401612b2f565b600060405180830381600087803b1580156114de57600080fd5b505af11580156114f2573d6000803e3d6000fd5b50505050611576565b600086815261019260205260409081902080546001909101549151632142170760e11b81526001600160a01b03909116916342842e0e91611543913091339190600401612ad0565b600060405180830381600087803b15801561155d57600080fd5b505af1158015611571573d6000803e3d6000fd5b505050505b600086815261019260205260409081902060048101805461ff001916610100908117909155600282015482546001939093015493518a947f805c49e22da9be2e9133b26f3b3d856eeac0cc4afa93c4b16eccbe2b5fd7de1b946115f19433948d948d946001600160a01b039390920483169390921691612af4565b60405180910390a25050600160665550505050565b61160e611bed565b6001600160a01b031661161f61168f565b6001600160a01b0316146116455760405162461bcd60e51b815260040161037090612e5f565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b61019260205260009081526040902080546001820154600283015460038401546004909401546001600160a01b0393841694929360ff8084169461010094859004909216939192808216928104821691620100009091041688565b60008481526101926020526040812060040154859062010000900460ff1615156001146117385760405162461bcd60e51b815260040161037090612c61565b6000818152610192602052604090206004015460ff161561176b5760405162461bcd60e51b815260040161037090612d85565b60008181526101926020526040902060040154610100900460ff16156117a35760405162461bcd60e51b815260040161037090612ef2565b6117af86868686611b9d565b9695505050505050565b63bc197c8160e01b95945050505050565b600260665414156117ed5760405162461bcd60e51b815260040161037090612ebb565b60026066556117fa611221565b156118175760405162461bcd60e51b815260040161037090612dbc565b6000858152610192602052604090206004015462010000900460ff16156118505760405162461bcd60e51b815260040161037090612c05565b60008581526101926020526040902060048101805462ff000019166201000017905580546001600160a01b0386166001600160a01b0319909116178155600181810185905560028201805460039093018490553361010002610100600160a81b031986151560ff19909516851716179055141561193157604051637921219560e11b81526001600160a01b0385169063f242432a906118fa90339030908890600190600401612b2f565b600060405180830381600087803b15801561191457600080fd5b505af1158015611928573d6000803e3d6000fd5b50505050611994565b604051632142170760e11b81526001600160a01b038516906342842e0e9061196190339030908890600401612ad0565b600060405180830381600087803b15801561197b57600080fd5b505af115801561198f573d6000803e3d6000fd5b505050505b847fde3b249a928a461ed26b543eee0d35d3b55f1de36390180411348c212f26b50985858533866040516119cc959493929190612b68565b60405180910390a250506001606655505050565b600054610100900460ff16806119f957506119f9611cbc565b80611a07575060005460ff16155b611a235760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff16158015611a4e576000805460ff1961ff0019909116610100171660011790555b611a56611ccd565b611a5e611d57565b611a66611dcd565b611a6e611e43565b611a76611ec1565b611a7e611f3f565b611a8782610e0c565b600a610193556001600160a01b0382163314611aa657611aa633610e0c565b611ab6630a85bd0160e11b611ff6565b8015610e87576000805461ff00191690555050565b63f23a6e6160e01b95945050505050565b611ae4611bed565b6001600160a01b0316611af561168f565b6001600160a01b031614611b1b5760405162461bcd60e51b815260040161037090612e5f565b6001600160a01b038116611b415760405162461bcd60e51b815260040161037090612cd9565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000808484604051602001611bb3929190612a8c565b6040516020818303038152906040528051906020012090506117af8361019260008981526020019081526020016000206003015483612045565b3390565b611bf9611221565b15611c165760405162461bcd60e51b815260040161037090612dbc565b610160805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c4d611bed565b604051611c5a9190612abc565b60405180910390a1565b611c6c611221565b611c885760405162461bcd60e51b815260040161037090612c33565b610160805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611c4d611bed565b6000611cc7306120e2565b15905090565b600054610100900460ff1680611ce65750611ce6611cbc565b80611cf4575060005460ff16155b611d105760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff16158015611d3b576000805460ff1961ff0019909116610100171660011790555b611d436120e8565b8015610e09576000805461ff001916905550565b600054610100900460ff1680611d705750611d70611cbc565b80611d7e575060005460ff16155b611d9a5760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff16158015611dc5576000805460ff1961ff0019909116610100171660011790555b611d4361216f565b600054610100900460ff1680611de65750611de6611cbc565b80611df4575060005460ff16155b611e105760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff16158015611e3b576000805460ff1961ff0019909116610100171660011790555b611d436121f0565b600054610100900460ff1680611e5c5750611e5c611cbc565b80611e6a575060005460ff16155b611e865760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff16158015611eb1576000805460ff1961ff0019909116610100171660011790555b611eb96121f0565b611dc561226e565b600054610100900460ff1680611eda5750611eda611cbc565b80611ee8575060005460ff16155b611f045760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff16158015611f2f576000805460ff1961ff0019909116610100171660011790555b611f3761216f565b611d436122ec565b600054610100900460ff1680611f585750611f58611cbc565b80611f66575060005460ff16155b611f825760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff16158015611fad576000805460ff1961ff0019909116610100171660011790555b611fb5612379565b6000611fbf611bed565b6001600160a01b03166000908152606560205260409020805460ff19166001179055508015610e09576000805461ff001916905550565b6001600160e01b031980821614156120205760405162461bcd60e51b815260040161037090612d1f565b6001600160e01b0319166000908152609860205260409020805460ff19166001179055565b600081815b85518110156120d757600086828151811061206157fe5b602002602001015190508083116120a2578281604051602001612085929190612aae565b6040516020818303038152906040528051906020012092506120ce565b80836040516020016120b5929190612aae565b6040516020818303038152906040528051906020012092505b5060010161204a565b509092149392505050565b3b151590565b600054610100900460ff16806121015750612101611cbc565b8061210f575060005460ff16155b61212b5760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff16158015612156576000805460ff1961ff0019909116610100171660011790555b60016066558015610e09576000805461ff001916905550565b600054610100900460ff16806121885750612188611cbc565b80612196575060005460ff16155b6121b25760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff16158015611d43576000805460ff1961ff0019909116610100171660011790558015610e09576000805461ff001916905550565b600054610100900460ff16806122095750612209611cbc565b80612217575060005460ff16155b6122335760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff1615801561225e576000805460ff1961ff0019909116610100171660011790555b611d436301ffc9a760e01b611ff6565b600054610100900460ff16806122875750612287611cbc565b80612295575060005460ff16155b6122b15760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff161580156122dc576000805460ff1961ff0019909116610100171660011790555b611d43630271189760e51b611ff6565b600054610100900460ff16806123055750612305611cbc565b80612313575060005460ff16155b61232f5760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff1615801561235a576000805460ff1961ff0019909116610100171660011790555b610160805460ff191690558015610e09576000805461ff001916905550565b600054610100900460ff16806123925750612392611cbc565b806123a0575060005460ff16155b6123bc5760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff161580156123e7576000805460ff1961ff0019909116610100171660011790555b6123ef61216f565b611d43600054610100900460ff168061240b575061240b611cbc565b80612419575060005460ff16155b6124355760405162461bcd60e51b815260040161037090612de6565b600054610100900460ff16158015612460576000805460ff1961ff0019909116610100171660011790555b600061246a611bed565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610e09576000805461ff001916905550565b80356001600160a01b03811681146124e357600080fd5b92915050565b60008083601f8401126124fa578182fd5b50813567ffffffffffffffff811115612511578182fd5b602083019150836020808302850101111561252b57600080fd5b9250929050565b600082601f830112612542578081fd5b813561255561255082612f97565b612f70565b81815291506020808301908481018184028601820187101561257657600080fd5b60005b8481101561259557813584529282019290820190600101612579565b505050505092915050565b600082601f8301126125b0578081fd5b813567ffffffffffffffff8111156125c6578182fd5b6125d9601f8201601f1916602001612f70565b91508082528360208285010111156125f057600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561261a578081fd5b61262483836124cc565b9392505050565b600080600080600060a08688031215612642578081fd5b853561264d81612fb7565b9450602086013561265d81612fb7565b9350604086013567ffffffffffffffff80821115612679578283fd5b61268589838a01612532565b9450606088013591508082111561269a578283fd5b6126a689838a01612532565b935060808801359150808211156126bb578283fd5b506126c8888289016125a0565b9150509295509295909350565b600080600080608085870312156126ea578384fd5b6126f486866124cc565b935061270386602087016124cc565b925060408501359150606085013567ffffffffffffffff811115612725578182fd5b612731878288016125a0565b91505092959194509250565b600080600080600060a08688031215612754578081fd5b61275e87876124cc565b945061276d87602088016124cc565b93506040860135925060608601359150608086013567ffffffffffffffff811115612796578182fd5b6126c8888289016125a0565b60008060008060008060008060008060a08b8d0312156127c0578485fd5b8a3567ffffffffffffffff808211156127d7578687fd5b6127e38e838f016124e9565b909c509a5060208d01359150808211156127fb578687fd5b6128078e838f016124e9565b909a50985060408d013591508082111561281f578687fd5b61282b8e838f016124e9565b909850965060608d0135915080821115612843578586fd5b61284f8e838f016124e9565b909650945060808d0135915080821115612867578384fd5b506128748d828e016124e9565b915080935050809150509295989b9194979a5092959850565b60008060008060008060008060008060a08b8d0312156128ab578586fd5b8a3567ffffffffffffffff808211156128c2578788fd5b6128ce8e838f016124e9565b909c509a5060208d01359150808211156128e6578788fd5b6128f28e838f016124e9565b909a50985060408d013591508082111561281f578788fd5b60006020828403121561291b578081fd5b813561262481612fcc565b600060208284031215612937578081fd5b81356001600160e01b031981168114612624578182fd5b60006020828403121561295f578081fd5b5035919050565b6000806000806080858703121561297b578182fd5b84359350602085013561298d81612fb7565b925060408501359150606085013567ffffffffffffffff8111156129af578182fd5b61273187828801612532565b600080600080600060a086880312156129d2578283fd5b853594506129e387602088016124cc565b93506040860135925060608601356129fa81612fcc565b9150608086013567ffffffffffffffff811115612a15578182fd5b6126c888828901612532565b600080600080600060a08688031215612a38578283fd5b85359450612a4987602088016124cc565b93506040860135925060608601358015158114612a64578182fd5b949793965091946080013592915050565b60048152630307830360e41b602082015260400190565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b918252602082015260400190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039687168152948616602086015260408501939093529084166060840152909216608082015260a081019190915260c00190565b6001600160a01b03858116825284166020820152604081018390526060810182905260a0608082018190526000906117af908301612a75565b6001600160a01b039586168152602081019490945291151560408401529092166060820152608081019190915260a00190565b6001600160a01b03988916815260208101979097529415156040870152929095166060850152608084015292151560a083015291151560c082015290151560e08201526101000190565b901515815260200190565b6001600160e01b031991909116815260200190565b60208082526014908201527311da5d995b881251081a5cc81bd8d8dd5c1a595960621b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526013908201527211da5d995b881251081a5cc81a5b9d985b1a59606a1b604082015260600190565b6020808252602b908201527f5468652063616c6c6572206973206e6f7420656c696769626c6520746f20636c60408201526a185a5b481d1a194813919560aa1b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604082015260600190565b6020808252601590820152742cb7ba9030b932903737ba103a34329037bbb732b960591b604082015260600190565b6020808252601c908201527f546865206f7264657220686173206265656e2063616e63656c6c656400000000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601190820152704578636565642062617463682073697a6560781b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c496e76616c69642076616c756560981b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601c908201527f546865206f7264657220686173206265656e2066756c66696c6c656400000000604082015260600190565b6000808335601e19843603018112612f3f578283fd5b83018035915067ffffffffffffffff821115612f59578283fd5b602090810192508102360382131561252b57600080fd5b60405181810167ffffffffffffffff81118282101715612f8f57600080fd5b604052919050565b600067ffffffffffffffff821115612fad578081fd5b5060209081020190565b6001600160a01b0381168114610e0957600080fd5b8015158114610e0957600080fdfea2646970667358221220d90efb67501780307caac5e2b21823eac1f9f0e04f1ddc9759aab02ba5ffbd1964736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAddress(address)": {
        "details": "adds a given address to the whitelist",
        "params": {
          "_address": "address to add"
        }
      },
      "cancelOrder(uint256)": {
        "params": {
          "_orderId": "ID that want to cancel"
        }
      },
      "createOrder(uint256,address,uint256,bool,bytes32)": {
        "params": {
          "_orderId": "ID for the event"
        }
      },
      "isWhitelisted(address)": {
        "details": "returns true if a given address is whitelisted, false if not",
        "params": {
          "_address": "address to check"
        },
        "returns": {
          "_0": "true if the address is whitelisted, false if not"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeAddress(address)": {
        "details": "removes a given address from the whitelist",
        "params": {
          "_address": "address to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "P2P marketplace",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelOrder(uint256)": {
        "notice": "cancel the order and return NFT back to the original holder"
      },
      "createOrder(uint256,address,uint256,bool,bytes32)": {
        "notice": "create an order and deposit NFT to the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1105,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1108,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2223,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 465,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 584,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22399,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "whitelist",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2351,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "_status",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 2394,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 673,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 730,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1800,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1297,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1242,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2245,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "_paused",
        "offset": 0,
        "slot": "352",
        "type": "t_bool"
      },
      {
        "astId": 2336,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "353",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11785,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "orders",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_uint256,t_struct(Order)11781_storage)"
      },
      {
        "astId": 11787,
        "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
        "label": "maxBatchOrders",
        "offset": 0,
        "slot": "403",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Order)11781_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTMarketplaceUpgradeable.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)11781_storage"
      },
      "t_struct(Order)11781_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketplaceUpgradeable.Order",
        "members": [
          {
            "astId": 11766,
            "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
            "label": "assetAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11768,
            "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11770,
            "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
            "label": "is1155",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 11772,
            "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
            "label": "owner",
            "offset": 1,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 11774,
            "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
            "label": "root",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 11776,
            "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
            "label": "canceled",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 11778,
            "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
            "label": "ended",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 11780,
            "contract": "contracts/NFTMarketplaceUpgradeable.sol:NFTMarketplaceUpgradeable",
            "label": "active",
            "offset": 2,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}