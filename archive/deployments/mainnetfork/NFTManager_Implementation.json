{
  "address": "0x2FdCA4a18B446f436F0BbEa34394620a74F60156",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "variantId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "collateralId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "PositionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "variantId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "collateralId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "PositionRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ROUTER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_globalCollatelizationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_priceFeeder",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "addCollateralAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenValue",
          "type": "uint256"
        }
      ],
      "name": "addSyntheticVariant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "collaterals",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "priceFeeder",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "disabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discountFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_variantId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_collateralId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "estimateMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_variantId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_collateralId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "estimateRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_variantId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_collateralId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "forceMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_variantId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_collateralId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "forceRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_collateralId",
          "type": "uint8"
        }
      ],
      "name": "getCollateralPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSyntheticPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_variantId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_collateralId",
          "type": "uint8"
        }
      ],
      "name": "getVariantCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalCollatelizationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_targetCurrency",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_priceResolver",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_syntheticNFT",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_variantId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_collateralId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCollateralAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offsetFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceResolver",
      "outputs": [
        {
          "internalType": "contract IPriceResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_variantId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_collateralId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_disabled",
          "type": "bool"
        }
      ],
      "name": "setCollateralAssetDisable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setDiscountFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setMaxNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setNftUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setOffsetFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceResolverAddress",
          "type": "address"
        }
      ],
      "name": "setPriceResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setRedeemFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_syntheticNFT",
          "type": "address"
        }
      ],
      "name": "setSyntheticNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_disabled",
          "type": "bool"
        }
      ],
      "name": "setSyntheticVariantDisable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUnpaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticNFT",
      "outputs": [
        {
          "internalType": "contract ISyntheticNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticVariantCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "syntheticVariants",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOutstanding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalIssued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBurnt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "disabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetCollatelizationRatio",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetCurrency",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalOutstanding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "totalRawCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        }
      ],
      "name": "variantCollatelizationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x80aabbecd52268f8ab5ee0636d4bd744e976b6f278c7b601f51ce00adace8eb7",
  "receipt": {
    "to": null,
    "from": "0x27dDF44eC9E32343599F7B939e4c35c034f78076",
    "contractAddress": "0x2FdCA4a18B446f436F0BbEa34394620a74F60156",
    "transactionIndex": 0,
    "gasUsed": "5400689",
    "logsBloom": "0x
    "blockHash": "0xfc5a8c4b95e1b1824a37abd0b44509f3f6aeacb5edc9740a2beecfcc2445a9f8",
    "transactionHash": "0x80aabbecd52268f8ab5ee0636d4bd744e976b6f278c7b601f51ce00adace8eb7",
    "logs": [],
    "blockNumber": 30972345,
    "cumulativeGasUsed": "5400689",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8265e4161eec9b5a7dcd6b2c71b6665f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"variantId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"collateralId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"PositionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"variantId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"collateralId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"PositionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_globalCollatelizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_priceFeeder\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"addCollateralAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenValue\",\"type\":\"uint256\"}],\"name\":\"addSyntheticVariant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"collaterals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"priceFeeder\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_variantId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_collateralId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"estimateMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_variantId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_collateralId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"estimateRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_variantId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_collateralId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"forceMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_variantId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_collateralId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"forceRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_collateralId\",\"type\":\"uint8\"}],\"name\":\"getCollateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSyntheticPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_variantId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_collateralId\",\"type\":\"uint8\"}],\"name\":\"getVariantCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalCollatelizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_targetCurrency\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_priceResolver\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_syntheticNFT\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_variantId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_collateralId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCollateralAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offsetFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceResolver\",\"outputs\":[{\"internalType\":\"contract IPriceResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_variantId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_collateralId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_disabled\",\"type\":\"bool\"}],\"name\":\"setCollateralAssetDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setDiscountFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setNftUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setOffsetFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceResolverAddress\",\"type\":\"address\"}],\"name\":\"setPriceResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_syntheticNFT\",\"type\":\"address\"}],\"name\":\"setSyntheticNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_disabled\",\"type\":\"bool\"}],\"name\":\"setSyntheticVariantDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnpaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticNFT\",\"outputs\":[{\"internalType\":\"contract ISyntheticNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticVariantCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"syntheticVariants\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOutstanding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBurnt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetCollatelizationRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetCurrency\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"totalRawCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"variantCollatelizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAddress(address)\":{\"details\":\"adds a given address to the whitelist\",\"params\":{\"_address\":\"address to add\"}},\"estimateMint(uint8,uint8,uint256)\":{\"params\":{\"_collateralId\":\"the collateral asset to use\",\"_tokenAmount\":\"total NFT to be created\",\"_variantId\":\"the NFT's variant id\"},\"returns\":{\"amount\":\"the amount of the collateral need for minting\"}},\"estimateRedeem(uint8,uint8,uint256)\":{\"params\":{\"_collateralId\":\"the collateral asset to use\",\"_tokenAmount\":\"total NFT to be burnt\",\"_variantId\":\"the NFT's variant id\"},\"returns\":{\"amount\":\"amount of collateral to be returned\"}},\"getCollateralPrice(uint8)\":{\"params\":{\"_collateralId\":\"the collateral id\"},\"returns\":{\"_0\":\"US price per a collateral token\"}},\"getSyntheticPrice()\":{\"returns\":{\"_0\":\"US price per a synthetic token\"}},\"getVariantCollateral(uint8,uint8)\":{\"params\":{\"_collateralId\":\"the collateral id\"},\"returns\":{\"_0\":\"amount total amount of collateral\"}},\"globalCollatelizationRatio()\":{\"returns\":{\"_0\":\"the system collateral ratio\"}},\"initialize(address,bytes32,bytes32,bytes32,address)\":{\"params\":{\"_devAddress\":\"dev address\",\"_registryAddress\":\"the address of the registry contract\"}},\"isWhitelisted(address)\":{\"details\":\"returns true if a given address is whitelisted, false if not\",\"params\":{\"_address\":\"address to check\"},\"returns\":{\"_0\":\"true if the address is whitelisted, false if not\"}},\"mint(uint8,uint8,uint256,uint256)\":{\"params\":{\"_collateralId\":\"the collateral id\",\"_maxCollateralAmount\":\"cap. amount of token that can be sent out from the wallet\",\"_tokenAmount\":\"total NFT to be created\",\"_variantId\":\"the NFT's variant id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"redeem(uint8,uint8,uint256,uint256)\":{\"params\":{\"_collateralId\":\"the collateral id\",\"_minAmount\":\"min. amount of collateral token expects to receive\",\"_tokenAmount\":\"total NFT to be burnt\",\"_variantId\":\"the NFT's variant id\"}},\"removeAddress(address)\":{\"details\":\"removes a given address from the whitelist\",\"params\":{\"_address\":\"address to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"targetCollatelizationRatio()\":{\"returns\":{\"_0\":\"the target ratio when CR < 1\",\"_1\":\"the target ratio when CR > 1\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"variantCollatelizationRatio(uint8)\":{\"params\":{\"_id\":\"the NFT's variant id\"},\"returns\":{\"_0\":\"the variant collateral ratio\"}}},\"title\":\"A contract to collaterizes ERC-20 and mints NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"estimateMint(uint8,uint8,uint256)\":{\"notice\":\"calculate amount of collateral assets to be placed for minting the NFT\"},\"estimateRedeem(uint8,uint8,uint256)\":{\"notice\":\"calculate amount of collateral assets to be returned when burning NFT\"},\"getCollateralPrice(uint8)\":{\"notice\":\"call the price feeder registry to retrieve the latest price of collateral token\"},\"getSyntheticPrice()\":{\"notice\":\"call the price feeder registry to retrieve the latest price of NFT\"},\"getVariantCollateral(uint8,uint8)\":{\"notice\":\"check variant collateral\"},\"globalCollatelizationRatio()\":{\"notice\":\"looks for the system collateral ratio basically calculates from total collateral deposited / total NFT minted\"},\"initialize(address,bytes32,bytes32,bytes32,address)\":{\"notice\":\"the contructor\"},\"mint(uint8,uint8,uint256,uint256)\":{\"notice\":\"taking collateral tokens to mint the NFT\"},\"redeem(uint8,uint8,uint256,uint256)\":{\"notice\":\"burning NFT and returning collateral assets, the offset fee will be charged when CR < 1\"},\"targetCollatelizationRatio()\":{\"notice\":\"calculates the normalized collateral ratio\"},\"variantCollatelizationRatio(uint8)\":{\"notice\":\"calculates the collateral ratio for particular variant\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTManagerUpgradeable.sol\":\"NFTManagerUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc6dbbc2f50a7c104377798a37b2acd1a41c1242544b0bb7a9a7c863f0520eb50\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n        __ERC1155Holder_init_unchained();\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal initializer {\\n    }\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9e6b4b970877d19735e8c488a8c66d3b5a3e01e4705d982379feaafb451057a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal initializer {\\n        _registerInterface(\\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155Received.selector ^\\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x119682df753fda361ec986768dd3586b2efa8399152fa35e979758f13d20533f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x68a2498b459518376db0497bce2344169497020cd95db90d76f8312e02c40ba0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xcbc02d192c55298cf65e5695375c839eac979a597a0fbdc1635195c4d28ca5ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8457e15aa90badabe0d6ef6f572f1ebd47bebf156921c825ae6e009dda15b706\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x73bef0a5dec3efde8183c4858d90f683ed2771656c4329647b4d5b0f89498fd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x24141d2f6b98d4cb77a8936eae8cbaad2e261d9062bdc08036096f4550092501\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) public {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x3fef0eeb248c7109ce0f9adce59543d8b4141b78382d3ec34db33dabdbbc13f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x61321d2c86346045bf394885ee3afeecc65f9daad2694bc19110967588fd7b5d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd918cca1b659f588a6d12d05fd7196179a8b1eac9133d7f77da7ef3133e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x2690a9b7f4f7489b8d25a4fc6bffc02ec3971fb41ed6c8b59adef2833bdab07c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/NFTManagerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"./utility/LibMath.sol\\\";\\nimport \\\"./utility/WhitelistUpgradeable.sol\\\";\\nimport \\\"./utility/SyntheticNFT.sol\\\";\\nimport \\\"./interfaces/IPriceResolver.sol\\\";\\nimport \\\"./interfaces/ISyntheticNFT.sol\\\";\\nimport \\\"./interfaces/INFTManager.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\n/**\\n * @title A contract to collaterizes ERC-20 and mints NFT\\n */\\n\\ncontract NFTManagerUpgradeable is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    WhitelistUpgradeable,\\n    INFTManager,\\n    ERC1155HolderUpgradeable,\\n    PausableUpgradeable\\n{\\n    using LibMathSigned for int256;\\n    using LibMathUnsigned for uint256;\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct CollateralAsset {\\n        // name of the collateral\\n        string name;\\n        // Price feeder name\\n        bytes32 priceFeeder;\\n        // ERC-20 contract address\\n        address tokenAddress;\\n        // ERC-20 decimals\\n        uint8 decimals;\\n        // status\\n        bool disabled;\\n    }\\n\\n    struct SyntheticVariant {\\n        // name of the variant\\n        string name;\\n        // token id for this variant\\n        uint256 tokenId;\\n        // value\\n        uint256 tokenValue;\\n        // raw collateral on this variant\\n        mapping(uint8 => uint256) totalRawCollateral;\\n        // total tokens that been minted\\n        uint256 totalOutstanding;\\n        // total tokens that been issued\\n        uint256 totalIssued;\\n        // total tokens that been burnt\\n        uint256 totalBurnt;\\n        // active status\\n        bool disabled;\\n    }\\n\\n    // Registry contract\\n    IRegistry public registry;\\n    // Price resolver contract.\\n    IPriceResolver public priceResolver;\\n    // Synthetic NFT created by this contract.\\n    ISyntheticNFT public override syntheticNFT;\\n    // Collateral currencies that supported\\n    mapping(uint8 => CollateralAsset) public collaterals;\\n    // Total Collateral Assets\\n    uint8 public collateralCount;\\n    // Synthetic NFT variants\\n    mapping(uint8 => SyntheticVariant) public syntheticVariants;\\n    // Total Synthetic NFT variants\\n    uint8 public syntheticVariantCount;\\n    // Target currency in the registry\\n    bytes32 public targetCurrency;\\n\\n    // Total raw collateral\\n    mapping(uint8 => uint256) public totalRawCollateral;\\n    // Total NFT synthetics outstanding\\n    uint256 public totalOutstanding;\\n    // Dev address\\n    address public devAddress;\\n    // Fees\\n    uint256 public mintFee;\\n    uint256 public redeemFee;\\n    uint256 public offsetFee;\\n    uint256 public discountFee;\\n\\n    // Router\\n    address public ROUTER_ADDRESS;\\n    // max NFT that can be minted per time\\n    uint256 maxNft;\\n\\n    int256 constant ONE_ETHER = 10**18;\\n    uint256 constant UNSIGNED_ONE_ETHER = 10**18;\\n    uint256 constant TEN_KWEI = 10000;\\n    uint256 constant MAX_UINT256 = uint256(-1);\\n\\n    int256 constant BASE = 10 ether;\\n    int256 constant K = 9.3 ether;\\n\\n    event PositionCreated(\\n        address minter,\\n        uint8 variantId,\\n        uint8 collateralId,\\n        uint256 tokenValue,\\n        uint256 collateralAmount,\\n        uint256 tokenAmount\\n    );\\n\\n    event PositionRemoved(\\n        address minter,\\n        uint8 variantId,\\n        uint8 collateralId,\\n        uint256 tokenValue,\\n        uint256 collateralAmount,\\n        uint256 tokenAmount\\n    );\\n\\n    /// @notice the contructor\\n    /// @param _registryAddress the address of the registry contract\\n    /// @param _devAddress dev address\\n    function initialize(\\n        address _registryAddress,\\n        bytes32 _targetCurrency,\\n        bytes32 _priceResolver,\\n        bytes32 _syntheticNFT,\\n        address _devAddress\\n    ) external initializer {\\n        ERC1155HolderUpgradeable.__ERC1155Holder_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        WhitelistUpgradeable.__Whitelist_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        // set initial params\\n        targetCurrency = _targetCurrency;\\n        registry = IRegistry(_registryAddress);\\n\\n        priceResolver = IPriceResolver(\\n            registry.getContractAddress(_priceResolver)\\n        );\\n\\n        devAddress = _devAddress;\\n\\n        maxNft = 100;\\n\\n        // set default fees\\n        mintFee = 100; // 1.0%\\n        redeemFee = 100; // 1.0%\\n        // discountFee = 100;  // 1.0%\\n        offsetFee = 100; // 1.0%\\n\\n        // Deploy the synthetic NFT contract\\n        syntheticNFT = ISyntheticNFT(\\n            registry.getContractAddress(_syntheticNFT)\\n        );\\n\\n        // add dev into the whitelist\\n        addAddress(_devAddress);\\n\\n        if (_devAddress != msg.sender) {\\n            addAddress(msg.sender);\\n        }\\n    }\\n\\n    /// @notice calculate amount of collateral assets to be placed for minting the NFT\\n    /// @param _variantId the NFT's variant id\\n    /// @param _collateralId the collateral asset to use\\n    /// @param _tokenAmount total NFT to be created\\n    /// @return amount the amount of the collateral need for minting\\n    function estimateMint(\\n        uint8 _variantId,\\n        uint8 _collateralId,\\n        uint256 _tokenAmount\\n    )\\n        public\\n        view\\n        validateId(_variantId, _collateralId, _tokenAmount)\\n        returns (uint256 amount)\\n    {\\n        amount = _estimateMint(\\n            _variantId,\\n            _collateralId,\\n            _tokenAmount\\n        );\\n    }\\n\\n    /// @notice calculate amount of collateral assets to be returned when burning NFT\\n    /// @param _variantId the NFT's variant id\\n    /// @param _collateralId the collateral asset to use\\n    /// @param _tokenAmount total NFT to be burnt\\n    /// @return amount amount of collateral to be returned\\n    function estimateRedeem(\\n        uint8 _variantId,\\n        uint8 _collateralId,\\n        uint256 _tokenAmount\\n    )\\n        public\\n        view\\n        validateId(_variantId, _collateralId, _tokenAmount)\\n        returns (uint256 amount)\\n    {\\n        amount = _estimateRedeem(\\n            _variantId,\\n            _collateralId,\\n            _tokenAmount\\n        );\\n    }\\n\\n    /// @notice taking collateral tokens to mint the NFT\\n    /// @param _variantId the NFT's variant id\\n    /// @param _collateralId the collateral id\\n    /// @param _tokenAmount total NFT to be created\\n    /// @param _maxCollateralAmount cap. amount of token that can be sent out from the wallet\\n    function mint(\\n        uint8 _variantId,\\n        uint8 _collateralId,\\n        uint256 _tokenAmount,\\n        uint256 _maxCollateralAmount\\n    )\\n        public\\n        nonReentrant\\n        validateId(_variantId, _collateralId, _tokenAmount)\\n        whenNotPaused\\n    {\\n        uint256 amount  = _estimateMint(\\n            _variantId,\\n            _collateralId,\\n            _tokenAmount\\n        );\\n\\n        require(\\n            _maxCollateralAmount >= amount,\\n            \\\"Exceeding _maxCollateralAmount\\\"\\n        );\\n\\n        uint256 fee = amount.mul(mintFee).div(10000);\\n\\n        // takes ERC-20 tokens\\n        IERC20Upgradeable(collaterals[_collateralId].tokenAddress)\\n            .safeTransferFrom(msg.sender, address(this), amount);\\n        // send a fee to dev\\n        IERC20Upgradeable(collaterals[_collateralId].tokenAddress).transfer( devAddress, fee );\\n        \\n        _createPosition(_variantId, _collateralId, amount.sub(fee), _tokenAmount);\\n\\n        // mint NFT back to the minter\\n        syntheticNFT.mint(\\n            msg.sender,\\n            syntheticVariants[_variantId].tokenId,\\n            _tokenAmount,\\n            _toBytes(0)\\n        );\\n    }\\n\\n    /// @notice burning NFT and returning collateral assets, the offset fee will be charged when CR < 1\\n    /// @param _variantId the NFT's variant id\\n    /// @param _collateralId the collateral id\\n    /// @param _tokenAmount total NFT to be burnt\\n    /// @param _minAmount min. amount of collateral token expects to receive\\n    function redeem(\\n    \\tuint8 _variantId,\\n        uint8 _collateralId,\\n    \\tuint256 _tokenAmount,\\n        uint256 _minAmount\\n    ) public nonReentrant validateId(_variantId, _collateralId, _tokenAmount) whenNotPaused {\\n    \\tuint256 amount = _estimateRedeem(_variantId, _collateralId, _tokenAmount);\\n\\n        require(\\n            amount >= _minAmount,\\n            \\\"_minAmount is not reached\\\"\\n        );\\n\\n    \\t_removePosition(_variantId, _collateralId , amount, _tokenAmount);\\n\\n    \\t// burn NFT\\n    \\tsyntheticNFT.safeTransferFrom(\\n    \\t\\tmsg.sender,\\n    \\t\\taddress(this),\\n    \\t\\tsyntheticVariants[_variantId].tokenId,\\n    \\t\\t_tokenAmount,\\n    \\t\\t_toBytes(0)\\n    \\t);\\n    \\tsyntheticNFT.burn(\\n    \\t\\taddress(this),\\n    \\t\\tsyntheticVariants[_variantId].tokenId,\\n    \\t\\t_tokenAmount\\n    \\t);\\n\\n        IERC20Upgradeable(collaterals[_collateralId].tokenAddress).transfer(\\n    \\t\\t\\tmsg.sender,\\n    \\t\\t\\tamount\\n    \\t);\\n        // send tokens to dev\\n        if (redeemFee != 0) {\\n            uint256 fee = amount.mul(redeemFee).div(10000);\\n            IERC20Upgradeable(collaterals[_collateralId].tokenAddress).transfer( devAddress, fee );\\n        }\\n\\n    }\\n\\n    /// @notice call the price feeder registry to retrieve the latest price of NFT\\n    /// @return US price per a synthetic token\\n    function getSyntheticPrice() public view returns (uint256) {\\n        return _getSyntheticPrice();\\n    }\\n\\n    /// @notice call the price feeder registry to retrieve the latest price of collateral token\\n    /// @param _collateralId the collateral id\\n    /// @return US price per a collateral token\\n    function getCollateralPrice(uint8 _collateralId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _getCollateralPrice(_collateralId);\\n    }\\n\\n    /// @notice check variant collateral\\n    /// @param _collateralId the collateral id\\n    /// @return amount total amount of collateral\\n    function getVariantCollateral(uint8 _variantId, uint8 _collateralId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return syntheticVariants[_variantId].totalRawCollateral[_collateralId];\\n    }\\n\\n    \\n\\n    /// @notice looks for the system collateral ratio basically calculates from total collateral deposited / total NFT minted\\n    /// @return the system collateral ratio\\n    function globalCollatelizationRatio() public view returns (uint256) {\\n        return _globalCollatelizationRatio();\\n    }\\n\\n    /// @notice calculates the collateral ratio for particular variant\\n    /// @param _id the NFT's variant id\\n    /// @return the variant collateral ratio\\n    function variantCollatelizationRatio(uint8 _id)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _variantCollatelizationRatio(_id);\\n    }\\n\\n    /// @notice calculates the normalized collateral ratio\\n    /// @return the target ratio when CR < 1\\n    /// @return the target ratio when CR > 1\\n    function targetCollatelizationRatio() public view returns (int256, int256) {\\n        return _targetCollatelizationRatio();\\n    }\\n\\n    // ONLY ADMIN CAN PROCEED\\n\\n    // pause the contract\\n    function setPaused() public onlyWhitelisted whenNotPaused {\\n        _pause();\\n    }\\n\\n    // unpause the contract\\n    function setUnpaused() public onlyWhitelisted whenPaused {\\n        _unpause();\\n    }\\n\\n    // add NFT variant\\n    function addSyntheticVariant(\\n        string memory _name,\\n        uint256 _tokenId,\\n        uint256 _tokenValue\\n    ) public nonReentrant onlyWhitelisted {\\n\\n        syntheticVariants[syntheticVariantCount].name = _name;\\n        syntheticVariants[syntheticVariantCount].tokenId = _tokenId;\\n        syntheticVariants[syntheticVariantCount].tokenValue = _tokenValue;\\n\\n        syntheticVariantCount += 1;\\n    }\\n\\n    function setSyntheticNFT(address _syntheticNFT)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        require(_syntheticNFT != address(0), \\\"!address(0)\\\");\\n        syntheticNFT = ISyntheticNFT(_syntheticNFT);\\n    }\\n\\n    // enable/disable synthetic NFT variant\\n    function setSyntheticVariantDisable(uint8 _id, bool _disabled)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        require(syntheticVariantCount > _id, \\\"Invalid given _id\\\");\\n        syntheticVariants[_id].disabled = _disabled;\\n    }\\n\\n    // Add collateral asset to be supported\\n    function addCollateralAsset(\\n        string memory _name,\\n        bytes32 _priceFeeder,\\n        address _tokenAddress,\\n        uint8 _decimals\\n    ) public nonReentrant onlyWhitelisted {\\n        require( 18 >= _decimals, \\\"_decimals should not be exceeded 18\\\" );\\n\\n        collaterals[collateralCount].name = _name;\\n        collaterals[collateralCount].priceFeeder = _priceFeeder;\\n        collaterals[collateralCount].tokenAddress = _tokenAddress;\\n        collaterals[collateralCount].decimals = _decimals;\\n\\n        collateralCount += 1;\\n    }\\n\\n    // enable/disable synthetic NFT variant\\n    function setCollateralAssetDisable(uint8 _id, bool _disabled)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        require(collateralCount > _id, \\\"Invalid given _id\\\");\\n        collaterals[collateralCount].disabled = _disabled;\\n    }\\n\\n    // emergency withdraw ERC-20 tokens out of the contract\\n    function withdrawErc20(address _tokenAddress, uint256 _amount)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        IERC20Upgradeable(_tokenAddress).transfer(msg.sender, _amount);\\n    }\\n\\n    // force mint ERC-1155\\n    function forceMint(\\n        uint8 _variantId,\\n        uint8 _collateralId,\\n        uint256 _collateralAmount,\\n        uint256 _tokenAmount\\n    )\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n        validateId(_variantId, _collateralId, _tokenAmount)\\n        whenNotPaused\\n    {\\n        _createPosition(\\n            _variantId,\\n            _collateralId,\\n            _collateralAmount,\\n            _tokenAmount\\n        );\\n\\n        // take collaterals\\n        IERC20Upgradeable(collaterals[_collateralId].tokenAddress).transferFrom(\\n                msg.sender,\\n                address(this),\\n                _collateralAmount\\n            );\\n\\n        // mint NFT back to the minter\\n        syntheticNFT.mint(\\n            msg.sender,\\n            syntheticVariants[_variantId].tokenId,\\n            _tokenAmount,\\n            _toBytes(0)\\n        );\\n    }\\n\\n    // force burn ERC-1155\\n    function forceRedeem(\\n        uint8 _variantId,\\n        uint8 _collateralId,\\n        uint256 _collateralAmount,\\n        uint256 _tokenAmount\\n    )\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n        validateId(_variantId, _collateralId, _tokenAmount)\\n        whenNotPaused\\n    {\\n        _removePosition(\\n            _variantId,\\n            _collateralId,\\n            _collateralAmount,\\n            _tokenAmount\\n        );\\n\\n        // burn NFT\\n        syntheticNFT.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            syntheticVariants[_variantId].tokenId,\\n            _tokenAmount,\\n            _toBytes(0)\\n        );\\n        syntheticNFT.burn(\\n            address(this),\\n            syntheticVariants[_variantId].tokenId,\\n            _tokenAmount\\n        );\\n\\n        // return collaterals back to the minter\\n        IERC20Upgradeable(collaterals[_collateralId].tokenAddress).transfer(\\n            msg.sender,\\n            _collateralAmount\\n        );\\n    }\\n\\n    // update the price resolver contract\\n    function setPriceResolver(address _priceResolverAddress)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        priceResolver = IPriceResolver(_priceResolverAddress);\\n    }\\n\\n    // update dev address\\n    function setDevAddress(address _devAddress)\\n        public\\n        nonReentrant\\n        onlyWhitelisted\\n    {\\n        devAddress = _devAddress;\\n    }\\n\\n    // update NFT uri\\n    function setNftUri(string memory _uri) public nonReentrant onlyWhitelisted {\\n        syntheticNFT.setUri(_uri);\\n    }\\n\\n    // update max. amount of NFT that can be minted/redeemed per time\\n    function setMaxNft(uint256 _value) public nonReentrant onlyWhitelisted {\\n        maxNft = _value;\\n    }\\n\\n    // update mint fees\\n    function setMintFee(uint256 _fee) public nonReentrant onlyWhitelisted {\\n        mintFee = _fee;\\n    }\\n\\n    // update redeem fees\\n    function setRedeemFee(uint256 _fee) public nonReentrant onlyWhitelisted {\\n        redeemFee = _fee;\\n    }\\n\\n    // update discount fees\\n    function setDiscountFee(uint256 _fee) public nonReentrant onlyWhitelisted {\\n        discountFee = _fee;\\n    }\\n\\n    // update offset fees\\n    function setOffsetFee(uint256 _fee) public nonReentrant onlyWhitelisted {\\n        offsetFee = _fee;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    modifier validateId(\\n        uint8 _variantId,\\n        uint8 _collateralId,\\n        uint256 _tokenAmount\\n    ) {\\n        require(syntheticVariantCount > _variantId, \\\"Invalid given _id\\\");\\n        require(\\n            syntheticVariants[_variantId].disabled == false,\\n            \\\"The given _variantId is disabled\\\"\\n        );\\n        require(collateralCount > _collateralId, \\\"Invalid given _collateralId\\\");\\n        require(\\n            collaterals[_collateralId].disabled == false,\\n            \\\"The given _collateralId is disabled\\\"\\n        );\\n        require(_tokenAmount != 0, \\\"_tokenAmount can't be zero\\\");\\n        require(maxNft >= _tokenAmount, \\\"Exceed MAX_NFT\\\");\\n        _;\\n    }\\n\\n    function _toBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), x)\\n        }\\n    }\\n\\n    function _createPosition(\\n        uint8 _variantId,\\n        uint8 _collateralId,\\n        uint256 _collateralAmount,\\n        uint256 _tokenAmount\\n    ) internal {\\n        syntheticVariants[_variantId].totalOutstanding = syntheticVariants[\\n            _variantId\\n        ].totalOutstanding.add(\\n                syntheticVariants[_variantId].tokenValue.mul(_tokenAmount)\\n            );\\n        syntheticVariants[_variantId].totalIssued = syntheticVariants[\\n            _variantId\\n        ].totalIssued.add(_tokenAmount);\\n        syntheticVariants[_variantId].totalRawCollateral[\\n            _collateralId\\n        ] = syntheticVariants[_variantId].totalRawCollateral[_collateralId].add(\\n            _collateralAmount\\n        );\\n\\n        emit PositionCreated(\\n            msg.sender,\\n            _variantId,\\n            _collateralId,\\n            syntheticVariants[_variantId].tokenValue,\\n            _collateralAmount,\\n            _tokenAmount\\n        );\\n\\n        totalRawCollateral[_collateralId] = totalRawCollateral[_collateralId]\\n            .add(_collateralAmount);\\n        totalOutstanding = totalOutstanding.add(\\n            syntheticVariants[_variantId].tokenValue.mul(_tokenAmount)\\n        );\\n    }\\n\\n    function _removePosition(\\n        uint8 _variantId,\\n        uint8 _collateralId,\\n        uint256 _collateralAmount,\\n        uint256 _tokenAmount\\n    ) internal {\\n        syntheticVariants[_variantId].totalOutstanding = syntheticVariants[\\n            _variantId\\n        ].totalOutstanding.sub(\\n                syntheticVariants[_variantId].tokenValue.mul(_tokenAmount)\\n            );\\n        syntheticVariants[_variantId].totalBurnt = syntheticVariants[_variantId]\\n            .totalBurnt\\n            .add(_tokenAmount);\\n\\n        syntheticVariants[_variantId].totalRawCollateral[\\n            _collateralId\\n        ] = syntheticVariants[_variantId].totalRawCollateral[_collateralId].sub(\\n            _collateralAmount\\n        );\\n\\n        emit PositionRemoved(\\n            msg.sender,\\n            _variantId,\\n            _collateralId,\\n            syntheticVariants[_variantId].tokenValue,\\n            _collateralAmount,\\n            _tokenAmount\\n        );\\n\\n        totalRawCollateral[_collateralId] = totalRawCollateral[_collateralId]\\n            .sub(_collateralAmount);\\n        totalOutstanding = totalOutstanding.sub(\\n            syntheticVariants[_variantId].tokenValue.mul(_tokenAmount)\\n        );\\n    }\\n\\n    function _getSyntheticPrice() internal view returns (uint256) {\\n        require(\\n            priceResolver.isValid(targetCurrency),\\n            \\\"targetCurrency is not valid\\\"\\n        );\\n        return priceResolver.getCurrentPrice(targetCurrency);\\n    }\\n\\n    function _getCollateralPrice(uint8 _collateralId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(collateralCount > _collateralId, \\\"Invalid given _collateralId\\\");\\n        require(\\n            collaterals[_collateralId].disabled == false,\\n            \\\"The given _collateralId is disabled\\\"\\n        );\\n        require(\\n            priceResolver.isValid(collaterals[_collateralId].priceFeeder),\\n            \\\"collateralShareSymbol is not valid\\\"\\n        );\\n        return\\n            priceResolver.getCurrentPrice(\\n                collaterals[_collateralId].priceFeeder\\n            );\\n    }\\n\\n    // find the CR for the variant\\n    function _variantCollatelizationRatio(uint8 _id)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(syntheticVariantCount > _id, \\\"Invalid given _id\\\");\\n\\n        uint256 totalCollateral = 0;\\n\\n        for (uint8 i = 0; i < collateralCount; i++) {\\n            uint256 collateralRate = _getCollateralPrice(i);\\n            uint256 totalCollateralSynthetic = syntheticVariants[_id].totalRawCollateral[i];\\n\\n            if (collaterals[i].decimals != 18) {\\n                uint256 offset = uint256(18-collaterals[i].decimals);\\n                totalCollateralSynthetic = totalCollateralSynthetic.mul(10**offset);\\n            }\\n\\n            totalCollateral = totalCollateral.add(\\n                collateralRate.wmul(\\n                    totalCollateralSynthetic\\n                )\\n            );\\n        }\\n\\n        if (totalCollateral == 0) {\\n            // return 100% when no collaterals\\n            return UNSIGNED_ONE_ETHER;\\n        } else {\\n            uint256 syntheticRate = _getSyntheticPrice();\\n            uint256 totalOutstanding = syntheticRate.wmul(\\n                syntheticVariants[_id].totalOutstanding\\n            );\\n            return totalCollateral.wdiv(totalOutstanding);\\n        }\\n    }\\n\\n    // calculates the global CR\\n    function _globalCollatelizationRatio() public view returns (uint256) {\\n        // return 100% if there is no collateral\\n        if (totalOutstanding == 0) {\\n            return UNSIGNED_ONE_ETHER;\\n        }\\n\\n        uint256 numerator = 0;\\n\\n        for (uint8 y = 0; y < collateralCount; y++) {\\n            uint256 collateralRate = _getCollateralPrice(y);\\n            uint256 totalCollateral = totalRawCollateral[y];\\n            if (collaterals[y].decimals != 18) {\\n                uint256 offset = uint256(18-collaterals[y].decimals);\\n                totalCollateral = totalCollateral.mul(10**offset);\\n            }\\n            numerator = numerator.add(\\n                collateralRate.wmul(totalCollateral)\\n            );\\n        }\\n\\n        uint256 syntheticRate = _getSyntheticPrice();\\n        uint256 denominator = syntheticRate.wmul(totalOutstanding);\\n\\n        return numerator.wdiv(denominator);\\n    }\\n\\n\\n    function _estimateInput(\\n        uint8 _variantId,\\n        uint8 _collateralId,\\n        uint256 _tokenAmount\\n    ) internal view returns (uint256 amount) {\\n        uint256 syntheticPrice = _getSyntheticPrice();\\n        uint256 collateralPrice = _getCollateralPrice(_collateralId);\\n        uint256 mintedValue = syntheticPrice.wmul(\\n            syntheticVariants[_variantId].tokenValue.mul(_tokenAmount)\\n        );\\n        amount = mintedValue.wdiv(collateralPrice);\\n        \\n        if (collaterals[_collateralId].decimals != 18) {\\n            uint256 offset = uint256(18 - collaterals[_collateralId].decimals);\\n            amount = amount.div(10**offset);\\n        }\\n    }\\n\\n    function _estimateRedeem(\\n        uint8 _variantId,\\n        uint8 _collateralId,\\n        uint256 _tokenAmount\\n    ) internal view returns (uint256 amount) {\\n        amount = _estimateInput(_variantId, _collateralId, _tokenAmount);\\n\\n        (int256 targetCR, ) = _targetCollatelizationRatio();\\n\\n        // apply the offset if CR < 1\\n        if (targetCR != ONE_ETHER) {\\n            uint256 offset = amount.mul(offsetFee).div(10000);\\n            amount = amount.sub(offset);\\n        }\\n\\n        uint256 fee = amount.mul(redeemFee).div(10000);\\n        amount = amount.sub( fee );\\n    }\\n\\n    function _estimateMint(\\n        uint8 _variantId,\\n        uint8 _collateralId,\\n        uint256 _tokenAmount\\n    ) internal view returns (uint256 amount) {\\n        amount = _estimateInput(_variantId, _collateralId, _tokenAmount);\\n\\n        (, int256 normalizedCR) = _targetCollatelizationRatio();\\n\\n        // apply the discount if targetCR > 1\\n        if (normalizedCR != ONE_ETHER) {\\n            uint256 discount = amount.mul(discountFee).div(10000);\\n            amount = amount.sub(discount);\\n        }\\n        uint256 fee = amount.mul(mintFee).div(10000);\\n        amount = amount.add( fee );\\n    }\\n\\n    function _targetCollatelizationRatio()\\n        internal\\n        view\\n        returns (int256 crOffset, int256 crDiscount)\\n    {\\n        int256 currentCr = _globalCollatelizationRatio().toInt256();\\n        int256 normalizedCr = _calculateTargetCR(currentCr);\\n\\n        // when cr is between 0 -> 1, the offset is deducted\\n        if (currentCr > 0 && ONE_ETHER >= normalizedCr) {\\n            crOffset = normalizedCr;\\n        } else {\\n            crOffset = ONE_ETHER;\\n        }\\n\\n        // when cr is between 1 -> infinity, the discount is applied\\n        if (currentCr > ONE_ETHER && currentCr > normalizedCr) {\\n            crDiscount = normalizedCr;\\n        } else {\\n            crDiscount = ONE_ETHER;\\n        }\\n    }\\n\\n    // log^b(kx+1)\\n    function _calculateTargetCR(int256 _cr) internal pure returns (int256) {\\n        return BASE.logBase((K.wmul(_cr)).add(ONE_ETHER));\\n    }\\n}\\n\",\"keccak256\":\"0x9f1381aad481f530e9bc550b879c5db6e185d2c633b902524f734d5f9ba3b7d5\",\"license\":\"MIT\"},\"contracts/interfaces/INFTManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n// import \\\"./IPancakePair.sol\\\";\\nimport \\\"./ISyntheticNFT.sol\\\";\\n\\ninterface INFTManager {\\n\\n    function syntheticNFT() external view returns (ISyntheticNFT);\\n\\n    // function collateralShare() external view returns (IPancakePair);\\n\\n}\",\"keccak256\":\"0x36311135c9943db1dd5276e49e8c44c766684332035fa896affe259f45a61e2a\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPriceResolver {\\n\\n    function getCurrentPrice(bytes32 _symbol) external view returns (uint256);\\n\\n    function isValid(bytes32 _symbol) external view returns (bool);\\n\\n}\",\"keccak256\":\"0x232582725ce67115d1b374c8bfa01b4123ec269f0743695a6ea37133f47ae26c\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"\\n//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRegistry {\\n\\n    function contractCount() external pure returns (uint256);\\n\\n    function registerContract(bytes32 name, address contractAddress) external;\\n\\n    function updateContract(bytes32 name, address contractAddress) external;\\n\\n    function getContractAddress(bytes32 _name) external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0xd108cf2e534ee03aabcb91bb32921465befd19f1936f7ecbfedcaf07c3449157\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticNFT.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface ISyntheticNFT is IERC1155Upgradeable {\\n\\n    function mint(address to, uint256 id, uint256 value, bytes memory data) external returns (bool);\\n\\n    function mintBatch(address to,  uint256[] memory ids, uint256[] memory values, bytes memory data) external returns (bool);\\n\\n    function burn(address owner, uint256 id, uint256 value) external;\\n\\n    function burnBatch( address owner, uint256[] memory ids, uint256[] memory values) external;\\n\\n    function setUri(string memory uri) external;\\n\\n    function addAddress(address _address) external;\\n\\n}\",\"keccak256\":\"0x779f1d24088c5821191a19b74fe4edd3b4fbeda82c423819471e1ab9f6413f15\",\"license\":\"MIT\"},\"contracts/utility/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary LibMathSigned {\\n    int256 private constant _WAD = 10 ** 18;\\n    int256 private constant _INT256_MIN = -2 ** 255;\\n\\n    uint8 private constant FIXED_DIGITS = 18;\\n    int256 private constant FIXED_1 = 10 ** 18;\\n    int256 private constant FIXED_E = 2718281828459045235;\\n    uint8 private constant LONGER_DIGITS = 36;\\n    int256 private constant LONGER_FIXED_LOG_E_1_5 = 405465108108164381978013115464349137;\\n    int256 private constant LONGER_FIXED_1 = 10 ** 36;\\n    int256 private constant LONGER_FIXED_LOG_E_10 = 2302585092994045684017991454684364208;\\n\\n\\n    function WAD() internal pure returns (int256) {\\n        return _WAD;\\n    }\\n\\n    // additive inverse\\n    function neg(int256 a) internal pure returns (int256) {\\n        return sub(int256(0), a);\\n    }\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L13\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n        require(!(a == -1 && b == _INT256_MIN), \\\"wmultiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"wmultiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L32\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"wdivision by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"wdivision overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L44\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SignedSafeMath.sol#L54\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function wmul(int256 x, int256 y) internal pure returns (int256 z) {\\n        z = roundHalfUp(mul(x, y), _WAD) / _WAD;\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function wdiv(int256 x, int256 y) internal pure returns (int256 z) {\\n        if (y < 0) {\\n            y = -y;\\n            x = -x;\\n        }\\n        z = roundHalfUp(mul(x, _WAD), y) / y;\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function wfrac(int256 x, int256 y, int256 z) internal pure returns (int256 r) {\\n        int256 t = mul(x, y);\\n        if (z < 0) {\\n            z = neg(z);\\n            t = neg(t);\\n        }\\n        r = roundHalfUp(t, z) / z;\\n    }\\n\\n    function min(int256 x, int256 y) internal pure returns (int256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(int256 x, int256 y) internal pure returns (int256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    // see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/utils/SafeCast.sol#L103\\n    function toUint256(int256 x) internal pure returns (uint256) {\\n        require(x >= 0, \\\"int overflow\\\");\\n        return uint256(x);\\n    }\\n\\n    // x ^ n\\n    // NOTE: n is a normal integer, do not shift 18 decimals\\n    // solium-disable-next-line security/no-assign-params\\n    function wpowi(int256 x, int256 n) internal pure returns (int256 z) {\\n        require(n >= 0, \\\"wpowi only supports n >= 0\\\");\\n        z = n % 2 != 0 ? x : _WAD;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = wmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = wmul(z, x);\\n            }\\n        }\\n    }\\n\\n    // ROUND_HALF_UP rule helper. You have to call roundHalfUp(x, y) / y to finish the rounding operation\\n    // 0.5 \\u2248 1, 0.4 \\u2248 0, -0.5 \\u2248 -1, -0.4 \\u2248 0\\n    function roundHalfUp(int256 x, int256 y) internal pure returns (int256) {\\n        require(y > 0, \\\"roundHalfUp only supports y > 0\\\");\\n        if (x >= 0) {\\n            return add(x, y / 2);\\n        }\\n        return sub(x, y / 2);\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function wln(int256 x) internal pure returns (int256) {\\n        require(x > 0, \\\"logE of negative number\\\");\\n        require(x <= 10000000000000000000000000000000000000000, \\\"logE only accepts v <= 1e22 * 1e18\\\"); // in order to prevent using safe-math\\n        int256 r = 0;\\n        uint8 extraDigits = LONGER_DIGITS - FIXED_DIGITS;\\n        int256 t = int256(uint256(10)**uint256(extraDigits));\\n\\n        while (x <= FIXED_1 / 10) {\\n            x = x * 10;\\n            r -= LONGER_FIXED_LOG_E_10;\\n        }\\n        while (x >= 10 * FIXED_1) {\\n            x = x / 10;\\n            r += LONGER_FIXED_LOG_E_10;\\n        }\\n        while (x < FIXED_1) {\\n            x = wmul(x, FIXED_E);\\n            r -= LONGER_FIXED_1;\\n        }\\n        while (x > FIXED_E) {\\n            x = wdiv(x, FIXED_E);\\n            r += LONGER_FIXED_1;\\n        }\\n        if (x == FIXED_1) {\\n            return roundHalfUp(r, t) / t;\\n        }\\n        if (x == FIXED_E) {\\n            return FIXED_1 + roundHalfUp(r, t) / t;\\n        }\\n        x *= t;\\n\\n        //               x^2   x^3   x^4\\n        // Ln(1+x) = x - --- + --- - --- + ...\\n        //                2     3     4\\n        // when -1 < x < 1, O(x^n) < \\u03b5 => when n = 36, 0 < x < 0.316\\n        //\\n        //                    2    x           2    x          2    x\\n        // Ln(a+x) = Ln(a) + ---(------)^1  + ---(------)^3 + ---(------)^5 + ...\\n        //                    1   2a+x         3   2a+x        5   2a+x\\n        //\\n        // Let x = v - a\\n        //                  2   v-a         2   v-a        2   v-a\\n        // Ln(v) = Ln(a) + ---(-----)^1  + ---(-----)^3 + ---(-----)^5 + ...\\n        //                  1   v+a         3   v+a        5   v+a\\n        // when n = 36, 1 < v < 3.423\\n        r = r + LONGER_FIXED_LOG_E_1_5;\\n        int256 a1_5 = (3 * LONGER_FIXED_1) / 2;\\n        int256 m = (LONGER_FIXED_1 * (x - a1_5)) / (x + a1_5);\\n        r = r + 2 * m;\\n        int256 m2 = (m * m) / LONGER_FIXED_1;\\n        uint8 i = 3;\\n        while (true) {\\n            m = (m * m2) / LONGER_FIXED_1;\\n            r = r + (2 * m) / int256(i);\\n            i += 2;\\n            if (i >= 3 + 2 * FIXED_DIGITS) {\\n                break;\\n            }\\n        }\\n        return roundHalfUp(r, t) / t;\\n    }\\n\\n    // Log(b, x)\\n    function logBase(int256 base, int256 x) internal pure returns (int256) {\\n        return wdiv(wln(x), wln(base));\\n    }\\n\\n    function ceil(int256 x, int256 m) internal pure returns (int256) {\\n        require(x >= 0, \\\"ceil need x >= 0\\\");\\n        require(m > 0, \\\"ceil need m > 0\\\");\\n        return (sub(add(x, m), 1) / m) * m;\\n    }\\n}\\n\\n\\nlibrary LibMathUnsigned {\\n    uint256 private constant _WAD = 10**18;\\n    uint256 private constant _POSITIVE_INT256_MAX = 2**255 - 1;\\n\\n    function WAD() internal pure returns (uint256) {\\n        return _WAD;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L26\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"Unaddition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L55\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"Unsubtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L71\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"Unmultiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L111\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"Undivision by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), _WAD / 2) / _WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, _WAD), y / 2) / y;\\n    }\\n\\n    function wfrac(uint256 x, uint256 y, uint256 z) internal pure returns (uint256 r) {\\n        r = mul(x, y) / z;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function toInt256(uint256 x) internal pure returns (int256) {\\n        require(x <= _POSITIVE_INT256_MAX, \\\"uint256 overflow\\\");\\n        return int256(x);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     * see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/math/SafeMath.sol#L146\\n     */\\n    function mod(uint256 x, uint256 m) internal pure returns (uint256) {\\n        require(m != 0, \\\"mod by zero\\\");\\n        return x % m;\\n    }\\n\\n    function ceil(uint256 x, uint256 m) internal pure returns (uint256) {\\n        require(m > 0, \\\"ceil need m > 0\\\");\\n        return (sub(add(x, m), 1) / m) * m;\\n    }\\n}\\n\",\"keccak256\":\"0xbb5e9a3c47425a161108a8c2e591eb29d5a4b1350f6d5c0025d0a9f68aa301c2\",\"license\":\"MIT\"},\"contracts/utility/SyntheticNFT.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"./Whitelist.sol\\\";\\n\\n// import \\\"../interfaces/ISyntheticNFT.sol\\\";\\n\\n/**\\n * @title An ERC-1155 with permissioned burning and minting. The contract deployer will initially\\n * be the owner who is capable of adding new roles.\\n */\\n\\n/**\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/ContextMixin.sol\\n */\\nabstract contract ContextMixin {\\n\\tfunction msgSender() internal view returns (address payable sender) {\\n\\t\\tif (msg.sender == address(this)) {\\n\\t\\t\\tbytes memory array = msg.data;\\n\\t\\t\\tuint256 index = msg.data.length;\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\t// Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n\\t\\t\\t\\tsender := and(\\n\\t\\t\\t\\t\\tmload(add(array, index)),\\n\\t\\t\\t\\t\\t0xffffffffffffffffffffffffffffffffffffffff\\n\\t\\t\\t\\t)\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tsender = payable(msg.sender);\\n\\t\\t}\\n\\t\\treturn sender;\\n\\t}\\n}\\n\\n/**\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/Initializable.sol\\n */\\ncontract Initializable2 {\\n\\tbool inited = false;\\n\\n\\tmodifier initializer() {\\n\\t\\trequire(!inited, \\\"already inited\\\");\\n\\t\\t_;\\n\\t\\tinited = true;\\n\\t}\\n}\\n\\n/**\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/EIP712Base.sol\\n */\\ncontract EIP712Base is Initializable2 {\\n\\tstruct EIP712Domain {\\n\\t\\tstring name;\\n\\t\\tstring version;\\n\\t\\taddress verifyingContract;\\n\\t\\tbytes32 salt;\\n\\t}\\n\\n\\tstring public constant ERC712_VERSION = \\\"1\\\";\\n\\n\\tbytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n\\t\\tkeccak256(\\n\\t\\t\\tbytes(\\n\\t\\t\\t\\t\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\tbytes32 internal domainSeperator;\\n\\n\\t// supposed to be called once while initializing.\\n\\t// one of the contractsa that inherits this contract follows proxy pattern\\n\\t// so it is not possible to do this in a constructor\\n\\tfunction _initializeEIP712(string memory name) internal initializer {\\n\\t\\t_setDomainSeperator(name);\\n\\t}\\n\\n\\tfunction _setDomainSeperator(string memory name) internal {\\n\\t\\tdomainSeperator = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tEIP712_DOMAIN_TYPEHASH,\\n\\t\\t\\t\\tkeccak256(bytes(name)),\\n\\t\\t\\t\\tkeccak256(bytes(ERC712_VERSION)),\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tbytes32(getChainId())\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getDomainSeperator() public view returns (bytes32) {\\n\\t\\treturn domainSeperator;\\n\\t}\\n\\n\\tfunction getChainId() public view returns (uint256) {\\n\\t\\tuint256 id;\\n\\t\\tassembly {\\n\\t\\t\\tid := chainid()\\n\\t\\t}\\n\\t\\treturn id;\\n\\t}\\n\\n\\t/**\\n\\t * Accept message hash and returns hash message in EIP712 compatible form\\n\\t * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n\\t * https://eips.ethereum.org/EIPS/eip-712\\n\\t * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n\\t * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n\\t */\\n\\tfunction toTypedMessageHash(bytes32 messageHash)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (bytes32)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\n\\t\\t\\t);\\n\\t}\\n}\\n\\n/**\\n * https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/NativeMetaTransaction.sol\\n */\\ncontract NativeMetaTransaction is EIP712Base {\\n\\tbytes32 private constant META_TRANSACTION_TYPEHASH =\\n\\t\\tkeccak256(\\n\\t\\t\\tbytes(\\n\\t\\t\\t\\t\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\tevent MetaTransactionExecuted(\\n\\t\\taddress userAddress,\\n\\t\\taddress payable relayerAddress,\\n\\t\\tbytes functionSignature\\n\\t);\\n\\tmapping(address => uint256) nonces;\\n\\n\\t/*\\n\\t * Meta transaction structure.\\n\\t * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n\\t * He should call the desired function directly in that case.\\n\\t */\\n\\tstruct MetaTransaction {\\n\\t\\tuint256 nonce;\\n\\t\\taddress from;\\n\\t\\tbytes functionSignature;\\n\\t}\\n\\n\\tfunction executeMetaTransaction(\\n\\t\\taddress userAddress,\\n\\t\\tbytes memory functionSignature,\\n\\t\\tbytes32 sigR,\\n\\t\\tbytes32 sigS,\\n\\t\\tuint8 sigV\\n\\t) public payable returns (bytes memory) {\\n\\t\\tMetaTransaction memory metaTx = MetaTransaction({\\n\\t\\t\\tnonce: nonces[userAddress],\\n\\t\\t\\tfrom: userAddress,\\n\\t\\t\\tfunctionSignature: functionSignature\\n\\t\\t});\\n\\n\\t\\trequire(\\n\\t\\t\\tverify(userAddress, metaTx, sigR, sigS, sigV),\\n\\t\\t\\t\\\"Signer and signature do not match\\\"\\n\\t\\t);\\n\\n\\t\\t// increase nonce for user (to avoid re-use)\\n\\t\\tnonces[userAddress] = nonces[userAddress] + 1;\\n\\n\\t\\temit MetaTransactionExecuted(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tpayable(msg.sender),\\n\\t\\t\\tfunctionSignature\\n\\t\\t);\\n\\n\\t\\t// Append userAddress and relayer address at the end to extract it from calling context\\n\\t\\t(bool success, bytes memory returnData) = address(this).call(\\n\\t\\t\\tabi.encodePacked(functionSignature, userAddress)\\n\\t\\t);\\n\\t\\trequire(success, \\\"Function call not successful\\\");\\n\\n\\t\\treturn returnData;\\n\\t}\\n\\n\\tfunction hashMetaTransaction(MetaTransaction memory metaTx)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bytes32)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tMETA_TRANSACTION_TYPEHASH,\\n\\t\\t\\t\\t\\tmetaTx.nonce,\\n\\t\\t\\t\\t\\tmetaTx.from,\\n\\t\\t\\t\\t\\tkeccak256(metaTx.functionSignature)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction getNonce(address user) public view returns (uint256 nonce) {\\n\\t\\tnonce = nonces[user];\\n\\t}\\n\\n\\tfunction verify(\\n\\t\\taddress signer,\\n\\t\\tMetaTransaction memory metaTx,\\n\\t\\tbytes32 sigR,\\n\\t\\tbytes32 sigS,\\n\\t\\tuint8 sigV\\n\\t) internal view returns (bool) {\\n\\t\\trequire(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n\\t\\treturn\\n\\t\\t\\tsigner ==\\n\\t\\t\\tecrecover(\\n\\t\\t\\t\\ttoTypedMessageHash(hashMetaTransaction(metaTx)),\\n\\t\\t\\t\\tsigV,\\n\\t\\t\\t\\tsigR,\\n\\t\\t\\t\\tsigS\\n\\t\\t\\t);\\n\\t}\\n}\\n\\ncontract SyntheticNFT is\\n\\tERC1155,\\n\\tWhitelist,\\n\\tContextMixin,\\n\\tNativeMetaTransaction\\n{\\n\\t// Contract name\\n\\tstring public name;\\n\\n\\tconstructor(string memory name_, string memory uri) public ERC1155(uri) {\\n\\t\\taddAddress(msg.sender);\\n\\t\\tname = name_;\\n\\t\\t_initializeEIP712(name);\\n\\t}\\n\\n\\tfunction mint(\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tuint256 value,\\n\\t\\tbytes memory data\\n\\t) external onlyWhitelisted returns (bool) {\\n\\t\\t_mint(to, id, value, data);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction mintBatch(\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory values,\\n\\t\\tbytes memory data\\n\\t) external onlyWhitelisted returns (bool) {\\n\\t\\t_mintBatch(to, ids, values, data);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction burn(\\n\\t\\taddress owner,\\n\\t\\tuint256 id,\\n\\t\\tuint256 value\\n\\t) external onlyWhitelisted {\\n\\t\\t_burn(owner, id, value);\\n\\t}\\n\\n\\tfunction burnBatch(\\n\\t\\taddress owner,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory values\\n\\t) external onlyWhitelisted {\\n\\t\\t_burnBatch(owner, ids, values);\\n\\t}\\n\\n\\tfunction setUri(string memory uri) external onlyWhitelisted {\\n\\t\\t_setURI(uri);\\n\\t}\\n\\n\\t/**\\n\\t * This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.\\n\\t */\\n\\tfunction _msgSender()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (address payable sender)\\n\\t{\\n\\t\\treturn ContextMixin.msgSender();\\n\\t}\\n\\n\\tfunction isApprovedForAll(address _owner, address _operator)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (bool isOperator)\\n\\t{\\n\\t\\tif (_operator == address(0x207Fa8Df3a17D96Ca7EA4f2893fcdCb78a304101)) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn ERC1155.isApprovedForAll(_owner, _operator);\\n\\t}\\n}\\n\",\"keccak256\":\"0x8b4f148d50bd08cb2f75e42c73eb40dfbca3a0cf2419403b84e97ba04283c643\",\"license\":\"MIT\"},\"contracts/utility/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev The contract manages a list of whitelisted addresses\\n */\\ncontract Whitelist is Ownable {\\n  using Address for address;\\n\\n  mapping(address => bool) private whitelist;\\n\\n  constructor() public {\\n    address msgSender = _msgSender();\\n    whitelist[msgSender] = true;\\n  }\\n\\n  /**\\n   * @dev returns true if a given address is whitelisted, false if not\\n   *\\n   * @param _address address to check\\n   *\\n   * @return true if the address is whitelisted, false if not\\n   */\\n  function isWhitelisted(address _address) public view returns (bool) {\\n    return whitelist[_address];\\n  }\\n\\n  modifier onlyWhitelisted() {\\n    address sender = _msgSender();\\n    require(isWhitelisted(sender), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev adds a given address to the whitelist\\n   *\\n   * @param _address address to add\\n   */\\n  function addAddress(address _address) public onlyWhitelisted {\\n    if (whitelist[_address])\\n      // checks if the address is already whitelisted\\n      return;\\n\\n    whitelist[_address] = true;\\n  }\\n\\n  /**\\n   * @dev removes a given address from the whitelist\\n   *\\n   * @param _address address to remove\\n   */\\n  function removeAddress(address _address) public onlyWhitelisted {\\n    if (!whitelist[_address])\\n      // checks if the address is actually whitelisted\\n      return;\\n\\n    whitelist[_address] = false;\\n  }\\n}\\n\",\"keccak256\":\"0xe539e6d33b945b0f1743cb3c95cce3fbbcc2207b32a27e04208fa78da723ac92\",\"license\":\"MIT\"},\"contracts/utility/WhitelistUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev The contract manages a list of whitelisted addresses\\n */\\ncontract WhitelistUpgradeable is OwnableUpgradeable {\\n  using AddressUpgradeable for address;\\n\\n  mapping(address => bool) private whitelist;\\n\\n  function __Whitelist_init() internal initializer {\\n    OwnableUpgradeable.__Ownable_init();\\n    address msgSender = _msgSender();\\n    whitelist[msgSender] = true;\\n  }\\n\\n  /**\\n   * @dev returns true if a given address is whitelisted, false if not\\n   *\\n   * @param _address address to check\\n   *\\n   * @return true if the address is whitelisted, false if not\\n   */\\n  function isWhitelisted(address _address) public view returns (bool) {\\n    return whitelist[_address];\\n  }\\n\\n  modifier onlyWhitelisted() {\\n    address sender = _msgSender();\\n    require(isWhitelisted(sender), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev adds a given address to the whitelist\\n   *\\n   * @param _address address to add\\n   */\\n  function addAddress(address _address) public onlyWhitelisted {\\n    if (whitelist[_address])\\n      // checks if the address is already whitelisted\\n      return;\\n\\n    whitelist[_address] = true;\\n  }\\n\\n  /**\\n   * @dev removes a given address from the whitelist\\n   *\\n   * @param _address address to remove\\n   */\\n  function removeAddress(address _address) public onlyWhitelisted {\\n    if (!whitelist[_address])\\n      // checks if the address is actually whitelisted\\n      return;\\n\\n    whitelist[_address] = false;\\n  }\\n}\\n\",\"keccak256\":\"0x4ffd52746018b6f0708b38577236ae02a479b60a2a05fd8415f814d2f899eb42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506160bc80620000216000396000f3fe608060405234801561001057600080fd5b50600436106103785760003560e01c80636b08af6b116101d3578063b94a6dfe11610104578063e3d1bc37116100a2578063eddd0d9c1161007c578063eddd0d9c14610e01578063f01530ed14610e1e578063f23a6e6114610e26578063f2fde38b14610eef57610378565b8063e3d1bc3714610ced578063eca895dd14610d1d578063eda0701414610d3d57610378565b8063bd1f4b52116100de578063bd1f4b5214610c5d578063bd4a162214610c89578063d0d41fe114610cbf578063d49de60214610ce557610378565b8063b94a6dfe14610a4f578063b979984814610a57578063bc197c8114610a7f57610378565b806384244add11610171578063a1a9200e1161014b578063a1a9200e146109c9578063a37fa1fd146109f1578063abea856714610a11578063b6faaf8a14610a4757610378565b806384244add146109b15780638da5cb5b146109b9578063965fa21e146109c157610378565b806377ce33b3116101ad57806377ce33b31461080e5780637a66816c1461082c5780637b103999146108e75780637e9e4d0e146108ef57610378565b80636b08af6b146107e1578063715018a6146107fe578063765b5f1c1461080657610378565b806338eada1c116102ad5780634e15afdc1161024b5780635d841af5116102255780635d841af51461075057806363c0f9c51461076d5780636580f8fb146107a357806367b57764146107d957610378565b80634e15afdc1461071f578063581d25a5146107275780635c975abb1461074857610378565b80633af32abf116102875780633af32abf146106ae5780633c89edce146106d4578063488e8da9146106dc5780634ba79dfe146106f957610378565b806338eada1c1461063e57806339c486b2146106645780633ad10ef6146106a657610378565b806323cdcf151161031a57806329e78dc0116102f457806329e78dc01461054c5780632a751e421461056c57806337a66d851461061057806338c86f321461061857610378565b806323cdcf15146104db57806324f272a5146104ff578063264494de1461052f57610378565b806316078d041161035657806316078d04146103fa57806318266dae146104025780631eb1fe951461040a578063237cfae81461043257610378565b806301ffc9a71461037d578063105de945146103b857806313966db5146103e0575b600080fd5b6103a46004803603602081101561039357600080fd5b50356001600160e01b031916610f15565b604080519115158252519081900360200190f35b6103de600480360360208110156103ce57600080fd5b50356001600160a01b0316610f38565b005b6103e8611048565b60408051918252519081900360200190f35b6103e861104f565b6103e8611056565b6103e86004803603604081101561042057600080fd5b5060ff8135811691602001351661115d565b6103de6004803603606081101561044857600080fd5b810190602081018135600160201b81111561046257600080fd5b82018360208201111561047457600080fd5b803590602001918460018302840111600160201b8311171561049557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060200135611189565b6104e361129d565b604080516001600160a01b039092168252519081900360200190f35b6103e86004803603606081101561051557600080fd5b5060ff8135811691602081013590911690604001356112ad565b6103de6004803603602081101561054557600080fd5b50356114a6565b6103e86004803603602081101561056257600080fd5b503560ff16611550565b6103de6004803603602081101561058257600080fd5b810190602081018135600160201b81111561059c57600080fd5b8201836020820111156105ae57600080fd5b803590602001918460018302840111600160201b831117156105cf57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061155b945050505050565b6103de6116c7565b6103de6004803603602081101561062e57600080fd5b50356001600160a01b0316611773565b6103de6004803603602081101561065457600080fd5b50356001600160a01b031661183a565b6103de600480360360a081101561067a57600080fd5b506001600160a01b038135811691602081013591604082013591606081013591608090910135166118dc565b6104e3611b32565b6103a4600480360360208110156106c457600080fd5b50356001600160a01b0316611b42565b6103de611b60565b6103de600480360360208110156106f257600080fd5b5035611c0c565b6103de6004803603602081101561070f57600080fd5b50356001600160a01b0316611cb6565b6104e3611d51565b61072f611d61565b6040805192835260208301919091528051918290030190f35b6103a4611d74565b6103de6004803603602081101561076657600080fd5b5035611d7e565b6103de6004803603608081101561078357600080fd5b5060ff813581169160208101359091169060408101359060600135611e28565b6103de600480360360808110156107b957600080fd5b5060ff813581169160208101359091169060408101359060600135612331565b6103e86127cd565b6103de600480360360208110156107f757600080fd5b50356127dc565b6103de612886565b6103e8612932565b610816612939565b6040805160ff9092168252519081900360200190f35b6103de6004803603608081101561084257600080fd5b810190602081018135600160201b81111561085c57600080fd5b82018360208201111561086e57600080fd5b803590602001918460018302840111600160201b8311171561088f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101356001600160a01b0316906040013560ff16612943565b6104e3612adf565b61090f6004803603602081101561090557600080fd5b503560ff16612aef565b6040518080602001868152602001856001600160a01b031681526020018460ff1681526020018315158152602001828103825287818151815260200191508051906020019080838360005b8381101561097257818101518382015260200161095a565b50505050905090810190601f16801561099f5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6103e8612bbd565b6104e3612bc4565b6103e8612bd3565b6103de600480360360408110156109df57600080fd5b5060ff81351690602001351515612bda565b6103e860048036036020811015610a0757600080fd5b503560ff16612d05565b6103de60048036036080811015610a2757600080fd5b5060ff813581169160208101359091169060408101359060600135612d10565b6108166131eb565b6104e36131f5565b6103de60048036036040811015610a6d57600080fd5b5060ff81351690602001351515613205565b610c40600480360360a0811015610a9557600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b811115610ac857600080fd5b820183602082011115610ada57600080fd5b803590602001918460208302840111600160201b83111715610afb57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610b4a57600080fd5b820183602082011115610b5c57600080fd5b803590602001918460208302840111600160201b83111715610b7d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610bcc57600080fd5b820183602082011115610bde57600080fd5b803590602001918460018302840111600160201b83111715610bff57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613323945050505050565b604080516001600160e01b03199092168252519081900360200190f35b6103de60048036036040811015610c7357600080fd5b506001600160a01b038135169060200135613334565b6103de60048036036080811015610c9f57600080fd5b5060ff813581169160208101359091169060408101359060600135613457565b6103de60048036036020811015610cd557600080fd5b50356001600160a01b0316613a0e565b6103e8613ad5565b6103e860048036036060811015610d0357600080fd5b5060ff813581169160208101359091169060400135613adf565b6103e860048036036020811015610d3357600080fd5b503560ff16613ccd565b610d5d60048036036020811015610d5357600080fd5b503560ff16613ce0565b60405180806020018881526020018781526020018681526020018581526020018481526020018315158152602001828103825289818151815260200191508051906020019080838360005b83811015610dc0578181015183820152602001610da8565b50505050905090810190601f168015610ded5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b6103de60048036036020811015610e1757600080fd5b5035613dac565b6103e8613e56565b610c40600480360360a0811015610e3c57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b811115610e7b57600080fd5b820183602082011115610e8d57600080fd5b803590602001918460018302840111600160201b83111715610eae57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613e5d945050505050565b6103de60048036036020811015610f0557600080fd5b50356001600160a01b0316613e6e565b6001600160e01b0319811660009081526098602052604090205460ff165b919050565b60026001541415610f7e576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000610f8d613f71565b9050610f9881611b42565b610fd7576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6001600160a01b038216611020576040805162461bcd60e51b815260206004820152600b60248201526a216164647265737328302960a81b604482015290519081900360640190fd5b5061016280546001600160a01b0319166001600160a01b039290921691909117905560018055565b61016b5481565b6101695481565b600061016954600014156110735750670de0b6b3a764000061115a565b6000805b6101645460ff908116908216101561112357600061109482613f75565b60ff838116600090815261016860209081526040808320546101639092529091206002015492935091600160a01b9004166012146111035760ff80841660009081526101636020526040902060020154600160a01b90048116601203166110ff82600a83900a61417e565b9150505b61111761111083836141f4565b859061422d565b93505050600101611077565b50600061112e61427d565b9050600061114861016954836141f490919063ffffffff16565b905061115483826143cd565b93505050505b90565b60ff80831660009081526101656020908152604080832093851683526003909301905220545b92915050565b600260015414156111cf576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b600260015560006111de613f71565b90506111e981611b42565b611228576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6101665460ff16600090815261016560209081526040909120855161124f92870190615e2e565b5050610166805460ff90811660009081526101656020526040808220600190810196909655835483168252902060020192909255805460ff1981169083168401909216919091179055805550565b610162546001600160a01b031681565b6101665460009084908490849060ff808516911611611307576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff808416600090815261016560205260409020600701541615611360576040805162461bcd60e51b81526020600482018190526024820152600080516020615ffb833981519152604482015290519081900360640190fd5b6101645460ff8084169116116113ab576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b900416156114075760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b80611447576040805162461bcd60e51b815260206004820152601a602482015260008051602061603d833981519152604482015290519081900360640190fd5b80610170541015611490576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b61149b8787876143ed565b979650505050505050565b600260015414156114ec576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b600260015560006114fb613f71565b905061150681611b42565b611545576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b506101705560018055565b60006111838261447a565b600260015414156115a1576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b600260015560006115b0613f71565b90506115bb81611b42565b6115fa576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b61016254604051639b642de160e01b81526020600482018181528551602484015285516001600160a01b0390941693639b642de193879383926044909201919085019080838360005b8381101561165b578181015183820152602001611643565b50505050905090810190601f1680156116885780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b1580156116a757600080fd5b505af11580156116bb573d6000803e3d6000fd5b50506001805550505050565b60006116d1613f71565b90506116dc81611b42565b61171b576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b611723611d74565b15611768576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6117706145e1565b50565b600260015414156117b9576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b600260015560006117c8613f71565b90506117d381611b42565b611812576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b5061016180546001600160a01b0319166001600160a01b039290921691909117905560018055565b6000611844613f71565b905061184f81611b42565b61188e576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526097602052604090205460ff16156118b4576118d8565b6001600160a01b0382166000908152609760205260409020805460ff191660011790555b5050565b600054610100900460ff16806118f557506118f5614682565b80611903575060005460ff16155b61193e5760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff16158015611969576000805460ff1961ff0019909116610100171660011790555b611971614693565b61197961474c565b6119816147e1565b6119896148b7565b61016785905561016080546001600160a01b0319166001600160a01b03888116919091179182905560408051630d2020dd60e01b81526004810188905290519290911691630d2020dd91602480820192602092909190829003018186803b1580156119f357600080fd5b505afa158015611a07573d6000803e3d6000fd5b505050506040513d6020811015611a1d57600080fd5b505161016180546001600160a01b03199081166001600160a01b039384161790915561016a8054909116848316179055606461017081905561016b81905561016c81905561016d556101605460408051630d2020dd60e01b81526004810187905290519190921691630d2020dd916024808301926020929190829003018186803b158015611aaa57600080fd5b505afa158015611abe573d6000803e3d6000fd5b505050506040513d6020811015611ad457600080fd5b505161016280546001600160a01b0319166001600160a01b03909216919091179055611aff8261183a565b6001600160a01b0382163314611b1857611b183361183a565b8015611b2a576000805461ff00191690555b505050505050565b61016a546001600160a01b031681565b6001600160a01b031660009081526097602052604090205460ff1690565b6000611b6a613f71565b9050611b7581611b42565b611bb4576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b611bbc611d74565b611c04576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b611770614954565b60026001541415611c52576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000611c61613f71565b9050611c6c81611b42565b611cab576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b5061016d5560018055565b6000611cc0613f71565b9050611ccb81611b42565b611d0a576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526097602052604090205460ff16611d2f576118d8565b506001600160a01b03166000908152609760205260409020805460ff19169055565b610161546001600160a01b031681565b600080611d6c6149d8565b915091509091565b61012e5460ff1690565b60026001541415611dc4576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000611dd3613f71565b9050611dde81611b42565b611e1d576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b5061016c5560018055565b60026001541415611e6e576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556101665484908490849060ff808516911611611eca576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff808416600090815261016560205260409020600701541615611f23576040805162461bcd60e51b81526020600482018190526024820152600080516020615ffb833981519152604482015290519081900360640190fd5b6101645460ff808416911611611f6e576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b90041615611fca5760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b8061200a576040805162461bcd60e51b815260206004820152601a602482015260008051602061603d833981519152604482015290519081900360640190fd5b80610170541015612053576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b61205b611d74565b156120a0576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60006120ad8888886143ed565b905080851015612104576040805162461bcd60e51b815260206004820152601e60248201527f457863656564696e67205f6d6178436f6c6c61746572616c416d6f756e740000604482015290519081900360640190fd5b600061212861271061212261016b548561417e90919063ffffffff16565b90614a62565b60ff891660009081526101636020526040902060020154909150612157906001600160a01b0316333085614ac1565b60ff88166000908152610163602090815260408083206002015461016a54825163a9059cbb60e01b81526001600160a01b03918216600482015260248101879052925191169363a9059cbb93604480850194919392918390030190829087803b1580156121c357600080fd5b505af11580156121d7573d6000803e3d6000fd5b505050506040513d60208110156121ed57600080fd5b50612205905089896121ff8585614b21565b8a614b77565b6101625460ff8a16600090815261016560205260408120600101546001600160a01b039092169163731133e9913391908b9061224090614d0f565b6040518563ffffffff1660e01b815260040180856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156122a757818101518382015260200161228f565b50505050905090810190601f1680156122d45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156122f657600080fd5b505af115801561230a573d6000803e3d6000fd5b505050506040513d602081101561232057600080fd5b505060018055505050505050505050565b60026001541415612377576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000612386613f71565b905061239181611b42565b6123d0576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6101665485908590849060ff808516911611612427576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff808416600090815261016560205260409020600701541615612480576040805162461bcd60e51b81526020600482018190526024820152600080516020615ffb833981519152604482015290519081900360640190fd5b6101645460ff8084169116116124cb576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b900416156125275760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b80612567576040805162461bcd60e51b815260206004820152601a602482015260008051602061603d833981519152604482015290519081900360640190fd5b806101705410156125b0576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b6125b8611d74565b156125fd576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b61260988888888614b77565b60ff87166000908152610163602090815260408083206002015481516323b872dd60e01b8152336004820152306024820152604481018b905291516001600160a01b03909116936323b872dd93606480850194919392918390030190829087803b15801561267657600080fd5b505af115801561268a573d6000803e3d6000fd5b505050506040513d60208110156126a057600080fd5b50506101625460ff8916600090815261016560205260408120600101546001600160a01b039092169163731133e99133919089906126dd90614d0f565b6040518563ffffffff1660e01b815260040180856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561274457818101518382015260200161272c565b50505050905090810190601f1680156127715780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561279357600080fd5b505af11580156127a7573d6000803e3d6000fd5b505050506040513d60208110156127bd57600080fd5b5050600180555050505050505050565b60006127d7611056565b905090565b60026001541415612822576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000612831613f71565b905061283c81611b42565b61287b576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b5061016e5560018055565b61288e613f71565b6001600160a01b031661289f612bc4565b6001600160a01b0316146128e8576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b61016e5481565b6101665460ff1681565b60026001541415612989576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000612998613f71565b90506129a381611b42565b6129e2576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b8160ff1660121015612a255760405162461bcd60e51b8152600401808060200182810382526023815260200180615ef96023913960400191505060405180910390fd5b6101645460ff166000908152610163602090815260409091208651612a4c92880190615e2e565b5050610164805460ff90811660009081526101636020526040808220600190810197909755835483168252808220600290810180546001600160a01b0319166001600160a01b0398909816979097179096558354831682529020909301805460ff60a01b1916600160a01b9385169390930292909217909155805460ff1981169083168401909216919091179055805550565b610160546001600160a01b031681565b6101636020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015612b875780601f10612b5c57610100808354040283529160200191612b87565b820191906000526020600020905b815481529060010190602001808311612b6a57829003601f168201915b50505060018401546002909401549293926001600160a01b038116925060ff600160a01b820481169250600160a81b9091041685565b61016d5481565b6065546001600160a01b031690565b61016c5481565b60026001541415612c20576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000612c2f613f71565b9050612c3a81611b42565b612c79576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6101645460ff808516911611612cca576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b506101645460ff166000908152610163602052604090206002018054911515600160a81b0260ff60a81b199092169190911790555060018055565b600061118382613f75565b60026001541415612d56576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000612d65613f71565b9050612d7081611b42565b612daf576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6101665485908590849060ff808516911611612e06576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff808416600090815261016560205260409020600701541615612e5f576040805162461bcd60e51b81526020600482018190526024820152600080516020615ffb833981519152604482015290519081900360640190fd5b6101645460ff808416911611612eaa576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b90041615612f065760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b80612f46576040805162461bcd60e51b815260206004820152601a602482015260008051602061603d833981519152604482015290519081900360640190fd5b80610170541015612f8f576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b612f97611d74565b15612fdc576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b612fe888888888614d39565b6101625460ff8916600090815261016560205260408120600101546001600160a01b039092169163f242432a91339130918a9061302490614d0f565b6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561309a578181015183820152602001613082565b50505050905090810190601f1680156130c75780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b1580156130ea57600080fd5b505af11580156130fe573d6000803e3d6000fd5b50506101625460ff8b1660009081526101656020526040808220600101548151637a94c56560e11b81523060048201526024810191909152604481018b905290516001600160a01b03909316945063f5298aca93506064808201939182900301818387803b15801561316f57600080fd5b505af1158015613183573d6000803e3d6000fd5b50505060ff881660009081526101636020908152604080832060020154815163a9059cbb60e01b8152336004820152602481018c905291516001600160a01b03909116945063a9059cbb93604480840194938390030190829087803b15801561279357600080fd5b6101645460ff1681565b61016f546001600160a01b031681565b6002600154141561324b576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b6002600155600061325a613f71565b905061326581611b42565b6132a4576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6101665460ff8085169116116132f5576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b5060ff91909116600090815261016560205260409020600701805460ff191691151591909117905560018055565b63bc197c8160e01b95945050505050565b6002600154141561337a576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000613389613f71565b905061339481611b42565b6133d3576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b0385169163a9059cbb9160448083019260209291908290030181600087803b15801561342257600080fd5b505af1158015613436573d6000803e3d6000fd5b505050506040513d602081101561344c57600080fd5b505060018055505050565b6002600154141561349d576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556101665484908490849060ff8085169116116134f9576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff808416600090815261016560205260409020600701541615613552576040805162461bcd60e51b81526020600482018190526024820152600080516020615ffb833981519152604482015290519081900360640190fd5b6101645460ff80841691161161359d576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b900416156135f95760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b80613639576040805162461bcd60e51b815260206004820152601a602482015260008051602061603d833981519152604482015290519081900360640190fd5b80610170541015613682576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b61368a611d74565b156136cf576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60006136dc888888614ec7565b905084811015613733576040805162461bcd60e51b815260206004820152601960248201527f5f6d696e416d6f756e74206973206e6f74207265616368656400000000000000604482015290519081900360640190fd5b61373f88888389614d39565b6101625460ff8916600090815261016560205260408120600101546001600160a01b039092169163f242432a91339130918b9061377b90614d0f565b6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156137f15781810151838201526020016137d9565b50505050905090810190601f16801561381e5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561384157600080fd5b505af1158015613855573d6000803e3d6000fd5b50506101625460ff8b1660009081526101656020526040808220600101548151637a94c56560e11b81523060048201526024810191909152604481018c905290516001600160a01b03909316945063f5298aca93506064808201939182900301818387803b1580156138c657600080fd5b505af11580156138da573d6000803e3d6000fd5b50505060ff881660009081526101636020908152604080832060020154815163a9059cbb60e01b81523360048201526024810187905291516001600160a01b03909116945063a9059cbb93604480840194938390030190829087803b15801561394257600080fd5b505af1158015613956573d6000803e3d6000fd5b505050506040513d602081101561396c57600080fd5b505061016c5415613a0057600061399561271061212261016c548561417e90919063ffffffff16565b60ff89166000908152610163602090815260408083206002015461016a54825163a9059cbb60e01b81526001600160a01b039182166004820152602481018790529251959650169363a9059cbb93604480840194938390030190829087803b1580156122f657600080fd5b505060018055505050505050565b60026001541415613a54576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000613a63613f71565b9050613a6e81611b42565b613aad576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b5061016a80546001600160a01b0319166001600160a01b039290921691909117905560018055565b60006127d761427d565b6101665460009084908490849060ff808516911611613b39576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff808416600090815261016560205260409020600701541615613b92576040805162461bcd60e51b81526020600482018190526024820152600080516020615ffb833981519152604482015290519081900360640190fd5b6101645460ff808416911611613bdd576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b90041615613c395760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b80613c79576040805162461bcd60e51b815260206004820152601a602482015260008051602061603d833981519152604482015290519081900360640190fd5b80610170541015613cc2576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b61149b878787614ec7565b6101686020526000908152604090205481565b6101656020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015613d785780601f10613d4d57610100808354040283529160200191613d78565b820191906000526020600020905b815481529060010190602001808311613d5b57829003601f168201915b5050506001840154600285015460048601546005870154600688015460079098015496979396929550909350919060ff1687565b60026001541415613df2576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000613e01613f71565b9050613e0c81611b42565b613e4b576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b5061016b5560018055565b6101675481565b63f23a6e6160e01b95945050505050565b613e76613f71565b6001600160a01b0316613e87612bc4565b6001600160a01b031614613ed0576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6001600160a01b038116613f155760405162461bcd60e51b8152600401808060200182810382526026815260200180615f1c6026913960400191505060405180910390fd5b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6101645460009060ff808416911611613fc3576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b9004161561401f5760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b6101615460ff831660009081526101636020908152604091829020600101548251636a93856760e01b8152600481019190915291516001600160a01b0390931692636a938567926024808201939291829003018186803b15801561408257600080fd5b505afa158015614096573d6000803e3d6000fd5b505050506040513d60208110156140ac57600080fd5b50516140e95760405162461bcd60e51b815260040180806020018281038252602281526020018061601b6022913960400191505060405180910390fd5b6101615460ff831660009081526101636020908152604091829020600101548251630b0f222760e11b8152600481019190915291516001600160a01b039093169263161e444e926024808201939291829003018186803b15801561414c57600080fd5b505afa158015614160573d6000803e3d6000fd5b505050506040513d602081101561417657600080fd5b505192915050565b60008261418d57506000611183565b8282028284828161419a57fe5b04146141ed576040805162461bcd60e51b815260206004820152601960248201527f556e6d756c7469706c69636174696f6e206f766572666c6f7700000000000000604482015290519081900360640190fd5b9392505050565b6000670de0b6b3a764000061421e61420c858561417e565b6002670de0b6b3a76400005b0461422d565b8161422557fe5b049392505050565b6000828201838110156141ed576040805162461bcd60e51b8152602060048201526013602482015272556e6164646974696f6e206f766572666c6f7760681b604482015290519081900360640190fd5b610161546101675460408051636a93856760e01b81526004810192909252516000926001600160a01b031691636a938567916024808301926020929190829003018186803b1580156142ce57600080fd5b505afa1580156142e2573d6000803e3d6000fd5b505050506040513d60208110156142f857600080fd5b505161434b576040805162461bcd60e51b815260206004820152601b60248201527f74617267657443757272656e6379206973206e6f742076616c69640000000000604482015290519081900360640190fd5b610161546101675460408051630b0f222760e11b81526004810192909252516001600160a01b039092169163161e444e91602480820192602092909190829003018186803b15801561439c57600080fd5b505afa1580156143b0573d6000803e3d6000fd5b505050506040513d60208110156143c657600080fd5b5051905090565b60008161421e6143e585670de0b6b3a764000061417e565b600285614218565b60006143fa848484614f4a565b905060006144066149d8565b915050670de0b6b3a7640000811461444657600061443661271061212261016e548661417e90919063ffffffff16565b90506144428382614b21565b9250505b600061446461271061212261016b548661417e90919063ffffffff16565b9050614470838261422d565b9695505050505050565b6101665460009060ff8084169116116144ce576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b6000805b6101645460ff90811690821610156145845760006144ef82613f75565b60ff86811660009081526101656020908152604080832087851684526003018252808320546101639092529091206002015492935091600160a01b90041660121461456b5760ff80841660009081526101636020526040902060020154600160a01b900481166012031661456782600a83900a61417e565b9150505b61457861111083836141f4565b935050506001016144d2565b508061459b57670de0b6b3a7640000915050610f33565b60006145a561427d565b60ff851660009081526101656020526040812060040154919250906145cb9083906141f4565b90506145d783826143cd565b9350505050610f33565b6145e9611d74565b1561462e576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b61012e805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258614665613f71565b604080516001600160a01b039092168252519081900360200190a1565b600061468d3061500a565b15905090565b600054610100900460ff16806146ac57506146ac614682565b806146ba575060005460ff16155b6146f55760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff16158015614720576000805460ff1961ff0019909116610100171660011790555b614728615010565b6147306150ad565b61473861514a565b8015611770576000805461ff001916905550565b600054610100900460ff16806147655750614765614682565b80614773575060005460ff16155b6147ae5760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff161580156147d9576000805460ff1961ff0019909116610100171660011790555b6147386151ea565b600054610100900460ff16806147fa57506147fa614682565b80614808575060005460ff16155b6148435760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff1615801561486e576000805460ff1961ff0019909116610100171660011790555b61487661528f565b6000614880613f71565b6001600160a01b03166000908152609760205260409020805460ff19166001179055508015611770576000805461ff001916905550565b600054610100900460ff16806148d057506148d0614682565b806148de575060005460ff16155b6149195760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff16158015614944576000805460ff1961ff0019909116610100171660011790555b61494c61514a565b61473861532c565b61495c611d74565b6149a4576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b61012e805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa614665613f71565b60008060006149ed6149e8611056565b6153d8565b905060006149fa8261542d565b9050600082138015614a14575080670de0b6b3a764000012155b15614a2157809350614a2d565b670de0b6b3a764000093505b670de0b6b3a764000082138015614a4357508082135b15614a5057809250614a5c565b670de0b6b3a764000092505b50509091565b6000808211614aad576040805162461bcd60e51b8152602060048201526012602482015271556e6469766973696f6e206279207a65726f60701b604482015290519081900360640190fd5b6000828481614ab857fe5b04949350505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052614b1b908590615465565b50505050565b600082821115614b71576040805162461bcd60e51b8152602060048201526016602482015275556e7375627472616374696f6e206f766572666c6f7760501b604482015290519081900360640190fd5b50900390565b60ff841660009081526101656020526040902060020154614bb990614b9c908361417e565b60ff8616600090815261016560205260409020600401549061422d565b60ff8516600090815261016560205260409020600481019190915560050154614be2908261422d565b60ff808616600090815261016560209081526040808320600581019590955592871682526003909301909252902054614c1b908361422d565b60ff808616600081815261016560208181526040808420958a1680855260038701835281852097909755928490529081526002909301548151338152938401929092528281019390935260608201526080810184905260a0810183905290517f814595c6c8cd9b481ac4e0571779bcc3745d6a3ba06d3c042d04c1abcd1ee8599181900360c00190a160ff831660009081526101686020526040902054614cc2908361422d565b60ff8085166000908152610168602090815260408083209490945591871681526101659091522060020154614d0590614cfb908361417e565b610169549061422d565b6101695550505050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60ff841660009081526101656020526040902060020154614d7b90614d5e908361417e565b60ff86166000908152610165602052604090206004015490614b21565b60ff8516600090815261016560205260409020600481019190915560060154614da4908261422d565b60ff808616600090815261016560209081526040808320600681019590955592871682526003909301909252902054614ddd9083614b21565b60ff808616600081815261016560208181526040808420958a1680855260038701835281852097909755928490529081526002909301548151338152938401929092528281019390935260608201526080810184905260a0810183905290517fa79ae14dc10c3ec7fdfb1dda878fb17cfca3175e3c5ddb2f794970bab08f064f9181900360c00190a160ff831660009081526101686020526040902054614e849083614b21565b60ff8085166000908152610168602090815260408083209490945591871681526101659091522060020154614d0590614ebd908361417e565b6101695490614b21565b6000614ed4848484614f4a565b90506000614ee06149d8565b509050670de0b6b3a76400008114614f20576000614f1061271061212261016d548661417e90919063ffffffff16565b9050614f1c8382614b21565b9250505b6000614f3e61271061212261016c548661417e90919063ffffffff16565b90506144708382614b21565b600080614f5561427d565b90506000614f6285613f75565b60ff87166000908152610165602052604081206002015491925090614f9290614f8b908761417e565b84906141f4565b9050614f9e81836143cd565b60ff808816600090815261016360205260409020600201549195506012600160a01b90920416146150005760ff80871660009081526101636020526040902060020154600160a01b9004811660120316614ffc85600a83900a614a62565b9450505b5050509392505050565b3b151590565b600054610100900460ff16806150295750615029614682565b80615037575060005460ff16155b6150725760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff1615801561509d576000805460ff1961ff0019909116610100171660011790555b6147386301ffc9a760e01b61551b565b600054610100900460ff16806150c657506150c6614682565b806150d4575060005460ff16155b61510f5760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff1615801561513a576000805460ff1961ff0019909116610100171660011790555b614738630271189760e51b61551b565b600054610100900460ff16806151635750615163614682565b80615171575060005460ff16155b6151ac5760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff16158015614738576000805460ff1961ff0019909116610100171660011790558015611770576000805461ff001916905550565b600054610100900460ff16806152035750615203614682565b80615211575060005460ff16155b61524c5760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff16158015615277576000805460ff1961ff0019909116610100171660011790555b600180558015611770576000805461ff001916905550565b600054610100900460ff16806152a857506152a8614682565b806152b6575060005460ff16155b6152f15760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff1615801561531c576000805460ff1961ff0019909116610100171660011790555b61532461514a565b61473861559f565b600054610100900460ff16806153455750615345614682565b80615353575060005460ff16155b61538e5760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff161580156153b9576000805460ff1961ff0019909116610100171660011790555b61012e805460ff191690558015611770576000805461ff001916905550565b60006001600160ff1b03821115615429576040805162461bcd60e51b815260206004820152601060248201526f75696e74323536206f766572666c6f7760801b604482015290519081900360640190fd5b5090565b6000611183615456670de0b6b3a76400006154506781103cb9fb22000086615698565b906156cd565b678ac7230489e800009061573c565b60606154ba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166157589092919063ffffffff16565b805190915015615516578080602001905160208110156154d957600080fd5b50516155165760405162461bcd60e51b815260040180806020018281038252602a81526020018061605d602a913960400191505060405180910390fd5b505050565b6001600160e01b0319808216141561557a576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152609860205260409020805460ff19166001179055565b600054610100900460ff16806155b857506155b8614682565b806155c6575060005460ff16155b6156015760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff1615801561562c576000805460ff1961ff0019909116610100171660011790555b6000615636613f71565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611770576000805461ff001916905550565b6000670de0b6b3a76400006156be6156b0858561576f565b670de0b6b3a764000061583a565b816156c557fe5b059392505050565b60008282018183128015906156e25750838112155b806156f757506000831280156156f757508381125b6141ed576040805162461bcd60e51b81526020600482015260116024820152706164646974696f6e206f766572666c6f7760781b604482015290519081900360640190fd5b60006141ed61574a836158b9565b615753856158b9565b615b94565b60606157678484600085615bc7565b949350505050565b60008261577e57506000611183565b826000191480156157925750600160ff1b82145b156157df576040805162461bcd60e51b8152602060048201526018602482015277776d756c7469706c69636174696f6e206f766572666c6f7760401b604482015290519081900360640190fd5b828202828482816157ec57fe5b05146141ed576040805162461bcd60e51b8152602060048201526018602482015277776d756c7469706c69636174696f6e206f766572666c6f7760401b604482015290519081900360640190fd5b6000808213615890576040805162461bcd60e51b815260206004820152601f60248201527f726f756e6448616c665570206f6e6c7920737570706f7274732079203e203000604482015290519081900360640190fd5b600083126158ac576158a583600284056156cd565b9050611183565b6141ed8360028405615d18565b600080821361590f576040805162461bcd60e51b815260206004820152601760248201527f6c6f6745206f66206e65676174697665206e756d626572000000000000000000604482015290519081900360640190fd5b701d6329f1c35ca4bfabb9f561000000000082131561595f5760405162461bcd60e51b8152600401808060200182810382526022815260200180615f656022913960400191505060405180910390fd5b60006012670de0b6b3a76400005b67016345785d8a0000851361599c5784600a0294506f01bb7635c5de48ef4ce5b7b41cc43db08303925061596d565b678ac7230489e8000085126159cb57600a850594506f01bb7635c5de48ef4ce5b7b41cc43db08301925061599c565b670de0b6b3a7640000851215615a08576159ed856725b946ebc0b36173615698565b94506ec097ce7bc90715b34b9f1000000000830392506159cb565b6725b946ebc0b36173851315615a4557615a2a856725b946ebc0b36173615b94565b94506ec097ce7bc90715b34b9f100000000083019250615a08565b670de0b6b3a7640000851415615a725780615a60848361583a565b81615a6757fe5b059350505050610f33565b6725b946ebc0b36173851415615aa95780615a8d848361583a565b81615a9457fe5b05670de0b6b3a7640000019350505050610f33565b938402936e4e16f927cdca7f15b39123f740f5d192909201916f0120e3b5b9ad8aa08cf16e980000000060008187016ec097ce7bc90715b34b9f10000000006f0120e3b5b9ad8aa08cf16e97ffffffff1989010281615b0457fe5b059050806002028501945060006ec097ce7bc90715b34b9f100000000082830281615b2b57fe5b05905060035b6ec097ce7bc90715b34b9f10000000008383020592508060ff168360020281615b5657fe5b059690960195600201602760ff821610615b6f57615b74565b615b31565b84615b7f888761583a565b81615b8657fe5b059998505050505050505050565b600080821215615bab578160000391508260000392505b816156be615bc185670de0b6b3a764000061576f565b8461583a565b606082471015615c085760405162461bcd60e51b8152600401808060200182810382526026815260200180615f876026913960400191505060405180910390fd5b615c118561500a565b615c62576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310615ca15780518252601f199092019160209182019101615c82565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615d03576040519150601f19603f3d011682016040523d82523d6000602084013e615d08565b606091505b509150915061149b828286615d8a565b6000818303818312801590615d2d5750838113155b80615d425750600083128015615d4257508381135b6141ed576040805162461bcd60e51b81526020600482015260146024820152737375627472616374696f6e206f766572666c6f7760601b604482015290519081900360640190fd5b60608315615d995750816141ed565b825115615da95782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615df3578181015183820152602001615ddb565b50505050905090810190601f168015615e205780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615e6f57805160ff1916838001178555615e9c565b82800160010185558215615e9c579182015b82811115615e9c578251825591602001919060010190615e81565b506154299291505b808211156154295760008155600101615ea456fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00496e76616c696420676976656e205f636f6c6c61746572616c496400000000005f646563696d616c732073686f756c64206e6f742062652065786365656465642031384f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737354686520676976656e205f636f6c6c61746572616c49642069732064697361626c65646c6f6745206f6e6c7920616363657074732076203c3d2031653232202a2031653138416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657254686520676976656e205f76617269616e7449642069732064697361626c6564636f6c6c61746572616c536861726553796d626f6c206973206e6f742076616c69645f746f6b656e416d6f756e742063616e2774206265207a65726f0000000000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220b4d1285553db7895642c219294373ab689c60d434ec2f538166fda749ea2b1a864736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103785760003560e01c80636b08af6b116101d3578063b94a6dfe11610104578063e3d1bc37116100a2578063eddd0d9c1161007c578063eddd0d9c14610e01578063f01530ed14610e1e578063f23a6e6114610e26578063f2fde38b14610eef57610378565b8063e3d1bc3714610ced578063eca895dd14610d1d578063eda0701414610d3d57610378565b8063bd1f4b52116100de578063bd1f4b5214610c5d578063bd4a162214610c89578063d0d41fe114610cbf578063d49de60214610ce557610378565b8063b94a6dfe14610a4f578063b979984814610a57578063bc197c8114610a7f57610378565b806384244add11610171578063a1a9200e1161014b578063a1a9200e146109c9578063a37fa1fd146109f1578063abea856714610a11578063b6faaf8a14610a4757610378565b806384244add146109b15780638da5cb5b146109b9578063965fa21e146109c157610378565b806377ce33b3116101ad57806377ce33b31461080e5780637a66816c1461082c5780637b103999146108e75780637e9e4d0e146108ef57610378565b80636b08af6b146107e1578063715018a6146107fe578063765b5f1c1461080657610378565b806338eada1c116102ad5780634e15afdc1161024b5780635d841af5116102255780635d841af51461075057806363c0f9c51461076d5780636580f8fb146107a357806367b57764146107d957610378565b80634e15afdc1461071f578063581d25a5146107275780635c975abb1461074857610378565b80633af32abf116102875780633af32abf146106ae5780633c89edce146106d4578063488e8da9146106dc5780634ba79dfe146106f957610378565b806338eada1c1461063e57806339c486b2146106645780633ad10ef6146106a657610378565b806323cdcf151161031a57806329e78dc0116102f457806329e78dc01461054c5780632a751e421461056c57806337a66d851461061057806338c86f321461061857610378565b806323cdcf15146104db57806324f272a5146104ff578063264494de1461052f57610378565b806316078d041161035657806316078d04146103fa57806318266dae146104025780631eb1fe951461040a578063237cfae81461043257610378565b806301ffc9a71461037d578063105de945146103b857806313966db5146103e0575b600080fd5b6103a46004803603602081101561039357600080fd5b50356001600160e01b031916610f15565b604080519115158252519081900360200190f35b6103de600480360360208110156103ce57600080fd5b50356001600160a01b0316610f38565b005b6103e8611048565b60408051918252519081900360200190f35b6103e861104f565b6103e8611056565b6103e86004803603604081101561042057600080fd5b5060ff8135811691602001351661115d565b6103de6004803603606081101561044857600080fd5b810190602081018135600160201b81111561046257600080fd5b82018360208201111561047457600080fd5b803590602001918460018302840111600160201b8311171561049557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060200135611189565b6104e361129d565b604080516001600160a01b039092168252519081900360200190f35b6103e86004803603606081101561051557600080fd5b5060ff8135811691602081013590911690604001356112ad565b6103de6004803603602081101561054557600080fd5b50356114a6565b6103e86004803603602081101561056257600080fd5b503560ff16611550565b6103de6004803603602081101561058257600080fd5b810190602081018135600160201b81111561059c57600080fd5b8201836020820111156105ae57600080fd5b803590602001918460018302840111600160201b831117156105cf57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061155b945050505050565b6103de6116c7565b6103de6004803603602081101561062e57600080fd5b50356001600160a01b0316611773565b6103de6004803603602081101561065457600080fd5b50356001600160a01b031661183a565b6103de600480360360a081101561067a57600080fd5b506001600160a01b038135811691602081013591604082013591606081013591608090910135166118dc565b6104e3611b32565b6103a4600480360360208110156106c457600080fd5b50356001600160a01b0316611b42565b6103de611b60565b6103de600480360360208110156106f257600080fd5b5035611c0c565b6103de6004803603602081101561070f57600080fd5b50356001600160a01b0316611cb6565b6104e3611d51565b61072f611d61565b6040805192835260208301919091528051918290030190f35b6103a4611d74565b6103de6004803603602081101561076657600080fd5b5035611d7e565b6103de6004803603608081101561078357600080fd5b5060ff813581169160208101359091169060408101359060600135611e28565b6103de600480360360808110156107b957600080fd5b5060ff813581169160208101359091169060408101359060600135612331565b6103e86127cd565b6103de600480360360208110156107f757600080fd5b50356127dc565b6103de612886565b6103e8612932565b610816612939565b6040805160ff9092168252519081900360200190f35b6103de6004803603608081101561084257600080fd5b810190602081018135600160201b81111561085c57600080fd5b82018360208201111561086e57600080fd5b803590602001918460018302840111600160201b8311171561088f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101356001600160a01b0316906040013560ff16612943565b6104e3612adf565b61090f6004803603602081101561090557600080fd5b503560ff16612aef565b6040518080602001868152602001856001600160a01b031681526020018460ff1681526020018315158152602001828103825287818151815260200191508051906020019080838360005b8381101561097257818101518382015260200161095a565b50505050905090810190601f16801561099f5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6103e8612bbd565b6104e3612bc4565b6103e8612bd3565b6103de600480360360408110156109df57600080fd5b5060ff81351690602001351515612bda565b6103e860048036036020811015610a0757600080fd5b503560ff16612d05565b6103de60048036036080811015610a2757600080fd5b5060ff813581169160208101359091169060408101359060600135612d10565b6108166131eb565b6104e36131f5565b6103de60048036036040811015610a6d57600080fd5b5060ff81351690602001351515613205565b610c40600480360360a0811015610a9557600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b811115610ac857600080fd5b820183602082011115610ada57600080fd5b803590602001918460208302840111600160201b83111715610afb57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610b4a57600080fd5b820183602082011115610b5c57600080fd5b803590602001918460208302840111600160201b83111715610b7d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610bcc57600080fd5b820183602082011115610bde57600080fd5b803590602001918460018302840111600160201b83111715610bff57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613323945050505050565b604080516001600160e01b03199092168252519081900360200190f35b6103de60048036036040811015610c7357600080fd5b506001600160a01b038135169060200135613334565b6103de60048036036080811015610c9f57600080fd5b5060ff813581169160208101359091169060408101359060600135613457565b6103de60048036036020811015610cd557600080fd5b50356001600160a01b0316613a0e565b6103e8613ad5565b6103e860048036036060811015610d0357600080fd5b5060ff813581169160208101359091169060400135613adf565b6103e860048036036020811015610d3357600080fd5b503560ff16613ccd565b610d5d60048036036020811015610d5357600080fd5b503560ff16613ce0565b60405180806020018881526020018781526020018681526020018581526020018481526020018315158152602001828103825289818151815260200191508051906020019080838360005b83811015610dc0578181015183820152602001610da8565b50505050905090810190601f168015610ded5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b6103de60048036036020811015610e1757600080fd5b5035613dac565b6103e8613e56565b610c40600480360360a0811015610e3c57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b811115610e7b57600080fd5b820183602082011115610e8d57600080fd5b803590602001918460018302840111600160201b83111715610eae57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613e5d945050505050565b6103de60048036036020811015610f0557600080fd5b50356001600160a01b0316613e6e565b6001600160e01b0319811660009081526098602052604090205460ff165b919050565b60026001541415610f7e576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000610f8d613f71565b9050610f9881611b42565b610fd7576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6001600160a01b038216611020576040805162461bcd60e51b815260206004820152600b60248201526a216164647265737328302960a81b604482015290519081900360640190fd5b5061016280546001600160a01b0319166001600160a01b039290921691909117905560018055565b61016b5481565b6101695481565b600061016954600014156110735750670de0b6b3a764000061115a565b6000805b6101645460ff908116908216101561112357600061109482613f75565b60ff838116600090815261016860209081526040808320546101639092529091206002015492935091600160a01b9004166012146111035760ff80841660009081526101636020526040902060020154600160a01b90048116601203166110ff82600a83900a61417e565b9150505b61111761111083836141f4565b859061422d565b93505050600101611077565b50600061112e61427d565b9050600061114861016954836141f490919063ffffffff16565b905061115483826143cd565b93505050505b90565b60ff80831660009081526101656020908152604080832093851683526003909301905220545b92915050565b600260015414156111cf576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b600260015560006111de613f71565b90506111e981611b42565b611228576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6101665460ff16600090815261016560209081526040909120855161124f92870190615e2e565b5050610166805460ff90811660009081526101656020526040808220600190810196909655835483168252902060020192909255805460ff1981169083168401909216919091179055805550565b610162546001600160a01b031681565b6101665460009084908490849060ff808516911611611307576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff808416600090815261016560205260409020600701541615611360576040805162461bcd60e51b81526020600482018190526024820152600080516020615ffb833981519152604482015290519081900360640190fd5b6101645460ff8084169116116113ab576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b900416156114075760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b80611447576040805162461bcd60e51b815260206004820152601a602482015260008051602061603d833981519152604482015290519081900360640190fd5b80610170541015611490576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b61149b8787876143ed565b979650505050505050565b600260015414156114ec576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b600260015560006114fb613f71565b905061150681611b42565b611545576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b506101705560018055565b60006111838261447a565b600260015414156115a1576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b600260015560006115b0613f71565b90506115bb81611b42565b6115fa576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b61016254604051639b642de160e01b81526020600482018181528551602484015285516001600160a01b0390941693639b642de193879383926044909201919085019080838360005b8381101561165b578181015183820152602001611643565b50505050905090810190601f1680156116885780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b1580156116a757600080fd5b505af11580156116bb573d6000803e3d6000fd5b50506001805550505050565b60006116d1613f71565b90506116dc81611b42565b61171b576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b611723611d74565b15611768576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6117706145e1565b50565b600260015414156117b9576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b600260015560006117c8613f71565b90506117d381611b42565b611812576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b5061016180546001600160a01b0319166001600160a01b039290921691909117905560018055565b6000611844613f71565b905061184f81611b42565b61188e576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526097602052604090205460ff16156118b4576118d8565b6001600160a01b0382166000908152609760205260409020805460ff191660011790555b5050565b600054610100900460ff16806118f557506118f5614682565b80611903575060005460ff16155b61193e5760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff16158015611969576000805460ff1961ff0019909116610100171660011790555b611971614693565b61197961474c565b6119816147e1565b6119896148b7565b61016785905561016080546001600160a01b0319166001600160a01b03888116919091179182905560408051630d2020dd60e01b81526004810188905290519290911691630d2020dd91602480820192602092909190829003018186803b1580156119f357600080fd5b505afa158015611a07573d6000803e3d6000fd5b505050506040513d6020811015611a1d57600080fd5b505161016180546001600160a01b03199081166001600160a01b039384161790915561016a8054909116848316179055606461017081905561016b81905561016c81905561016d556101605460408051630d2020dd60e01b81526004810187905290519190921691630d2020dd916024808301926020929190829003018186803b158015611aaa57600080fd5b505afa158015611abe573d6000803e3d6000fd5b505050506040513d6020811015611ad457600080fd5b505161016280546001600160a01b0319166001600160a01b03909216919091179055611aff8261183a565b6001600160a01b0382163314611b1857611b183361183a565b8015611b2a576000805461ff00191690555b505050505050565b61016a546001600160a01b031681565b6001600160a01b031660009081526097602052604090205460ff1690565b6000611b6a613f71565b9050611b7581611b42565b611bb4576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b611bbc611d74565b611c04576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b611770614954565b60026001541415611c52576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000611c61613f71565b9050611c6c81611b42565b611cab576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b5061016d5560018055565b6000611cc0613f71565b9050611ccb81611b42565b611d0a576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526097602052604090205460ff16611d2f576118d8565b506001600160a01b03166000908152609760205260409020805460ff19169055565b610161546001600160a01b031681565b600080611d6c6149d8565b915091509091565b61012e5460ff1690565b60026001541415611dc4576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000611dd3613f71565b9050611dde81611b42565b611e1d576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b5061016c5560018055565b60026001541415611e6e576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556101665484908490849060ff808516911611611eca576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff808416600090815261016560205260409020600701541615611f23576040805162461bcd60e51b81526020600482018190526024820152600080516020615ffb833981519152604482015290519081900360640190fd5b6101645460ff808416911611611f6e576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b90041615611fca5760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b8061200a576040805162461bcd60e51b815260206004820152601a602482015260008051602061603d833981519152604482015290519081900360640190fd5b80610170541015612053576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b61205b611d74565b156120a0576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60006120ad8888886143ed565b905080851015612104576040805162461bcd60e51b815260206004820152601e60248201527f457863656564696e67205f6d6178436f6c6c61746572616c416d6f756e740000604482015290519081900360640190fd5b600061212861271061212261016b548561417e90919063ffffffff16565b90614a62565b60ff891660009081526101636020526040902060020154909150612157906001600160a01b0316333085614ac1565b60ff88166000908152610163602090815260408083206002015461016a54825163a9059cbb60e01b81526001600160a01b03918216600482015260248101879052925191169363a9059cbb93604480850194919392918390030190829087803b1580156121c357600080fd5b505af11580156121d7573d6000803e3d6000fd5b505050506040513d60208110156121ed57600080fd5b50612205905089896121ff8585614b21565b8a614b77565b6101625460ff8a16600090815261016560205260408120600101546001600160a01b039092169163731133e9913391908b9061224090614d0f565b6040518563ffffffff1660e01b815260040180856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156122a757818101518382015260200161228f565b50505050905090810190601f1680156122d45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156122f657600080fd5b505af115801561230a573d6000803e3d6000fd5b505050506040513d602081101561232057600080fd5b505060018055505050505050505050565b60026001541415612377576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000612386613f71565b905061239181611b42565b6123d0576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6101665485908590849060ff808516911611612427576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff808416600090815261016560205260409020600701541615612480576040805162461bcd60e51b81526020600482018190526024820152600080516020615ffb833981519152604482015290519081900360640190fd5b6101645460ff8084169116116124cb576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b900416156125275760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b80612567576040805162461bcd60e51b815260206004820152601a602482015260008051602061603d833981519152604482015290519081900360640190fd5b806101705410156125b0576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b6125b8611d74565b156125fd576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b61260988888888614b77565b60ff87166000908152610163602090815260408083206002015481516323b872dd60e01b8152336004820152306024820152604481018b905291516001600160a01b03909116936323b872dd93606480850194919392918390030190829087803b15801561267657600080fd5b505af115801561268a573d6000803e3d6000fd5b505050506040513d60208110156126a057600080fd5b50506101625460ff8916600090815261016560205260408120600101546001600160a01b039092169163731133e99133919089906126dd90614d0f565b6040518563ffffffff1660e01b815260040180856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561274457818101518382015260200161272c565b50505050905090810190601f1680156127715780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561279357600080fd5b505af11580156127a7573d6000803e3d6000fd5b505050506040513d60208110156127bd57600080fd5b5050600180555050505050505050565b60006127d7611056565b905090565b60026001541415612822576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000612831613f71565b905061283c81611b42565b61287b576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b5061016e5560018055565b61288e613f71565b6001600160a01b031661289f612bc4565b6001600160a01b0316146128e8576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b61016e5481565b6101665460ff1681565b60026001541415612989576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000612998613f71565b90506129a381611b42565b6129e2576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b8160ff1660121015612a255760405162461bcd60e51b8152600401808060200182810382526023815260200180615ef96023913960400191505060405180910390fd5b6101645460ff166000908152610163602090815260409091208651612a4c92880190615e2e565b5050610164805460ff90811660009081526101636020526040808220600190810197909755835483168252808220600290810180546001600160a01b0319166001600160a01b0398909816979097179096558354831682529020909301805460ff60a01b1916600160a01b9385169390930292909217909155805460ff1981169083168401909216919091179055805550565b610160546001600160a01b031681565b6101636020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015612b875780601f10612b5c57610100808354040283529160200191612b87565b820191906000526020600020905b815481529060010190602001808311612b6a57829003601f168201915b50505060018401546002909401549293926001600160a01b038116925060ff600160a01b820481169250600160a81b9091041685565b61016d5481565b6065546001600160a01b031690565b61016c5481565b60026001541415612c20576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000612c2f613f71565b9050612c3a81611b42565b612c79576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6101645460ff808516911611612cca576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b506101645460ff166000908152610163602052604090206002018054911515600160a81b0260ff60a81b199092169190911790555060018055565b600061118382613f75565b60026001541415612d56576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000612d65613f71565b9050612d7081611b42565b612daf576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6101665485908590849060ff808516911611612e06576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff808416600090815261016560205260409020600701541615612e5f576040805162461bcd60e51b81526020600482018190526024820152600080516020615ffb833981519152604482015290519081900360640190fd5b6101645460ff808416911611612eaa576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b90041615612f065760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b80612f46576040805162461bcd60e51b815260206004820152601a602482015260008051602061603d833981519152604482015290519081900360640190fd5b80610170541015612f8f576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b612f97611d74565b15612fdc576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b612fe888888888614d39565b6101625460ff8916600090815261016560205260408120600101546001600160a01b039092169163f242432a91339130918a9061302490614d0f565b6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561309a578181015183820152602001613082565b50505050905090810190601f1680156130c75780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b1580156130ea57600080fd5b505af11580156130fe573d6000803e3d6000fd5b50506101625460ff8b1660009081526101656020526040808220600101548151637a94c56560e11b81523060048201526024810191909152604481018b905290516001600160a01b03909316945063f5298aca93506064808201939182900301818387803b15801561316f57600080fd5b505af1158015613183573d6000803e3d6000fd5b50505060ff881660009081526101636020908152604080832060020154815163a9059cbb60e01b8152336004820152602481018c905291516001600160a01b03909116945063a9059cbb93604480840194938390030190829087803b15801561279357600080fd5b6101645460ff1681565b61016f546001600160a01b031681565b6002600154141561324b576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b6002600155600061325a613f71565b905061326581611b42565b6132a4576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6101665460ff8085169116116132f5576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b5060ff91909116600090815261016560205260409020600701805460ff191691151591909117905560018055565b63bc197c8160e01b95945050505050565b6002600154141561337a576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000613389613f71565b905061339481611b42565b6133d3576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b0385169163a9059cbb9160448083019260209291908290030181600087803b15801561342257600080fd5b505af1158015613436573d6000803e3d6000fd5b505050506040513d602081101561344c57600080fd5b505060018055505050565b6002600154141561349d576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556101665484908490849060ff8085169116116134f9576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff808416600090815261016560205260409020600701541615613552576040805162461bcd60e51b81526020600482018190526024820152600080516020615ffb833981519152604482015290519081900360640190fd5b6101645460ff80841691161161359d576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b900416156135f95760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b80613639576040805162461bcd60e51b815260206004820152601a602482015260008051602061603d833981519152604482015290519081900360640190fd5b80610170541015613682576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b61368a611d74565b156136cf576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60006136dc888888614ec7565b905084811015613733576040805162461bcd60e51b815260206004820152601960248201527f5f6d696e416d6f756e74206973206e6f74207265616368656400000000000000604482015290519081900360640190fd5b61373f88888389614d39565b6101625460ff8916600090815261016560205260408120600101546001600160a01b039092169163f242432a91339130918b9061377b90614d0f565b6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156137f15781810151838201526020016137d9565b50505050905090810190601f16801561381e5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561384157600080fd5b505af1158015613855573d6000803e3d6000fd5b50506101625460ff8b1660009081526101656020526040808220600101548151637a94c56560e11b81523060048201526024810191909152604481018c905290516001600160a01b03909316945063f5298aca93506064808201939182900301818387803b1580156138c657600080fd5b505af11580156138da573d6000803e3d6000fd5b50505060ff881660009081526101636020908152604080832060020154815163a9059cbb60e01b81523360048201526024810187905291516001600160a01b03909116945063a9059cbb93604480840194938390030190829087803b15801561394257600080fd5b505af1158015613956573d6000803e3d6000fd5b505050506040513d602081101561396c57600080fd5b505061016c5415613a0057600061399561271061212261016c548561417e90919063ffffffff16565b60ff89166000908152610163602090815260408083206002015461016a54825163a9059cbb60e01b81526001600160a01b039182166004820152602481018790529251959650169363a9059cbb93604480840194938390030190829087803b1580156122f657600080fd5b505060018055505050505050565b60026001541415613a54576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000613a63613f71565b9050613a6e81611b42565b613aad576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b5061016a80546001600160a01b0319166001600160a01b039290921691909117905560018055565b60006127d761427d565b6101665460009084908490849060ff808516911611613b39576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b60ff808416600090815261016560205260409020600701541615613b92576040805162461bcd60e51b81526020600482018190526024820152600080516020615ffb833981519152604482015290519081900360640190fd5b6101645460ff808416911611613bdd576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b90041615613c395760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b80613c79576040805162461bcd60e51b815260206004820152601a602482015260008051602061603d833981519152604482015290519081900360640190fd5b80610170541015613cc2576040805162461bcd60e51b815260206004820152600e60248201526d115e18d959590813505617d3919560921b604482015290519081900360640190fd5b61149b878787614ec7565b6101686020526000908152604090205481565b6101656020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015613d785780601f10613d4d57610100808354040283529160200191613d78565b820191906000526020600020905b815481529060010190602001808311613d5b57829003601f168201915b5050506001840154600285015460048601546005870154600688015460079098015496979396929550909350919060ff1687565b60026001541415613df2576040805162461bcd60e51b815260206004820152601f6024820152600080516020615eb9833981519152604482015290519081900360640190fd5b60026001556000613e01613f71565b9050613e0c81611b42565b613e4b576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b5061016b5560018055565b6101675481565b63f23a6e6160e01b95945050505050565b613e76613f71565b6001600160a01b0316613e87612bc4565b6001600160a01b031614613ed0576040805162461bcd60e51b81526020600482018190526024820152600080516020615fdb833981519152604482015290519081900360640190fd5b6001600160a01b038116613f155760405162461bcd60e51b8152600401808060200182810382526026815260200180615f1c6026913960400191505060405180910390fd5b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6101645460009060ff808416911611613fc3576040805162461bcd60e51b815260206004820152601b6024820152600080516020615ed9833981519152604482015290519081900360640190fd5b60ff80831660009081526101636020526040902060020154600160a81b9004161561401f5760405162461bcd60e51b8152600401808060200182810382526023815260200180615f426023913960400191505060405180910390fd5b6101615460ff831660009081526101636020908152604091829020600101548251636a93856760e01b8152600481019190915291516001600160a01b0390931692636a938567926024808201939291829003018186803b15801561408257600080fd5b505afa158015614096573d6000803e3d6000fd5b505050506040513d60208110156140ac57600080fd5b50516140e95760405162461bcd60e51b815260040180806020018281038252602281526020018061601b6022913960400191505060405180910390fd5b6101615460ff831660009081526101636020908152604091829020600101548251630b0f222760e11b8152600481019190915291516001600160a01b039093169263161e444e926024808201939291829003018186803b15801561414c57600080fd5b505afa158015614160573d6000803e3d6000fd5b505050506040513d602081101561417657600080fd5b505192915050565b60008261418d57506000611183565b8282028284828161419a57fe5b04146141ed576040805162461bcd60e51b815260206004820152601960248201527f556e6d756c7469706c69636174696f6e206f766572666c6f7700000000000000604482015290519081900360640190fd5b9392505050565b6000670de0b6b3a764000061421e61420c858561417e565b6002670de0b6b3a76400005b0461422d565b8161422557fe5b049392505050565b6000828201838110156141ed576040805162461bcd60e51b8152602060048201526013602482015272556e6164646974696f6e206f766572666c6f7760681b604482015290519081900360640190fd5b610161546101675460408051636a93856760e01b81526004810192909252516000926001600160a01b031691636a938567916024808301926020929190829003018186803b1580156142ce57600080fd5b505afa1580156142e2573d6000803e3d6000fd5b505050506040513d60208110156142f857600080fd5b505161434b576040805162461bcd60e51b815260206004820152601b60248201527f74617267657443757272656e6379206973206e6f742076616c69640000000000604482015290519081900360640190fd5b610161546101675460408051630b0f222760e11b81526004810192909252516001600160a01b039092169163161e444e91602480820192602092909190829003018186803b15801561439c57600080fd5b505afa1580156143b0573d6000803e3d6000fd5b505050506040513d60208110156143c657600080fd5b5051905090565b60008161421e6143e585670de0b6b3a764000061417e565b600285614218565b60006143fa848484614f4a565b905060006144066149d8565b915050670de0b6b3a7640000811461444657600061443661271061212261016e548661417e90919063ffffffff16565b90506144428382614b21565b9250505b600061446461271061212261016b548661417e90919063ffffffff16565b9050614470838261422d565b9695505050505050565b6101665460009060ff8084169116116144ce576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819da5d995b8817da59607a1b604482015290519081900360640190fd5b6000805b6101645460ff90811690821610156145845760006144ef82613f75565b60ff86811660009081526101656020908152604080832087851684526003018252808320546101639092529091206002015492935091600160a01b90041660121461456b5760ff80841660009081526101636020526040902060020154600160a01b900481166012031661456782600a83900a61417e565b9150505b61457861111083836141f4565b935050506001016144d2565b508061459b57670de0b6b3a7640000915050610f33565b60006145a561427d565b60ff851660009081526101656020526040812060040154919250906145cb9083906141f4565b90506145d783826143cd565b9350505050610f33565b6145e9611d74565b1561462e576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b61012e805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258614665613f71565b604080516001600160a01b039092168252519081900360200190a1565b600061468d3061500a565b15905090565b600054610100900460ff16806146ac57506146ac614682565b806146ba575060005460ff16155b6146f55760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff16158015614720576000805460ff1961ff0019909116610100171660011790555b614728615010565b6147306150ad565b61473861514a565b8015611770576000805461ff001916905550565b600054610100900460ff16806147655750614765614682565b80614773575060005460ff16155b6147ae5760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff161580156147d9576000805460ff1961ff0019909116610100171660011790555b6147386151ea565b600054610100900460ff16806147fa57506147fa614682565b80614808575060005460ff16155b6148435760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff1615801561486e576000805460ff1961ff0019909116610100171660011790555b61487661528f565b6000614880613f71565b6001600160a01b03166000908152609760205260409020805460ff19166001179055508015611770576000805461ff001916905550565b600054610100900460ff16806148d057506148d0614682565b806148de575060005460ff16155b6149195760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff16158015614944576000805460ff1961ff0019909116610100171660011790555b61494c61514a565b61473861532c565b61495c611d74565b6149a4576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b61012e805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa614665613f71565b60008060006149ed6149e8611056565b6153d8565b905060006149fa8261542d565b9050600082138015614a14575080670de0b6b3a764000012155b15614a2157809350614a2d565b670de0b6b3a764000093505b670de0b6b3a764000082138015614a4357508082135b15614a5057809250614a5c565b670de0b6b3a764000092505b50509091565b6000808211614aad576040805162461bcd60e51b8152602060048201526012602482015271556e6469766973696f6e206279207a65726f60701b604482015290519081900360640190fd5b6000828481614ab857fe5b04949350505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052614b1b908590615465565b50505050565b600082821115614b71576040805162461bcd60e51b8152602060048201526016602482015275556e7375627472616374696f6e206f766572666c6f7760501b604482015290519081900360640190fd5b50900390565b60ff841660009081526101656020526040902060020154614bb990614b9c908361417e565b60ff8616600090815261016560205260409020600401549061422d565b60ff8516600090815261016560205260409020600481019190915560050154614be2908261422d565b60ff808616600090815261016560209081526040808320600581019590955592871682526003909301909252902054614c1b908361422d565b60ff808616600081815261016560208181526040808420958a1680855260038701835281852097909755928490529081526002909301548151338152938401929092528281019390935260608201526080810184905260a0810183905290517f814595c6c8cd9b481ac4e0571779bcc3745d6a3ba06d3c042d04c1abcd1ee8599181900360c00190a160ff831660009081526101686020526040902054614cc2908361422d565b60ff8085166000908152610168602090815260408083209490945591871681526101659091522060020154614d0590614cfb908361417e565b610169549061422d565b6101695550505050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60ff841660009081526101656020526040902060020154614d7b90614d5e908361417e565b60ff86166000908152610165602052604090206004015490614b21565b60ff8516600090815261016560205260409020600481019190915560060154614da4908261422d565b60ff808616600090815261016560209081526040808320600681019590955592871682526003909301909252902054614ddd9083614b21565b60ff808616600081815261016560208181526040808420958a1680855260038701835281852097909755928490529081526002909301548151338152938401929092528281019390935260608201526080810184905260a0810183905290517fa79ae14dc10c3ec7fdfb1dda878fb17cfca3175e3c5ddb2f794970bab08f064f9181900360c00190a160ff831660009081526101686020526040902054614e849083614b21565b60ff8085166000908152610168602090815260408083209490945591871681526101659091522060020154614d0590614ebd908361417e565b6101695490614b21565b6000614ed4848484614f4a565b90506000614ee06149d8565b509050670de0b6b3a76400008114614f20576000614f1061271061212261016d548661417e90919063ffffffff16565b9050614f1c8382614b21565b9250505b6000614f3e61271061212261016c548661417e90919063ffffffff16565b90506144708382614b21565b600080614f5561427d565b90506000614f6285613f75565b60ff87166000908152610165602052604081206002015491925090614f9290614f8b908761417e565b84906141f4565b9050614f9e81836143cd565b60ff808816600090815261016360205260409020600201549195506012600160a01b90920416146150005760ff80871660009081526101636020526040902060020154600160a01b9004811660120316614ffc85600a83900a614a62565b9450505b5050509392505050565b3b151590565b600054610100900460ff16806150295750615029614682565b80615037575060005460ff16155b6150725760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff1615801561509d576000805460ff1961ff0019909116610100171660011790555b6147386301ffc9a760e01b61551b565b600054610100900460ff16806150c657506150c6614682565b806150d4575060005460ff16155b61510f5760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff1615801561513a576000805460ff1961ff0019909116610100171660011790555b614738630271189760e51b61551b565b600054610100900460ff16806151635750615163614682565b80615171575060005460ff16155b6151ac5760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff16158015614738576000805460ff1961ff0019909116610100171660011790558015611770576000805461ff001916905550565b600054610100900460ff16806152035750615203614682565b80615211575060005460ff16155b61524c5760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff16158015615277576000805460ff1961ff0019909116610100171660011790555b600180558015611770576000805461ff001916905550565b600054610100900460ff16806152a857506152a8614682565b806152b6575060005460ff16155b6152f15760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff1615801561531c576000805460ff1961ff0019909116610100171660011790555b61532461514a565b61473861559f565b600054610100900460ff16806153455750615345614682565b80615353575060005460ff16155b61538e5760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff161580156153b9576000805460ff1961ff0019909116610100171660011790555b61012e805460ff191690558015611770576000805461ff001916905550565b60006001600160ff1b03821115615429576040805162461bcd60e51b815260206004820152601060248201526f75696e74323536206f766572666c6f7760801b604482015290519081900360640190fd5b5090565b6000611183615456670de0b6b3a76400006154506781103cb9fb22000086615698565b906156cd565b678ac7230489e800009061573c565b60606154ba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166157589092919063ffffffff16565b805190915015615516578080602001905160208110156154d957600080fd5b50516155165760405162461bcd60e51b815260040180806020018281038252602a81526020018061605d602a913960400191505060405180910390fd5b505050565b6001600160e01b0319808216141561557a576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152609860205260409020805460ff19166001179055565b600054610100900460ff16806155b857506155b8614682565b806155c6575060005460ff16155b6156015760405162461bcd60e51b815260040180806020018281038252602e815260200180615fad602e913960400191505060405180910390fd5b600054610100900460ff1615801561562c576000805460ff1961ff0019909116610100171660011790555b6000615636613f71565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611770576000805461ff001916905550565b6000670de0b6b3a76400006156be6156b0858561576f565b670de0b6b3a764000061583a565b816156c557fe5b059392505050565b60008282018183128015906156e25750838112155b806156f757506000831280156156f757508381125b6141ed576040805162461bcd60e51b81526020600482015260116024820152706164646974696f6e206f766572666c6f7760781b604482015290519081900360640190fd5b60006141ed61574a836158b9565b615753856158b9565b615b94565b60606157678484600085615bc7565b949350505050565b60008261577e57506000611183565b826000191480156157925750600160ff1b82145b156157df576040805162461bcd60e51b8152602060048201526018602482015277776d756c7469706c69636174696f6e206f766572666c6f7760401b604482015290519081900360640190fd5b828202828482816157ec57fe5b05146141ed576040805162461bcd60e51b8152602060048201526018602482015277776d756c7469706c69636174696f6e206f766572666c6f7760401b604482015290519081900360640190fd5b6000808213615890576040805162461bcd60e51b815260206004820152601f60248201527f726f756e6448616c665570206f6e6c7920737570706f7274732079203e203000604482015290519081900360640190fd5b600083126158ac576158a583600284056156cd565b9050611183565b6141ed8360028405615d18565b600080821361590f576040805162461bcd60e51b815260206004820152601760248201527f6c6f6745206f66206e65676174697665206e756d626572000000000000000000604482015290519081900360640190fd5b701d6329f1c35ca4bfabb9f561000000000082131561595f5760405162461bcd60e51b8152600401808060200182810382526022815260200180615f656022913960400191505060405180910390fd5b60006012670de0b6b3a76400005b67016345785d8a0000851361599c5784600a0294506f01bb7635c5de48ef4ce5b7b41cc43db08303925061596d565b678ac7230489e8000085126159cb57600a850594506f01bb7635c5de48ef4ce5b7b41cc43db08301925061599c565b670de0b6b3a7640000851215615a08576159ed856725b946ebc0b36173615698565b94506ec097ce7bc90715b34b9f1000000000830392506159cb565b6725b946ebc0b36173851315615a4557615a2a856725b946ebc0b36173615b94565b94506ec097ce7bc90715b34b9f100000000083019250615a08565b670de0b6b3a7640000851415615a725780615a60848361583a565b81615a6757fe5b059350505050610f33565b6725b946ebc0b36173851415615aa95780615a8d848361583a565b81615a9457fe5b05670de0b6b3a7640000019350505050610f33565b938402936e4e16f927cdca7f15b39123f740f5d192909201916f0120e3b5b9ad8aa08cf16e980000000060008187016ec097ce7bc90715b34b9f10000000006f0120e3b5b9ad8aa08cf16e97ffffffff1989010281615b0457fe5b059050806002028501945060006ec097ce7bc90715b34b9f100000000082830281615b2b57fe5b05905060035b6ec097ce7bc90715b34b9f10000000008383020592508060ff168360020281615b5657fe5b059690960195600201602760ff821610615b6f57615b74565b615b31565b84615b7f888761583a565b81615b8657fe5b059998505050505050505050565b600080821215615bab578160000391508260000392505b816156be615bc185670de0b6b3a764000061576f565b8461583a565b606082471015615c085760405162461bcd60e51b8152600401808060200182810382526026815260200180615f876026913960400191505060405180910390fd5b615c118561500a565b615c62576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310615ca15780518252601f199092019160209182019101615c82565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615d03576040519150601f19603f3d011682016040523d82523d6000602084013e615d08565b606091505b509150915061149b828286615d8a565b6000818303818312801590615d2d5750838113155b80615d425750600083128015615d4257508381135b6141ed576040805162461bcd60e51b81526020600482015260146024820152737375627472616374696f6e206f766572666c6f7760601b604482015290519081900360640190fd5b60608315615d995750816141ed565b825115615da95782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615df3578181015183820152602001615ddb565b50505050905090810190601f168015615e205780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615e6f57805160ff1916838001178555615e9c565b82800160010185558215615e9c579182015b82811115615e9c578251825591602001919060010190615e81565b506154299291505b808211156154295760008155600101615ea456fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00496e76616c696420676976656e205f636f6c6c61746572616c496400000000005f646563696d616c732073686f756c64206e6f742062652065786365656465642031384f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737354686520676976656e205f636f6c6c61746572616c49642069732064697361626c65646c6f6745206f6e6c7920616363657074732076203c3d2031653232202a2031653138416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657254686520676976656e205f76617269616e7449642069732064697361626c6564636f6c6c61746572616c536861726553796d626f6c206973206e6f742076616c69645f746f6b656e416d6f756e742063616e2774206265207a65726f0000000000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220b4d1285553db7895642c219294373ab689c60d434ec2f538166fda749ea2b1a864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAddress(address)": {
        "details": "adds a given address to the whitelist",
        "params": {
          "_address": "address to add"
        }
      },
      "estimateMint(uint8,uint8,uint256)": {
        "params": {
          "_collateralId": "the collateral asset to use",
          "_tokenAmount": "total NFT to be created",
          "_variantId": "the NFT's variant id"
        },
        "returns": {
          "amount": "the amount of the collateral need for minting"
        }
      },
      "estimateRedeem(uint8,uint8,uint256)": {
        "params": {
          "_collateralId": "the collateral asset to use",
          "_tokenAmount": "total NFT to be burnt",
          "_variantId": "the NFT's variant id"
        },
        "returns": {
          "amount": "amount of collateral to be returned"
        }
      },
      "getCollateralPrice(uint8)": {
        "params": {
          "_collateralId": "the collateral id"
        },
        "returns": {
          "_0": "US price per a collateral token"
        }
      },
      "getSyntheticPrice()": {
        "returns": {
          "_0": "US price per a synthetic token"
        }
      },
      "getVariantCollateral(uint8,uint8)": {
        "params": {
          "_collateralId": "the collateral id"
        },
        "returns": {
          "_0": "amount total amount of collateral"
        }
      },
      "globalCollatelizationRatio()": {
        "returns": {
          "_0": "the system collateral ratio"
        }
      },
      "initialize(address,bytes32,bytes32,bytes32,address)": {
        "params": {
          "_devAddress": "dev address",
          "_registryAddress": "the address of the registry contract"
        }
      },
      "isWhitelisted(address)": {
        "details": "returns true if a given address is whitelisted, false if not",
        "params": {
          "_address": "address to check"
        },
        "returns": {
          "_0": "true if the address is whitelisted, false if not"
        }
      },
      "mint(uint8,uint8,uint256,uint256)": {
        "params": {
          "_collateralId": "the collateral id",
          "_maxCollateralAmount": "cap. amount of token that can be sent out from the wallet",
          "_tokenAmount": "total NFT to be created",
          "_variantId": "the NFT's variant id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "redeem(uint8,uint8,uint256,uint256)": {
        "params": {
          "_collateralId": "the collateral id",
          "_minAmount": "min. amount of collateral token expects to receive",
          "_tokenAmount": "total NFT to be burnt",
          "_variantId": "the NFT's variant id"
        }
      },
      "removeAddress(address)": {
        "details": "removes a given address from the whitelist",
        "params": {
          "_address": "address to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "targetCollatelizationRatio()": {
        "returns": {
          "_0": "the target ratio when CR < 1",
          "_1": "the target ratio when CR > 1"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "variantCollatelizationRatio(uint8)": {
        "params": {
          "_id": "the NFT's variant id"
        },
        "returns": {
          "_0": "the variant collateral ratio"
        }
      }
    },
    "title": "A contract to collaterizes ERC-20 and mints NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "estimateMint(uint8,uint8,uint256)": {
        "notice": "calculate amount of collateral assets to be placed for minting the NFT"
      },
      "estimateRedeem(uint8,uint8,uint256)": {
        "notice": "calculate amount of collateral assets to be returned when burning NFT"
      },
      "getCollateralPrice(uint8)": {
        "notice": "call the price feeder registry to retrieve the latest price of collateral token"
      },
      "getSyntheticPrice()": {
        "notice": "call the price feeder registry to retrieve the latest price of NFT"
      },
      "getVariantCollateral(uint8,uint8)": {
        "notice": "check variant collateral"
      },
      "globalCollatelizationRatio()": {
        "notice": "looks for the system collateral ratio basically calculates from total collateral deposited / total NFT minted"
      },
      "initialize(address,bytes32,bytes32,bytes32,address)": {
        "notice": "the contructor"
      },
      "mint(uint8,uint8,uint256,uint256)": {
        "notice": "taking collateral tokens to mint the NFT"
      },
      "redeem(uint8,uint8,uint256,uint256)": {
        "notice": "burning NFT and returning collateral assets, the offset fee will be charged when CR < 1"
      },
      "targetCollatelizationRatio()": {
        "notice": "calculates the normalized collateral ratio"
      },
      "variantCollatelizationRatio(uint8)": {
        "notice": "calculates the collateral ratio for particular variant"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1105,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1108,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2351,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2394,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2223,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 465,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 584,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22399,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "whitelist",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 673,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 730,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1297,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1242,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2245,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "_paused",
        "offset": 0,
        "slot": "302",
        "type": "t_bool"
      },
      {
        "astId": 2336,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "303",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9901,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "registry",
        "offset": 0,
        "slot": "352",
        "type": "t_contract(IRegistry)19274"
      },
      {
        "astId": 9903,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "priceResolver",
        "offset": 0,
        "slot": "353",
        "type": "t_contract(IPriceResolver)19245"
      },
      {
        "astId": 9906,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "syntheticNFT",
        "offset": 0,
        "slot": "354",
        "type": "t_contract(ISyntheticNFT)19338"
      },
      {
        "astId": 9910,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "collaterals",
        "offset": 0,
        "slot": "355",
        "type": "t_mapping(t_uint8,t_struct(CollateralAsset)9880_storage)"
      },
      {
        "astId": 9912,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "collateralCount",
        "offset": 0,
        "slot": "356",
        "type": "t_uint8"
      },
      {
        "astId": 9916,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "syntheticVariants",
        "offset": 0,
        "slot": "357",
        "type": "t_mapping(t_uint8,t_struct(SyntheticVariant)9899_storage)"
      },
      {
        "astId": 9918,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "syntheticVariantCount",
        "offset": 0,
        "slot": "358",
        "type": "t_uint8"
      },
      {
        "astId": 9920,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "targetCurrency",
        "offset": 0,
        "slot": "359",
        "type": "t_bytes32"
      },
      {
        "astId": 9924,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "totalRawCollateral",
        "offset": 0,
        "slot": "360",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 9926,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "totalOutstanding",
        "offset": 0,
        "slot": "361",
        "type": "t_uint256"
      },
      {
        "astId": 9928,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "devAddress",
        "offset": 0,
        "slot": "362",
        "type": "t_address"
      },
      {
        "astId": 9930,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "mintFee",
        "offset": 0,
        "slot": "363",
        "type": "t_uint256"
      },
      {
        "astId": 9932,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "redeemFee",
        "offset": 0,
        "slot": "364",
        "type": "t_uint256"
      },
      {
        "astId": 9934,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "offsetFee",
        "offset": 0,
        "slot": "365",
        "type": "t_uint256"
      },
      {
        "astId": 9936,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "discountFee",
        "offset": 0,
        "slot": "366",
        "type": "t_uint256"
      },
      {
        "astId": 9938,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "ROUTER_ADDRESS",
        "offset": 0,
        "slot": "367",
        "type": "t_address"
      },
      {
        "astId": 9940,
        "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
        "label": "maxNft",
        "offset": 0,
        "slot": "368",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IPriceResolver)19245": {
        "encoding": "inplace",
        "label": "contract IPriceResolver",
        "numberOfBytes": "20"
      },
      "t_contract(IRegistry)19274": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ISyntheticNFT)19338": {
        "encoding": "inplace",
        "label": "contract ISyntheticNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_struct(CollateralAsset)9880_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct NFTManagerUpgradeable.CollateralAsset)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralAsset)9880_storage"
      },
      "t_mapping(t_uint8,t_struct(SyntheticVariant)9899_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct NFTManagerUpgradeable.SyntheticVariant)",
        "numberOfBytes": "32",
        "value": "t_struct(SyntheticVariant)9899_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CollateralAsset)9880_storage": {
        "encoding": "inplace",
        "label": "struct NFTManagerUpgradeable.CollateralAsset",
        "members": [
          {
            "astId": 9871,
            "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 9873,
            "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
            "label": "priceFeeder",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 9875,
            "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 9877,
            "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
            "label": "decimals",
            "offset": 20,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 9879,
            "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
            "label": "disabled",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(SyntheticVariant)9899_storage": {
        "encoding": "inplace",
        "label": "struct NFTManagerUpgradeable.SyntheticVariant",
        "members": [
          {
            "astId": 9882,
            "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 9884,
            "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9886,
            "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
            "label": "tokenValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9890,
            "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
            "label": "totalRawCollateral",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint8,t_uint256)"
          },
          {
            "astId": 9892,
            "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
            "label": "totalOutstanding",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9894,
            "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
            "label": "totalIssued",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9896,
            "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
            "label": "totalBurnt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9898,
            "contract": "contracts/NFTManagerUpgradeable.sol:NFTManagerUpgradeable",
            "label": "disabled",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}